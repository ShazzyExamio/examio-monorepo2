{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nvar _jsxFileName = \"/Users/trensik/dev/react-native-paper/src/components/Menu/MenuItem.tsx\";\nimport color from 'color';\nimport * as React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Icon from \"../Icon\";\nimport TouchableRipple from \"../TouchableRipple\";\nimport Text from \"../Typography/Text\";\nimport { withTheme } from \"../../core/theming\";\nimport { black, white } from \"../../styles/colors\";\n\nvar MenuItem = function (_React$Component) {\n  _inherits(MenuItem, _React$Component);\n\n  function MenuItem() {\n    _classCallCheck(this, MenuItem);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(MenuItem).apply(this, arguments));\n  }\n\n  _createClass(MenuItem, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          icon = _this$props.icon,\n          title = _this$props.title,\n          disabled = _this$props.disabled,\n          onPress = _this$props.onPress,\n          theme = _this$props.theme,\n          style = _this$props.style;\n      var disabledColor = color(theme.dark ? white : black).alpha(0.32).rgb().string();\n      var titleColor = disabled ? disabledColor : color(theme.colors.text).alpha(0.87).rgb().string();\n      var iconColor = disabled ? disabledColor : color(theme.colors.text).alpha(0.54).rgb().string();\n      return React.createElement(TouchableRipple, {\n        style: [styles.container, style],\n        onPress: onPress,\n        disabled: disabled,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66\n        }\n      }, React.createElement(View, {\n        style: styles.row,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71\n        }\n      }, icon ? React.createElement(View, {\n        style: [styles.item, styles.icon],\n        pointerEvents: \"box-none\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73\n        }\n      }, React.createElement(Icon, {\n        source: icon,\n        size: 24,\n        color: iconColor,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74\n        }\n      })) : null, React.createElement(View, {\n        style: [styles.item, styles.content, icon ? styles.widthWithIcon : null],\n        pointerEvents: \"none\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77\n        }\n      }, React.createElement(Text, {\n        numberOfLines: 1,\n        style: [styles.title, {\n          color: titleColor\n        }],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85\n        }\n      }, title))));\n    }\n  }]);\n\n  return MenuItem;\n}(React.Component);\n\nMenuItem.displayName = 'Menu.Item';\nvar minWidth = 112;\nvar maxWidth = 280;\nvar iconWidth = 40;\nvar styles = StyleSheet.create({\n  container: {\n    padding: 8,\n    minWidth: minWidth,\n    maxWidth: maxWidth\n  },\n  row: {\n    flexDirection: 'row'\n  },\n  icon: {\n    width: iconWidth\n  },\n  title: {\n    fontSize: 16\n  },\n  item: {\n    margin: 8\n  },\n  content: {\n    justifyContent: 'center',\n    minWidth: minWidth - 16,\n    maxWidth: maxWidth - 16\n  },\n  widthWithIcon: {\n    maxWidth: maxWidth - (iconWidth + 48)\n  }\n});\nexport default withTheme(MenuItem);\nexport { MenuItem };","map":{"version":3,"sources":["MenuItem.tsx"],"names":["MenuItem","React","Component","displayName","icon","title","disabled","onPress","theme","style","disabledColor","color","titleColor","iconColor","styles","minWidth","maxWidth","iconWidth","StyleSheet","container","padding","row","flexDirection","width","fontSize","item","margin","content","justifyContent","widthWithIcon","withTheme"],"mappings":"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","sourcesContent":["import color from 'color';\nimport * as React from 'react';\nimport { View, StyleSheet } from 'react-native';\nimport Icon, { IconSource } from '../Icon';\nimport TouchableRipple from '../TouchableRipple';\nimport Text from '../Typography/Text';\nimport { withTheme } from '../../core/theming';\nimport { black, white } from '../../styles/colors';\nimport { Theme } from '../../types';\n\ntype Props = {\n  /**\n   * Title text for the `MenuItem`.\n   */\n  title: React.ReactNode;\n  /**\n   * Icon to display for the `MenuItem`.\n   */\n  icon?: IconSource;\n  /**\n   * Whether the 'item' is disabled. A disabled 'item' is greyed out and `onPress` is not called on touch.\n   */\n  disabled?: boolean;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * @optional\n   */\n  theme: Theme;\n  style?: any;\n};\n\n/**\n * A component to show a single list item inside a Menu.\n *\n */\n\nclass MenuItem extends React.Component<Props> {\n  static displayName = 'Menu.Item';\n\n  render() {\n    const { icon, title, disabled, onPress, theme, style } = this.props;\n\n    const disabledColor = color(theme.dark ? white : black)\n      .alpha(0.32)\n      .rgb()\n      .string();\n\n    const titleColor = disabled\n      ? disabledColor\n      : color(theme.colors.text)\n          .alpha(0.87)\n          .rgb()\n          .string();\n\n    const iconColor = disabled\n      ? disabledColor\n      : color(theme.colors.text)\n          .alpha(0.54)\n          .rgb()\n          .string();\n\n    return (\n      <TouchableRipple\n        style={[styles.container, style]}\n        onPress={onPress}\n        disabled={disabled}\n      >\n        <View style={styles.row}>\n          {icon ? (\n            <View style={[styles.item, styles.icon]} pointerEvents=\"box-none\">\n              <Icon source={icon} size={24} color={iconColor} />\n            </View>\n          ) : null}\n          <View\n            style={[\n              styles.item,\n              styles.content,\n              icon ? styles.widthWithIcon : null,\n            ]}\n            pointerEvents=\"none\"\n          >\n            <Text\n              numberOfLines={1}\n              style={[styles.title, { color: titleColor }]}\n            >\n              {title}\n            </Text>\n          </View>\n        </View>\n      </TouchableRipple>\n    );\n  }\n}\n\nconst minWidth = 112;\nconst maxWidth = 280;\nconst iconWidth = 40;\n\nconst styles = StyleSheet.create({\n  container: {\n    padding: 8,\n    minWidth,\n    maxWidth,\n  },\n  row: {\n    flexDirection: 'row',\n  },\n  icon: {\n    width: iconWidth,\n  },\n  title: {\n    fontSize: 16,\n  },\n  item: {\n    margin: 8,\n  },\n  content: {\n    justifyContent: 'center',\n    minWidth: minWidth - 16,\n    maxWidth: maxWidth - 16,\n  },\n  widthWithIcon: {\n    maxWidth: maxWidth - (iconWidth + 48),\n  },\n});\n\nexport default withTheme(MenuItem);\n\n// @component-docs ignore-next-line\nexport { MenuItem };\n"]},"metadata":{},"sourceType":"module"}