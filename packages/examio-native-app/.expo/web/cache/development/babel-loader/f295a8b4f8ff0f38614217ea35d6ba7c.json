{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nvar _jsxFileName = \"/Users/satya/Workspace/Callstack/react-navigation-stack/src/views/StackView/StackViewCard.tsx\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(source, true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(source).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nimport * as React from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { Screen } from 'react-native-screens';\nimport { ThemeContext, ThemeColors } from 'react-navigation';\nimport createPointerEventsContainer from \"./createPointerEventsContainer\";\nvar EPS = 1e-5;\n\nfunction getAccessibilityProps(isActive) {\n  if (Platform.OS === 'ios') {\n    return {\n      accessibilityElementsHidden: !isActive\n    };\n  } else if (Platform.OS === 'android') {\n    return {\n      importantForAccessibility: isActive ? 'yes' : 'no-hide-descendants'\n    };\n  } else {\n    return {};\n  }\n}\n\nvar Card = function (_React$Component) {\n  _inherits(Card, _React$Component);\n\n  function Card() {\n    _classCallCheck(this, Card);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Card).apply(this, arguments));\n  }\n\n  _createClass(Card, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          children = _this$props.children,\n          pointerEvents = _this$props.pointerEvents,\n          style = _this$props.style,\n          position = _this$props.position,\n          transparent = _this$props.transparent,\n          _this$props$scene = _this$props.scene,\n          index = _this$props$scene.index,\n          isActive = _this$props$scene.isActive;\n      var active = Platform.select({\n        web: isActive,\n        default: transparent || isActive ? 1 : position.interpolate({\n          inputRange: [index, index + 1 - EPS, index + 1],\n          outputRange: [1, 1, 0],\n          extrapolate: 'clamp'\n        })\n      });\n      var animatedStyle = this.props.animatedStyle || {};\n\n      var shadowOpacity = animatedStyle.shadowOpacity,\n          overlayOpacity = animatedStyle.overlayOpacity,\n          containerAnimatedStyle = _objectWithoutProperties(animatedStyle, [\"shadowOpacity\", \"overlayOpacity\"]);\n\n      var flattenedStyle = StyleSheet.flatten(style) || {};\n\n      var backgroundColor = flattenedStyle.backgroundColor,\n          screenStyle = _objectWithoutProperties(flattenedStyle, [\"backgroundColor\"]);\n\n      var isDark = this.context === 'dark';\n      var baseCardStyle;\n\n      if (isDark) {\n        baseCardStyle = transparent ? styles.transparentDark : styles.cardDark;\n      } else {\n        baseCardStyle = transparent ? styles.transparentLight : styles.cardLight;\n      }\n\n      return React.createElement(Screen, {\n        pointerEvents: pointerEvents,\n        onComponentRef: this.props.onComponentRef,\n        style: [containerAnimatedStyle, screenStyle],\n        active: active,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93\n        }\n      }, !transparent && shadowOpacity ? React.createElement(Animated.View, {\n        style: [styles.shadow, {\n          shadowOpacity: shadowOpacity\n        }],\n        pointerEvents: \"none\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101\n        }\n      }) : null, React.createElement(Animated.View, _extends({}, getAccessibilityProps(isActive), {\n        style: [baseCardStyle, backgroundColor && backgroundColor !== 'transparent' ? {\n          backgroundColor: backgroundColor\n        } : null],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106\n        }\n      }), children), overlayOpacity ? React.createElement(Animated.View, {\n        pointerEvents: \"none\",\n        style: [isDark ? styles.overlayDark : styles.overlayLight, {\n          opacity: overlayOpacity\n        }],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 118\n        }\n      }) : null);\n    }\n  }]);\n\n  return Card;\n}(React.Component);\n\nCard.contextType = ThemeContext;\nvar styles = StyleSheet.create({\n  cardLight: {\n    flex: 1,\n    backgroundColor: ThemeColors.light.body\n  },\n  cardDark: {\n    flex: 1,\n    backgroundColor: ThemeColors.dark.body\n  },\n  overlayLight: _objectSpread({}, StyleSheet.absoluteFillObject, {\n    backgroundColor: '#000'\n  }),\n  overlayDark: _objectSpread({}, StyleSheet.absoluteFillObject, {\n    backgroundColor: '#fff'\n  }),\n  shadow: {\n    top: 0,\n    left: 0,\n    bottom: 0,\n    width: 3,\n    position: 'absolute',\n    backgroundColor: '#fff',\n    shadowOffset: {\n      width: -1,\n      height: 1\n    },\n    shadowRadius: 5,\n    shadowColor: '#000'\n  },\n  transparentLight: {\n    flex: 1,\n    backgroundColor: 'transparent'\n  },\n  transparentDark: {\n    flex: 1,\n    backgroundColor: 'transparent'\n  }\n});\nexport default createPointerEventsContainer(Card);","map":{"version":3,"sources":["StackViewCard.tsx"],"names":["EPS","Platform","accessibilityElementsHidden","importantForAccessibility","isActive","Card","React","Component","contextType","ThemeContext","children","pointerEvents","style","position","transparent","index","active","web","default","inputRange","outputRange","extrapolate","animatedStyle","shadowOpacity","overlayOpacity","containerAnimatedStyle","flattenedStyle","StyleSheet","backgroundColor","screenStyle","isDark","baseCardStyle","styles","getAccessibilityProps","opacity","cardLight","flex","ThemeColors","cardDark","overlayLight","overlayDark","shadow","top","left","bottom","width","shadowOffset","height","shadowRadius","shadowColor","transparentLight","transparentDark","createPointerEventsContainer"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AAAA,OAAO,KAAP,KAAA,MAAA,OAAA;;;;AAQA,SAAA,MAAA,QAAA,sBAAA;AACA,SAAA,YAAA,EAAA,WAAA,QAAA,kBAAA;AAEA,OAAA,4BAAA;AAcA,IAAMA,GAAG,GAAT,IAAA;;AAEA,SAAA,qBAAA,CAAA,QAAA,EAAkD;EAChD,IAAIC,QAAQ,CAARA,EAAAA,KAAJ,KAAA,EAA2B;IACzB,OAAO;MACLC,2BAA2B,EAAE,CAD/B;IAAO,CAAP;EADF,CAAA,MAIO,IAAID,QAAQ,CAARA,EAAAA,KAAJ,SAAA,EAA+B;IACpC,OAAO;MACLE,yBAAyB,EAAEC,QAAQ,GAAA,KAAA,GADrC;IAAO,CAAP;EADK,CAAA,MAIA;IACL,OAAA,EAAA;EAEH;AAKKC;;AAAAA,IAAAA,I;;;;;;;;;;;6BAIK;MAAA,IAAA,WAAA,GAQH,KARG,KAAA;MAAA,IAELK,QAFK,GAAA,WAAA,CAAA,QAAA;MAAA,IAGLC,aAHK,GAAA,WAAA,CAAA,aAAA;MAAA,IAILC,KAJK,GAAA,WAAA,CAAA,KAAA;MAAA,IAKLC,QALK,GAAA,WAAA,CAAA,QAAA;MAAA,IAMLC,WANK,GAAA,WAAA,CAAA,WAAA;MAAA,IAAA,iBAAA,GAAA,WAAA,CAAA,KAAA;MAAA,IAOIC,KAPJ,GAAA,iBAAA,CAAA,KAAA;MAAA,IAOWX,QAPX,GAAA,iBAAA,CAAA,QAAA;MAUP,IAAMY,MAAyC,GAAGf,QAAQ,CAARA,MAAAA,CAAgB;QAChEgB,GAAG,EAD6D,QAAA;QAGhEC,OAAO,EACLJ,WAAW,IAAXA,QAAAA,GAAAA,CAAAA,GAEID,QAAQ,CAARA,WAAAA,CAAqB;UACnBM,UAAU,EAAE,CAAA,KAAA,EAAQJ,KAAK,GAALA,CAAAA,GAAR,GAAA,EAAyBA,KAAK,GADvB,CACP,CADO;UAEnBK,WAAW,EAAE,CAAA,CAAA,EAAA,CAAA,EAFM,CAEN,CAFM;UAGnBC,WAAW,EATrB;QAM6B,CAArBR;MAN0D,CAAhBZ,CAAlD;MAcA,IAAMqB,aAAa,GAAG,KAAA,KAAA,CAAA,aAAA,IAAtB,EAAA;;MAxBO,IA2BLC,aA3BK,GA8BHD,aA9BG,CAAA,aAAA;MAAA,IA4BLE,cA5BK,GA8BHF,aA9BG,CAAA,cAAA;MAAA,IA6BFG,sBA7BE,GAAA,wBAAA,CAAA,aAAA,EAAA,CAAA,eAAA,EAAA,gBAAA,CAAA,CAAA;;MAgCP,IAAIC,cAAc,GAAGC,UAAU,CAAVA,OAAAA,CAAAA,KAAAA,KAArB,EAAA;;MAhCO,IAiCDC,eAjCC,GAiCmCF,cAjCnC,CAAA,eAAA;MAAA,IAiCmBG,WAjCnB,GAAA,wBAAA,CAAA,cAAA,EAAA,CAAA,iBAAA,CAAA,CAAA;;MAkCP,IAAIC,MAAM,GAAG,KAAA,OAAA,KAAb,MAAA;MACA,IAAA,aAAA;;MAEA,IAAA,MAAA,EAAY;QACVC,aAAa,GAAGjB,WAAW,GAAGkB,MAAM,CAAT,eAAA,GAA4BA,MAAM,CAA7DD,QAAAA;MADF,CAAA,MAEO;QACLA,aAAa,GAAGjB,WAAW,GAAGkB,MAAM,CAAT,gBAAA,GAA6BA,MAAM,CAA9DD,SAAAA;MAGF;;MAAA,OACE,KAAA,CAAA,aAAA,CAAA,MAAA,EAAA;QACE,aAAa,EADf,aAAA;QAEE,cAAc,EAAE,KAAA,KAAA,CAFlB,cAAA;QAGE,KAAK,EAAE,CAAA,sBAAA,EAHT,WAGS,CAHT;QAKE,MAAM,EALR,MAAA;QAAA,QAAA,EAAA;UAAA,QAAA,EAAA,YAAA;UAAA,UAAA,EAAA;QAAA;MAAA,CAAA,EAOG,CAAA,WAAA,IAAA,aAAA,GACC,KAAA,CAAA,aAAA,CAAC,QAAD,CAAA,IAAA,EAAA;QACE,KAAK,EAAE,CAACC,MAAM,CAAP,MAAA,EAAgB;UAAET,aAAa,EADxC;QACyB,CAAhB,CADT;QAEE,aAAa,EAFf,MAAA;QAAA,QAAA,EAAA;UAAA,QAAA,EAAA,YAAA;UAAA,UAAA,EADD;QACC;MAAA,CAAA,CADD,GAPH,IAAA,EAaE,KAAA,CAAA,aAAA,CAAC,QAAD,CAAA,IAAA,EAAA,QAAA,CAAA,EAAA,EACMU,qBAAqB,CAD3B,QAC2B,CAD3B,EAAA;QAEE,KAAK,EAAE,CAAA,aAAA,EAELL,eAAe,IAAIA,eAAe,KAAlCA,aAAAA,GACI;UAAEA,eAAe,EADrBA;QACI,CADJA,GAJJ,IAES,CAFT;QAAA,QAAA,EAAA;UAAA,QAAA,EAAA,YAAA;UAAA,UAAA,EAAA;QAAA;MAAA,CAAA,CAAA,EAbF,QAaE,CAbF,EAwBGJ,cAAc,GACb,KAAA,CAAA,aAAA,CAAC,QAAD,CAAA,IAAA,EAAA;QACE,aAAa,EADf,MAAA;QAEE,KAAK,EAAE,CACLM,MAAM,GAAGE,MAAM,CAAT,WAAA,GAAwBA,MAAM,CAD/B,YAAA,EAEL;UAAEE,OAAO,EAJb;QAII,CAFK,CAFT;QAAA,QAAA,EAAA;UAAA,QAAA,EAAA,YAAA;UAAA,UAAA,EADa;QACb;MAAA,CAAA,CADa,GAzBnB,IACE,CADF;;;;;EA/Ce5B,KAAK,CAACC,S,CAAnBF;;AAAAA,I,CACGG,WADHH,GACiBI,YADjBJ;AAsFN,IAAM2B,MAAM,GAAGL,UAAU,CAAVA,MAAAA,CAAkB;EAC/BQ,SAAS,EAAE;IACTC,IAAI,EADK,CAAA;IAETR,eAAe,EAAES,WAAW,CAAXA,KAAAA,CAHY;EACpB,CADoB;EAK/BC,QAAQ,EAAE;IACRF,IAAI,EADI,CAAA;IAERR,eAAe,EAAES,WAAW,CAAXA,IAAAA,CAPY;EAKrB,CALqB;EAS/BE,YAAY,EAAA,aAAA,CAAA,EAAA,EACPZ,UAAU,CADH,kBAAA,EAAA;IAEVC,eAAe,EAXc;EASnB,CAAA,CATmB;EAa/BY,WAAW,EAAA,aAAA,CAAA,EAAA,EACNb,UAAU,CADJ,kBAAA,EAAA;IAETC,eAAe,EAfc;EAapB,CAAA,CAboB;EAkB/Ba,MAAM,EAAE;IACNC,GAAG,EADG,CAAA;IAENC,IAAI,EAFE,CAAA;IAGNC,MAAM,EAHA,CAAA;IAINC,KAAK,EAJC,CAAA;IAKNhC,QAAQ,EALF,UAAA;IAMNe,eAAe,EANT,MAAA;IAONkB,YAAY,EAAE;MAAED,KAAK,EAAE,CAAT,CAAA;MAAaE,MAAM,EAP3B;IAOQ,CAPR;IAQNC,YAAY,EARN,CAAA;IASNC,WAAW,EA3BkB;EAkBvB,CAlBuB;EA6B/BC,gBAAgB,EAAE;IAChBd,IAAI,EADY,CAAA;IAEhBR,eAAe,EA/Bc;EA6Bb,CA7Ba;EAiC/BuB,eAAe,EAAE;IACff,IAAI,EADW,CAAA;IAEfR,eAAe,EAnCnB;EAiCmB;AAjCc,CAAlBD,CAAf;AAuCA,eAAeyB,4BAA4B,CAA3C,IAA2C,CAA3C","sourcesContent":["import * as React from 'react';\nimport {\n  Animated,\n  StyleSheet,\n  Platform,\n  StyleProp,\n  ViewStyle,\n} from 'react-native';\nimport { Screen } from 'react-native-screens';\nimport { ThemeContext, ThemeColors } from 'react-navigation';\n\nimport createPointerEventsContainer, {\n  InputProps,\n  InjectedProps,\n} from './createPointerEventsContainer';\n\ntype Props = InputProps &\n  InjectedProps & {\n    style: StyleProp<ViewStyle>;\n    animatedStyle: any;\n    position: Animated.AnimatedInterpolation;\n    transparent?: boolean;\n    children: React.ReactNode;\n  };\n\nconst EPS = 1e-5;\n\nfunction getAccessibilityProps(isActive: boolean) {\n  if (Platform.OS === 'ios') {\n    return {\n      accessibilityElementsHidden: !isActive,\n    };\n  } else if (Platform.OS === 'android') {\n    return {\n      importantForAccessibility: isActive ? 'yes' : 'no-hide-descendants',\n    };\n  } else {\n    return {};\n  }\n}\n\n/**\n * Component that renders the scene as card for the <StackView />.\n */\nclass Card extends React.Component<Props> {\n  static contextType = ThemeContext;\n  context!: React.ContextType<typeof ThemeContext>;\n\n  render() {\n    const {\n      children,\n      pointerEvents,\n      style,\n      position,\n      transparent,\n      scene: { index, isActive },\n    } = this.props;\n\n    const active: Animated.Value | number | boolean = Platform.select({\n      web: isActive,\n      // @ts-ignore\n      default:\n        transparent || isActive\n          ? 1\n          : position.interpolate({\n              inputRange: [index, index + 1 - EPS, index + 1],\n              outputRange: [1, 1, 0],\n              extrapolate: 'clamp',\n            }),\n    });\n\n    // animatedStyle can be `false` if there is no screen interpolator\n    const animatedStyle = this.props.animatedStyle || {};\n\n    const {\n      shadowOpacity,\n      overlayOpacity,\n      ...containerAnimatedStyle\n    } = animatedStyle;\n\n    let flattenedStyle = StyleSheet.flatten(style) || {};\n    let { backgroundColor, ...screenStyle } = flattenedStyle;\n    let isDark = this.context === 'dark';\n    let baseCardStyle;\n\n    if (isDark) {\n      baseCardStyle = transparent ? styles.transparentDark : styles.cardDark;\n    } else {\n      baseCardStyle = transparent ? styles.transparentLight : styles.cardLight;\n    }\n\n    return (\n      <Screen\n        pointerEvents={pointerEvents}\n        onComponentRef={this.props.onComponentRef}\n        style={[containerAnimatedStyle, screenStyle]}\n        // @ts-ignore\n        active={active}\n      >\n        {!transparent && shadowOpacity ? (\n          <Animated.View\n            style={[styles.shadow, { shadowOpacity }]}\n            pointerEvents=\"none\"\n          />\n        ) : null}\n        <Animated.View\n          {...getAccessibilityProps(isActive)}\n          style={[\n            baseCardStyle,\n            backgroundColor && backgroundColor !== 'transparent'\n              ? { backgroundColor }\n              : null,\n          ]}\n        >\n          {children}\n        </Animated.View>\n        {overlayOpacity ? (\n          <Animated.View\n            pointerEvents=\"none\"\n            style={[\n              isDark ? styles.overlayDark : styles.overlayLight,\n              { opacity: overlayOpacity },\n            ]}\n          />\n        ) : null}\n      </Screen>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  cardLight: {\n    flex: 1,\n    backgroundColor: ThemeColors.light.body,\n  },\n  cardDark: {\n    flex: 1,\n    backgroundColor: ThemeColors.dark.body,\n  },\n  overlayLight: {\n    ...StyleSheet.absoluteFillObject,\n    backgroundColor: '#000',\n  },\n  overlayDark: {\n    ...StyleSheet.absoluteFillObject,\n    backgroundColor: '#fff',\n  },\n  // TODO: what should shadow be styled like?\n  shadow: {\n    top: 0,\n    left: 0,\n    bottom: 0,\n    width: 3,\n    position: 'absolute',\n    backgroundColor: '#fff',\n    shadowOffset: { width: -1, height: 1 },\n    shadowRadius: 5,\n    shadowColor: '#000',\n  },\n  transparentLight: {\n    flex: 1,\n    backgroundColor: 'transparent',\n  },\n  transparentDark: {\n    flex: 1,\n    backgroundColor: 'transparent',\n  },\n});\n\nexport default createPointerEventsContainer(Card);\n"]},"metadata":{},"sourceType":"module"}