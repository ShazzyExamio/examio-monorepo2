{"ast":null,"code":"import _objectSpread from \"@babel/runtime/helpers/objectSpread\";\nexport default function getChildEventSubscriber(addListener, key) {\n  var initialLastFocusEvent = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'didBlur';\n  var actionSubscribers = new Set();\n  var willFocusSubscribers = new Set();\n  var didFocusSubscribers = new Set();\n  var willBlurSubscribers = new Set();\n  var didBlurSubscribers = new Set();\n  var refocusSubscribers = new Set();\n\n  var removeAll = function removeAll() {\n    [actionSubscribers, willFocusSubscribers, didFocusSubscribers, willBlurSubscribers, didBlurSubscribers, refocusSubscribers].forEach(function (set) {\n      return set.clear();\n    });\n    upstreamSubscribers.forEach(function (subs) {\n      return subs && subs.remove();\n    });\n  };\n\n  var getChildSubscribers = function getChildSubscribers(evtName) {\n    switch (evtName) {\n      case 'action':\n        return actionSubscribers;\n\n      case 'willFocus':\n        return willFocusSubscribers;\n\n      case 'didFocus':\n        return didFocusSubscribers;\n\n      case 'willBlur':\n        return willBlurSubscribers;\n\n      case 'didBlur':\n        return didBlurSubscribers;\n\n      case 'refocus':\n        return refocusSubscribers;\n\n      default:\n        return null;\n    }\n  };\n\n  var _emit = function emit(type, payload) {\n    var payloadWithType = _objectSpread({}, payload, {\n      type: type\n    });\n\n    var subscribers = getChildSubscribers(type);\n    subscribers && subscribers.forEach(function (subs) {\n      subs(payloadWithType);\n    });\n  };\n\n  var lastFocusEvent = initialLastFocusEvent;\n  var upstreamEvents = ['willFocus', 'didFocus', 'willBlur', 'didBlur', 'refocus', 'action'];\n  var upstreamSubscribers = upstreamEvents.map(function (eventName) {\n    return addListener(eventName, function (payload) {\n      if (eventName === 'refocus') {\n        _emit(eventName, payload);\n\n        return;\n      }\n\n      var state = payload.state,\n          lastState = payload.lastState,\n          action = payload.action;\n      var lastRoutes = lastState && lastState.routes;\n      var routes = state && state.routes;\n      var focusKey = routes && routes[state.index].key;\n      var isChildFocused = focusKey === key;\n      var lastRoute = lastRoutes && lastRoutes.find(function (route) {\n        return route.key === key;\n      });\n      var newRoute = routes && routes.find(function (route) {\n        return route.key === key;\n      });\n      var childPayload = {\n        context: key + \":\" + action.type + \"_\" + (payload.context || 'Root'),\n        state: newRoute,\n        lastState: lastRoute,\n        action: action,\n        type: eventName\n      };\n      var isTransitioning = !!state && state.isTransitioning;\n      var previouslylastFocusEvent = lastFocusEvent;\n\n      if (lastFocusEvent === 'didBlur') {\n        if (eventName === 'willFocus' && isChildFocused) {\n          _emit(lastFocusEvent = 'willFocus', childPayload);\n        } else if (eventName === 'action' && isChildFocused) {\n          _emit(lastFocusEvent = 'willFocus', childPayload);\n        }\n      }\n\n      if (lastFocusEvent === 'willFocus') {\n        if (eventName === 'didFocus' && isChildFocused && !isTransitioning) {\n          _emit(lastFocusEvent = 'didFocus', childPayload);\n        } else if (eventName === 'action' && isChildFocused && !isTransitioning) {\n          _emit(lastFocusEvent = 'didFocus', childPayload);\n        }\n      }\n\n      if (lastFocusEvent === 'didFocus') {\n        if (!isChildFocused) {\n          _emit(lastFocusEvent = 'willBlur', childPayload);\n        } else if (eventName === 'willBlur') {\n          _emit(lastFocusEvent = 'willBlur', childPayload);\n        } else if (eventName === 'action' && previouslylastFocusEvent === 'didFocus') {\n          _emit('action', childPayload);\n        }\n      }\n\n      if (lastFocusEvent === 'willBlur') {\n        if (eventName === 'action' && !isChildFocused && !isTransitioning) {\n          _emit(lastFocusEvent = 'didBlur', childPayload);\n        } else if (eventName === 'didBlur') {\n          _emit(lastFocusEvent = 'didBlur', childPayload);\n        } else if (eventName === 'action' && isChildFocused && !isTransitioning) {\n          _emit(lastFocusEvent = 'didFocus', childPayload);\n        } else if (eventName === 'action' && isChildFocused && isTransitioning) {\n          _emit(lastFocusEvent = 'willFocus', childPayload);\n        }\n      }\n\n      if (lastFocusEvent === 'didBlur' && !newRoute) {\n        removeAll();\n      }\n    });\n  });\n  return {\n    addListener: function addListener(eventName, eventHandler) {\n      var subscribers = getChildSubscribers(eventName);\n\n      if (!subscribers) {\n        throw new Error(\"Invalid event name \\\"\" + eventName + \"\\\"\");\n      }\n\n      subscribers.add(eventHandler);\n\n      var remove = function remove() {\n        subscribers.delete(eventHandler);\n      };\n\n      return {\n        remove: remove\n      };\n    },\n    emit: function emit(eventName, payload) {\n      if (eventName !== 'refocus') {\n        console.error(\"navigation.emit only supports the 'refocus' event currently.\");\n        return;\n      }\n\n      _emit(eventName, payload);\n    }\n  };\n}","map":{"version":3,"sources":["getChildEventSubscriber.js"],"names":["initialLastFocusEvent","actionSubscribers","willFocusSubscribers","didFocusSubscribers","willBlurSubscribers","didBlurSubscribers","refocusSubscribers","removeAll","set","upstreamSubscribers","subs","getChildSubscribers","emit","payloadWithType","type","subscribers","lastFocusEvent","upstreamEvents","addListener","eventName","state","lastState","action","payload","lastRoutes","routes","focusKey","isChildFocused","lastRoute","route","newRoute","childPayload","context","key","isTransitioning","previouslylastFocusEvent","remove","console"],"mappings":"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","sourcesContent":["/*\n * This is used to extract one children's worth of events from a stream of navigation action events\n *\n * Based on the 'action' events that get fired for this navigation state, this utility will fire\n * focus and blur events for this child\n */\nexport default function getChildEventSubscriber(\n  addListener,\n  key,\n  initialLastFocusEvent = 'didBlur'\n) {\n  const actionSubscribers = new Set();\n  const willFocusSubscribers = new Set();\n  const didFocusSubscribers = new Set();\n  const willBlurSubscribers = new Set();\n  const didBlurSubscribers = new Set();\n  const refocusSubscribers = new Set();\n\n  const removeAll = () => {\n    [\n      actionSubscribers,\n      willFocusSubscribers,\n      didFocusSubscribers,\n      willBlurSubscribers,\n      didBlurSubscribers,\n      refocusSubscribers,\n    ].forEach(set => set.clear());\n\n    upstreamSubscribers.forEach(subs => subs && subs.remove());\n  };\n\n  const getChildSubscribers = evtName => {\n    switch (evtName) {\n      case 'action':\n        return actionSubscribers;\n      case 'willFocus':\n        return willFocusSubscribers;\n      case 'didFocus':\n        return didFocusSubscribers;\n      case 'willBlur':\n        return willBlurSubscribers;\n      case 'didBlur':\n        return didBlurSubscribers;\n      case 'refocus':\n        return refocusSubscribers;\n      default:\n        return null;\n    }\n  };\n\n  const emit = (type, payload) => {\n    const payloadWithType = { ...payload, type };\n    const subscribers = getChildSubscribers(type);\n    subscribers &&\n      subscribers.forEach(subs => {\n        subs(payloadWithType);\n      });\n  };\n\n  // lastFocusEvent keeps track of focus state for one route. First we assume\n  // we are blurred. If we are focused on initialization, the first 'action'\n  // event will cause onFocus+willFocus events because we had previously been\n  // considered blurred\n  let lastFocusEvent = initialLastFocusEvent;\n\n  const upstreamEvents = [\n    'willFocus',\n    'didFocus',\n    'willBlur',\n    'didBlur',\n    'refocus',\n    'action',\n  ];\n\n  const upstreamSubscribers = upstreamEvents.map(eventName =>\n    addListener(eventName, payload => {\n      if (eventName === 'refocus') {\n        emit(eventName, payload);\n        return;\n      }\n\n      const { state, lastState, action } = payload;\n      const lastRoutes = lastState && lastState.routes;\n      const routes = state && state.routes;\n\n      // const lastFocusKey =\n      //   lastState && lastState.routes && lastState.routes[lastState.index].key;\n      const focusKey = routes && routes[state.index].key;\n\n      const isChildFocused = focusKey === key;\n      const lastRoute =\n        lastRoutes && lastRoutes.find(route => route.key === key);\n      const newRoute = routes && routes.find(route => route.key === key);\n      const childPayload = {\n        context: `${key}:${action.type}_${payload.context || 'Root'}`,\n        state: newRoute,\n        lastState: lastRoute,\n        action,\n        type: eventName,\n      };\n      const isTransitioning = !!state && state.isTransitioning;\n\n      const previouslylastFocusEvent = lastFocusEvent;\n\n      if (lastFocusEvent === 'didBlur') {\n        // The child is currently blurred. Look for willFocus conditions\n        if (eventName === 'willFocus' && isChildFocused) {\n          emit((lastFocusEvent = 'willFocus'), childPayload);\n        } else if (eventName === 'action' && isChildFocused) {\n          emit((lastFocusEvent = 'willFocus'), childPayload);\n        }\n      }\n      if (lastFocusEvent === 'willFocus') {\n        // We are currently mid-focus. Look for didFocus conditions.\n        // If state.isTransitioning is false, this child event happens immediately after willFocus\n        if (eventName === 'didFocus' && isChildFocused && !isTransitioning) {\n          emit((lastFocusEvent = 'didFocus'), childPayload);\n        } else if (\n          eventName === 'action' &&\n          isChildFocused &&\n          !isTransitioning\n        ) {\n          emit((lastFocusEvent = 'didFocus'), childPayload);\n        }\n      }\n\n      if (lastFocusEvent === 'didFocus') {\n        // The child is currently focused. Look for blurring events\n        if (!isChildFocused) {\n          // The child is no longer focused within this navigation state\n          emit((lastFocusEvent = 'willBlur'), childPayload);\n        } else if (eventName === 'willBlur') {\n          // The parent is getting a willBlur event\n          emit((lastFocusEvent = 'willBlur'), childPayload);\n        } else if (\n          eventName === 'action' &&\n          previouslylastFocusEvent === 'didFocus'\n        ) {\n          // While focused, pass action events to children for grandchildren focus\n          emit('action', childPayload);\n        }\n      }\n\n      if (lastFocusEvent === 'willBlur') {\n        // The child is mid-blur. Wait for transition to end\n        if (eventName === 'action' && !isChildFocused && !isTransitioning) {\n          // The child is done blurring because transitioning is over, or isTransitioning\n          // never began and didBlur fires immediately after willBlur\n          emit((lastFocusEvent = 'didBlur'), childPayload);\n        } else if (eventName === 'didBlur') {\n          // Pass through the parent didBlur event if it happens\n          emit((lastFocusEvent = 'didBlur'), childPayload);\n        } else if (\n          eventName === 'action' &&\n          isChildFocused &&\n          !isTransitioning\n        ) {\n          emit((lastFocusEvent = 'didFocus'), childPayload);\n        } else if (\n          eventName === 'action' &&\n          isChildFocused &&\n          isTransitioning\n        ) {\n          emit((lastFocusEvent = 'willFocus'), childPayload);\n        }\n      }\n\n      if (lastFocusEvent === 'didBlur' && !newRoute) {\n        removeAll();\n      }\n    })\n  );\n\n  return {\n    addListener(eventName, eventHandler) {\n      const subscribers = getChildSubscribers(eventName);\n      if (!subscribers) {\n        throw new Error(`Invalid event name \"${eventName}\"`);\n      }\n      subscribers.add(eventHandler);\n      const remove = () => {\n        subscribers.delete(eventHandler);\n      };\n      return { remove };\n    },\n    emit(eventName, payload) {\n      if (eventName !== 'refocus') {\n        console.error(\n          `navigation.emit only supports the 'refocus' event currently.`\n        );\n        return;\n      }\n      emit(eventName, payload);\n    },\n  };\n}\n"]},"metadata":{},"sourceType":"module"}