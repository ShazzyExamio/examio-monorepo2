{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _extends from \"@babel/runtime/helpers/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nvar _jsxFileName = \"/Users/satya/Workspace/Callstack/react-navigation-stack/src/views/StackView/StackViewLayout.tsx\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(source, true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(source).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nimport * as React from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport View from \"react-native-web/dist/exports/View\";\nimport I18nManager from \"react-native-web/dist/exports/I18nManager\";\nimport Easing from \"react-native-web/dist/exports/Easing\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport { SceneView, StackActions, NavigationActions, NavigationProvider, ThemeContext, withOrientation } from 'react-navigation';\nimport { ScreenContainer } from 'react-native-screens';\nimport { PanGestureHandler, State as GestureState } from 'react-native-gesture-handler';\nimport Card from \"./StackViewCard\";\nimport Header from \"../Header/Header\";\nimport TransitionConfigs from \"./StackViewTransitionConfigs\";\nimport HeaderStyleInterpolator from \"../Header/HeaderStyleInterpolator\";\nimport StackGestureContext from \"../../utils/StackGestureContext\";\nimport clamp from \"../../utils/clamp\";\nimport { supportsImprovedSpringAnimation } from \"../../utils/ReactNativeFeatures\";\nvar IPHONE_XS_HEIGHT = 812;\nvar IPHONE_XR_HEIGHT = 896;\n\nvar _Dimensions$get = Dimensions.get('window'),\n    WINDOW_WIDTH = _Dimensions$get.width,\n    WINDOW_HEIGHT = _Dimensions$get.height;\n\nvar IS_IPHONE_X = Platform.OS === 'ios' && !Platform.isPad && !Platform.isTVOS && (WINDOW_HEIGHT === IPHONE_XS_HEIGHT || WINDOW_WIDTH === IPHONE_XS_HEIGHT || WINDOW_HEIGHT === IPHONE_XR_HEIGHT || WINDOW_WIDTH === IPHONE_XR_HEIGHT);\nvar EaseInOut = Easing.inOut(Easing.ease);\nvar HEADER_LAYOUT_PRESET = ['center', 'left'];\nvar HEADER_TRANSITION_PRESET = ['fade-in-place', 'uikit'];\nvar HEADER_BACKGROUND_TRANSITION_PRESET = ['toggle', 'fade', 'translate'];\nvar ANIMATION_DURATION = 500;\nvar POSITION_THRESHOLD = 1 / 2;\nvar GESTURE_RESPONSE_DISTANCE_HORIZONTAL = 50;\nvar GESTURE_RESPONSE_DISTANCE_VERTICAL = 135;\nvar USE_NATIVE_DRIVER = Platform.OS === 'android' || Platform.OS === 'ios';\n\nvar getDefaultHeaderHeight = function getDefaultHeaderHeight(isLandscape) {\n  if (Platform.OS === 'ios') {\n    if (isLandscape && !Platform.isPad) {\n      return 32;\n    } else if (IS_IPHONE_X) {\n      return 88;\n    } else {\n      return 64;\n    }\n  } else if (Platform.OS === 'android') {\n    return 56;\n  } else {\n    return 64;\n  }\n};\n\nvar StackViewLayout = function (_React$Component) {\n  _inherits(StackViewLayout, _React$Component);\n\n  function StackViewLayout(props) {\n    var _this;\n\n    _classCallCheck(this, StackViewLayout);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(StackViewLayout).call(this, props));\n    _this.immediateIndex = null;\n\n    _this.handleFloatingHeaderLayout = function (e) {\n      var height = e.nativeEvent.layout.height;\n\n      if (height !== _this.state.floatingHeaderHeight) {\n        _this.setState({\n          floatingHeaderHeight: height\n        });\n      }\n    };\n\n    _this.handlePanGestureStateChange = function (_ref) {\n      var nativeEvent = _ref.nativeEvent;\n\n      if (nativeEvent.oldState === GestureState.ACTIVE) {\n        if (_this.positionSwitch.__getValue() === 1) {\n          return;\n        }\n\n        if (_this.isMotionVertical()) {\n          _this.handleReleaseVertical(nativeEvent);\n        } else {\n          _this.handleReleaseHorizontal(nativeEvent);\n        }\n      } else if (nativeEvent.state === GestureState.ACTIVE) {\n        _this.props.onGestureBegin && _this.props.onGestureBegin();\n\n        _this.positionSwitch.setValue(0);\n      }\n    };\n\n    _this.renderCard = function (scene) {\n      var _this$props = _this.props,\n          transitionProps = _this$props.transitionProps,\n          cardShadowEnabled = _this$props.cardShadowEnabled,\n          cardOverlayEnabled = _this$props.cardOverlayEnabled,\n          transparentCard = _this$props.transparentCard,\n          cardStyle = _this$props.cardStyle;\n      var _ref2 = _this.transitionConfig,\n          screenInterpolator = _ref2.screenInterpolator;\n      var style = screenInterpolator && screenInterpolator(_objectSpread({}, transitionProps, {\n        shadowEnabled: cardShadowEnabled,\n        cardOverlayEnabled: cardOverlayEnabled,\n        position: _this.position,\n        scene: scene\n      }));\n      var options = scene.descriptor.options;\n      var hasHeader = options.header !== null && options.headerShown !== false;\n\n      var headerMode = _this.getHeaderMode();\n\n      var floatingContainerStyle = StyleSheet.absoluteFill;\n\n      if (hasHeader && headerMode === 'float' && !options.headerTransparent) {\n        floatingContainerStyle = _objectSpread({}, Platform.select({\n          web: {},\n          default: StyleSheet.absoluteFillObject\n        }), {\n          paddingTop: _this.state.floatingHeaderHeight\n        });\n      }\n\n      return React.createElement(Card, _extends({}, transitionProps, {\n        key: \"card_\" + scene.key,\n        position: _this.position,\n        realPosition: transitionProps.position,\n        animatedStyle: style,\n        transparent: transparentCard,\n        style: [floatingContainerStyle, cardStyle],\n        scene: scene,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 975\n        }\n      }), _this.renderInnerScene(scene));\n    };\n\n    _this.panGestureRef = React.createRef();\n    _this.gestureX = new Animated.Value(0);\n    _this.gestureY = new Animated.Value(0);\n    _this.positionSwitch = new Animated.Value(1);\n\n    if (Animated.subtract) {\n      _this.gestureSwitch = Animated.subtract(1, _this.positionSwitch);\n    } else {\n      _this.gestureSwitch = Animated.add(1, Animated.multiply(-1, _this.positionSwitch));\n    }\n\n    _this.gestureEvent = Animated.event([{\n      nativeEvent: {\n        translationX: _this.gestureX,\n        translationY: _this.gestureY\n      }\n    }], {\n      useNativeDriver: USE_NATIVE_DRIVER\n    });\n    _this.state = {\n      floatingHeaderHeight: getDefaultHeaderHeight(props.isLandscape)\n    };\n    return _this;\n  }\n\n  _createClass(StackViewLayout, [{\n    key: \"renderHeader\",\n    value: function renderHeader(scene, headerMode) {\n      var options = scene.descriptor.options;\n      var header = options.header,\n          headerShown = options.headerShown;\n\n      if (__DEV__ && typeof header === 'string') {\n        throw new Error(\"Invalid header value: \\\"\" + header + \"\\\". The header option must be a valid React component or null, not a string.\");\n      }\n\n      if ((header === null || headerShown === false) && headerMode === 'screen') {\n        return null;\n      }\n\n      if (React.isValidElement(header)) {\n        return header;\n      }\n\n      var renderHeader = header || function (props) {\n        return React.createElement(Header, _extends({}, props, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 217\n          }\n        }));\n      };\n\n      var _ref3 = this.transitionConfig,\n          headerLeftInterpolator = _ref3.headerLeftInterpolator,\n          headerTitleInterpolator = _ref3.headerTitleInterpolator,\n          headerRightInterpolator = _ref3.headerRightInterpolator,\n          headerBackgroundInterpolator = _ref3.headerBackgroundInterpolator;\n      var backgroundTransitionPresetInterpolator = this.getHeaderBackgroundTransitionPreset();\n\n      if (backgroundTransitionPresetInterpolator) {\n        headerBackgroundInterpolator = backgroundTransitionPresetInterpolator;\n      }\n\n      var _this$props2 = this.props,\n          transitionProps = _this$props2.transitionProps,\n          passProps = _objectWithoutProperties(_this$props2, [\"transitionProps\"]);\n\n      return React.createElement(NavigationProvider, {\n        value: scene.descriptor.navigation,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 234\n        }\n      }, renderHeader(_objectSpread({}, passProps, {}, transitionProps, {\n        position: this.position,\n        scene: scene,\n        mode: headerMode,\n        transitionPreset: this.getHeaderTransitionPreset(),\n        layoutPreset: this.getHeaderLayoutPreset(),\n        backTitleVisible: this.getHeaderBackTitleVisible(),\n        leftInterpolator: headerLeftInterpolator,\n        titleInterpolator: headerTitleInterpolator,\n        rightInterpolator: headerRightInterpolator,\n        backgroundInterpolator: headerBackgroundInterpolator\n      })));\n    }\n  }, {\n    key: \"reset\",\n    value: function reset(resetToIndex, duration) {\n      if (Platform.OS === 'ios' && supportsImprovedSpringAnimation()) {\n        Animated.spring(this.props.transitionProps.position, {\n          toValue: resetToIndex,\n          stiffness: 6000,\n          damping: 100,\n          mass: 3,\n          overshootClamping: true,\n          restDisplacementThreshold: 0.01,\n          restSpeedThreshold: 0.01,\n          useNativeDriver: USE_NATIVE_DRIVER\n        }).start();\n      } else {\n        Animated.timing(this.props.transitionProps.position, {\n          toValue: resetToIndex,\n          duration: duration,\n          easing: EaseInOut,\n          useNativeDriver: USE_NATIVE_DRIVER\n        }).start();\n      }\n    }\n  }, {\n    key: \"goBack\",\n    value: function goBack(backFromIndex, duration) {\n      var _this2 = this;\n\n      var _this$props$transitio = this.props.transitionProps,\n          navigation = _this$props$transitio.navigation,\n          position = _this$props$transitio.position,\n          scenes = _this$props$transitio.scenes;\n      var toValue = Math.max(backFromIndex - 1, 0);\n      this.immediateIndex = toValue;\n\n      var onCompleteAnimation = function onCompleteAnimation() {\n        _this2.immediateIndex = null;\n        var backFromScene = scenes.find(function (s) {\n          return s.index === toValue + 1;\n        });\n\n        if (backFromScene) {\n          navigation.dispatch(NavigationActions.back({\n            key: backFromScene.route.key,\n            immediate: true\n          }));\n          navigation.dispatch(StackActions.completeTransition());\n        }\n      };\n\n      if (Platform.OS === 'ios' && supportsImprovedSpringAnimation()) {\n        Animated.spring(position, {\n          toValue: toValue,\n          stiffness: 7000,\n          damping: 300,\n          mass: 3,\n          overshootClamping: true,\n          restDisplacementThreshold: 0.01,\n          restSpeedThreshold: 0.01,\n          useNativeDriver: USE_NATIVE_DRIVER\n        }).start(onCompleteAnimation);\n      } else {\n        Animated.timing(position, {\n          toValue: toValue,\n          duration: duration,\n          easing: EaseInOut,\n          useNativeDriver: USE_NATIVE_DRIVER\n        }).start(onCompleteAnimation);\n      }\n    }\n  }, {\n    key: \"prepareAnimated\",\n    value: function prepareAnimated() {\n      if (this.props === this.prevProps) {\n        return;\n      }\n\n      this.prevProps = this.props;\n      this.prepareGesture();\n      this.preparePosition();\n      this.prepareTransitionConfig();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      this.prepareAnimated();\n      var transitionProps = this.props.transitionProps;\n      var index = transitionProps.navigation.state.index,\n          scenes = transitionProps.scenes;\n      var headerMode = this.getHeaderMode();\n      var floatingHeader = null;\n\n      if (headerMode === 'float') {\n        var scene = transitionProps.scene;\n        floatingHeader = React.createElement(View, {\n          style: styles.floatingHeader,\n          pointerEvents: \"box-none\",\n          onLayout: this.handleFloatingHeaderLayout,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 356\n          }\n        }, this.renderHeader(scene, headerMode));\n      }\n\n      return React.createElement(PanGestureHandler, _extends({}, this.gestureActivationCriteria(), {\n        ref: this.panGestureRef,\n        onGestureEvent: this.gestureEvent,\n        onHandlerStateChange: this.handlePanGestureStateChange,\n        enabled: index > 0 && this.isGestureEnabled(),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 367\n        }\n      }), React.createElement(Animated.View, {\n        style: [styles.container, this.context === 'light' ? this.transitionConfig.containerStyleLight : this.transitionConfig.containerStyleDark, this.transitionConfig.containerStyle],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 374\n        }\n      }, React.createElement(StackGestureContext.Provider, {\n        value: this.panGestureRef,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 383\n        }\n      }, React.createElement(ScreenContainer, {\n        style: styles.scenes,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 384\n        }\n      }, scenes.map(this.renderCard)), floatingHeader)));\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      var prevState = prevProps.transitionProps.navigation.state;\n      var state = this.props.transitionProps.navigation.state;\n\n      if (prevState.index !== state.index) {\n        this.maybeCancelGesture();\n      }\n    }\n  }, {\n    key: \"getGestureResponseDistance\",\n    value: function getGestureResponseDistance() {\n      var scene = this.props.transitionProps.scene;\n      var options = scene.descriptor.options;\n      var _options$gestureRespo = options.gestureResponseDistance,\n          userGestureResponseDistance = _options$gestureRespo === void 0 ? {} : _options$gestureRespo;\n      return this.isModal() ? userGestureResponseDistance.vertical || GESTURE_RESPONSE_DISTANCE_VERTICAL : userGestureResponseDistance.horizontal || GESTURE_RESPONSE_DISTANCE_HORIZONTAL;\n    }\n  }, {\n    key: \"gestureActivationCriteria\",\n    value: function gestureActivationCriteria() {\n      var layout = this.props.transitionProps.layout;\n      var gestureResponseDistance = this.getGestureResponseDistance();\n      var isMotionInverted = this.isMotionInverted();\n\n      if (this.isMotionVertical()) {\n        var height = layout.height.__getValue();\n\n        return {\n          maxDeltaX: 15,\n          minOffsetY: isMotionInverted ? -5 : 5,\n          hitSlop: isMotionInverted ? {\n            top: -height + gestureResponseDistance\n          } : {\n            bottom: -height + gestureResponseDistance\n          }\n        };\n      } else {\n        var width = layout.width.__getValue();\n\n        var hitSlop = -width + gestureResponseDistance;\n        return {\n          minOffsetX: isMotionInverted ? -5 : 5,\n          maxDeltaY: 20,\n          hitSlop: isMotionInverted ? {\n            left: hitSlop\n          } : {\n            right: hitSlop\n          }\n        };\n      }\n    }\n  }, {\n    key: \"isGestureEnabled\",\n    value: function isGestureEnabled() {\n      var gesturesEnabled = this.props.transitionProps.scene.descriptor.options.gesturesEnabled;\n      return typeof gesturesEnabled === 'boolean' ? gesturesEnabled : Platform.OS === 'ios';\n    }\n  }, {\n    key: \"isMotionVertical\",\n    value: function isMotionVertical() {\n      return this.isModal();\n    }\n  }, {\n    key: \"isModal\",\n    value: function isModal() {\n      return this.props.mode === 'modal';\n    }\n  }, {\n    key: \"isMotionInverted\",\n    value: function isMotionInverted() {\n      var scene = this.props.transitionProps.scene;\n      var options = scene.descriptor.options;\n      var gestureDirection = options.gestureDirection;\n\n      if (this.isModal()) {\n        return gestureDirection === 'inverted';\n      } else {\n        return typeof gestureDirection === 'string' ? gestureDirection === 'inverted' : I18nManager.isRTL;\n      }\n    }\n  }, {\n    key: \"computeHorizontalGestureValue\",\n    value: function computeHorizontalGestureValue(_ref4) {\n      var translationX = _ref4.translationX;\n      var _this$props$transitio2 = this.props.transitionProps,\n          navigation = _this$props$transitio2.navigation,\n          layout = _this$props$transitio2.layout;\n      var index = navigation.state.index;\n\n      var distance = layout.width.__getValue();\n\n      var x = this.isMotionInverted() ? -1 * translationX : translationX;\n      var value = index - x / distance;\n      return clamp(index - 1, value, index);\n    }\n  }, {\n    key: \"computeVerticalGestureValue\",\n    value: function computeVerticalGestureValue(_ref5) {\n      var translationY = _ref5.translationY;\n      var _this$props$transitio3 = this.props.transitionProps,\n          navigation = _this$props$transitio3.navigation,\n          layout = _this$props$transitio3.layout;\n      var index = navigation.state.index;\n\n      var distance = layout.height.__getValue();\n\n      var y = this.isMotionInverted() ? -1 * translationY : translationY;\n      var value = index - y / distance;\n      return clamp(index - 1, value, index);\n    }\n  }, {\n    key: \"maybeCancelGesture\",\n    value: function maybeCancelGesture() {\n      this.positionSwitch.setValue(1);\n    }\n  }, {\n    key: \"prepareGesture\",\n    value: function prepareGesture() {\n      if (!this.isGestureEnabled()) {\n        if (this.positionSwitch.__getValue() !== 1) {\n          this.positionSwitch.setValue(1);\n        }\n\n        this.gesturePosition = undefined;\n        return;\n      }\n\n      if (this.props.transitionProps.layout.width.__getValue() === 0 || this.props.transitionProps.layout.height.__getValue() === 0) {\n        return;\n      }\n\n      if (this.isMotionVertical()) {\n        this.prepareGestureVertical();\n      } else {\n        this.prepareGestureHorizontal();\n      }\n    }\n  }, {\n    key: \"prepareGestureHorizontal\",\n    value: function prepareGestureHorizontal() {\n      var index = this.props.transitionProps.navigation.state.index;\n\n      if (this.isMotionInverted()) {\n        this.gesturePosition = Animated.add(index, Animated.divide(this.gestureX, this.props.transitionProps.layout.width)).interpolate({\n          inputRange: [index - 1, index],\n          outputRange: [index - 1, index],\n          extrapolate: 'clamp'\n        });\n      } else {\n        this.gesturePosition = Animated.add(index, Animated.multiply(-1, Animated.divide(this.gestureX, this.props.transitionProps.layout.width))).interpolate({\n          inputRange: [index - 1, index],\n          outputRange: [index - 1, index],\n          extrapolate: 'clamp'\n        });\n      }\n    }\n  }, {\n    key: \"prepareGestureVertical\",\n    value: function prepareGestureVertical() {\n      var index = this.props.transitionProps.navigation.state.index;\n\n      if (this.isMotionInverted()) {\n        this.gesturePosition = Animated.add(index, Animated.divide(this.gestureY, this.props.transitionProps.layout.height)).interpolate({\n          inputRange: [index - 1, index],\n          outputRange: [index - 1, index],\n          extrapolate: 'clamp'\n        });\n      } else {\n        this.gesturePosition = Animated.add(index, Animated.multiply(-1, Animated.divide(this.gestureY, this.props.transitionProps.layout.height))).interpolate({\n          inputRange: [index - 1, index],\n          outputRange: [index - 1, index],\n          extrapolate: 'clamp'\n        });\n      }\n    }\n  }, {\n    key: \"handleReleaseHorizontal\",\n    value: function handleReleaseHorizontal(nativeEvent) {\n      var _this$props$transitio4 = this.props.transitionProps,\n          navigation = _this$props$transitio4.navigation,\n          position = _this$props$transitio4.position,\n          layout = _this$props$transitio4.layout;\n      var index = navigation.state.index;\n      var immediateIndex = this.immediateIndex == null ? index : this.immediateIndex;\n\n      var distance = layout.width.__getValue();\n\n      var movementDirection = this.isMotionInverted() ? -1 : 1;\n      var movedDistance = movementDirection * nativeEvent.translationX;\n      var gestureVelocity = movementDirection * nativeEvent.velocityX;\n      var defaultVelocity = distance / ANIMATION_DURATION;\n      var velocity = Math.max(Math.abs(gestureVelocity), defaultVelocity);\n      var resetDuration = this.isMotionInverted() ? (distance - movedDistance) / velocity : movedDistance / velocity;\n      var goBackDuration = this.isMotionInverted() ? movedDistance / velocity : (distance - movedDistance) / velocity;\n      var value = this.computeHorizontalGestureValue(nativeEvent);\n      position.setValue(value);\n      this.positionSwitch.setValue(1);\n\n      if (gestureVelocity < -50) {\n        this.props.onGestureCanceled && this.props.onGestureCanceled();\n        this.reset(immediateIndex, resetDuration);\n        return;\n      }\n\n      if (gestureVelocity > 50) {\n        this.props.onGestureEnd && this.props.onGestureEnd();\n        this.goBack(immediateIndex, goBackDuration);\n        return;\n      }\n\n      if (value <= index - POSITION_THRESHOLD) {\n        this.props.onGestureEnd && this.props.onGestureEnd();\n        this.goBack(immediateIndex, goBackDuration);\n      } else {\n        this.props.onGestureCanceled && this.props.onGestureCanceled();\n        this.reset(immediateIndex, resetDuration);\n      }\n    }\n  }, {\n    key: \"handleReleaseVertical\",\n    value: function handleReleaseVertical(nativeEvent) {\n      var _this$props$transitio5 = this.props.transitionProps,\n          navigation = _this$props$transitio5.navigation,\n          position = _this$props$transitio5.position,\n          layout = _this$props$transitio5.layout;\n      var index = navigation.state.index;\n      var immediateIndex = this.immediateIndex == null ? index : this.immediateIndex;\n\n      var distance = layout.height.__getValue();\n\n      var isMotionInverted = this.isMotionInverted();\n      var movementDirection = isMotionInverted ? -1 : 1;\n      var movedDistance = movementDirection * nativeEvent.translationY;\n      var gestureVelocity = movementDirection * nativeEvent.velocityY;\n      var defaultVelocity = distance / ANIMATION_DURATION;\n      var velocity = Math.max(Math.abs(gestureVelocity), defaultVelocity);\n      var resetDuration = isMotionInverted ? (distance - movedDistance) / velocity : movedDistance / velocity;\n      var goBackDuration = isMotionInverted ? movedDistance / velocity : (distance - movedDistance) / velocity;\n      var value = this.computeVerticalGestureValue(nativeEvent);\n      position.setValue(value);\n      this.positionSwitch.setValue(1);\n\n      if (gestureVelocity < -50) {\n        this.props.onGestureCanceled && this.props.onGestureCanceled();\n        this.reset(immediateIndex, resetDuration);\n        return;\n      }\n\n      if (gestureVelocity > 50) {\n        this.props.onGestureEnd && this.props.onGestureEnd();\n        this.goBack(immediateIndex, goBackDuration);\n        return;\n      }\n\n      if (value <= index - POSITION_THRESHOLD) {\n        this.props.onGestureEnd && this.props.onGestureEnd();\n        this.goBack(immediateIndex, goBackDuration);\n      } else {\n        this.props.onGestureCanceled && this.props.onGestureCanceled();\n        this.reset(immediateIndex, resetDuration);\n      }\n    }\n  }, {\n    key: \"getHeaderMode\",\n    value: function getHeaderMode() {\n      if (this.props.headerMode) {\n        return this.props.headerMode;\n      }\n\n      if (Platform.OS === 'android' || this.props.mode === 'modal') {\n        return 'screen';\n      }\n\n      return 'float';\n    }\n  }, {\n    key: \"getHeaderBackgroundTransitionPreset\",\n    value: function getHeaderBackgroundTransitionPreset() {\n      var headerBackgroundTransitionPreset = this.props.headerBackgroundTransitionPreset;\n\n      if (headerBackgroundTransitionPreset) {\n        if (HEADER_BACKGROUND_TRANSITION_PRESET.includes(headerBackgroundTransitionPreset)) {\n          if (headerBackgroundTransitionPreset === 'fade') {\n            return HeaderStyleInterpolator.forBackgroundWithFade;\n          } else if (headerBackgroundTransitionPreset === 'translate') {\n            return HeaderStyleInterpolator.forBackgroundWithTranslation;\n          } else if (headerBackgroundTransitionPreset === 'toggle') {\n            return HeaderStyleInterpolator.forBackgroundWithInactiveHidden;\n          }\n        } else if (__DEV__) {\n          console.error(\"Invalid configuration applied for headerBackgroundTransitionPreset - expected one of \" + HEADER_BACKGROUND_TRANSITION_PRESET.join(', ') + \" but received \" + JSON.stringify(headerBackgroundTransitionPreset));\n        }\n      }\n\n      return null;\n    }\n  }, {\n    key: \"getHeaderLayoutPreset\",\n    value: function getHeaderLayoutPreset() {\n      var headerLayoutPreset = this.props.headerLayoutPreset;\n\n      if (headerLayoutPreset) {\n        if (__DEV__) {\n          if (this.getHeaderTransitionPreset() === 'uikit' && headerLayoutPreset === 'left' && Platform.OS === 'ios') {\n            console.warn(\"headerTransitionPreset with the value 'uikit' is incompatible with headerLayoutPreset 'left'\");\n          }\n        }\n\n        if (HEADER_LAYOUT_PRESET.includes(headerLayoutPreset)) {\n          return headerLayoutPreset;\n        }\n\n        if (__DEV__) {\n          console.error(\"Invalid configuration applied for headerLayoutPreset - expected one of \" + HEADER_LAYOUT_PRESET.join(', ') + \" but received \" + JSON.stringify(headerLayoutPreset));\n        }\n      }\n\n      if (Platform.OS !== 'ios') {\n        return 'left';\n      } else {\n        return 'center';\n      }\n    }\n  }, {\n    key: \"getHeaderTransitionPreset\",\n    value: function getHeaderTransitionPreset() {\n      if (Platform.OS !== 'ios' || this.getHeaderMode() === 'screen') {\n        return 'fade-in-place';\n      }\n\n      var headerTransitionPreset = this.props.headerTransitionPreset;\n\n      if (headerTransitionPreset) {\n        if (HEADER_TRANSITION_PRESET.includes(headerTransitionPreset)) {\n          return headerTransitionPreset;\n        }\n\n        if (__DEV__) {\n          console.error(\"Invalid configuration applied for headerTransitionPreset - expected one of \" + HEADER_TRANSITION_PRESET.join(', ') + \" but received \" + JSON.stringify(headerTransitionPreset));\n        }\n      }\n\n      return 'fade-in-place';\n    }\n  }, {\n    key: \"getHeaderBackTitleVisible\",\n    value: function getHeaderBackTitleVisible() {\n      var headerBackTitleVisible = this.props.headerBackTitleVisible;\n      var layoutPreset = this.getHeaderLayoutPreset();\n      var enabledByDefault = !(layoutPreset === 'left' || Platform.OS !== 'ios');\n      return typeof headerBackTitleVisible === 'boolean' ? headerBackTitleVisible : enabledByDefault;\n    }\n  }, {\n    key: \"renderInnerScene\",\n    value: function renderInnerScene(scene) {\n      var _scene$descriptor = scene.descriptor,\n          navigation = _scene$descriptor.navigation,\n          getComponent = _scene$descriptor.getComponent;\n      var SceneComponent = getComponent();\n      var screenProps = this.props.screenProps;\n      var headerMode = this.getHeaderMode();\n\n      if (headerMode === 'screen') {\n        return React.createElement(View, {\n          style: styles.container,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 887\n          }\n        }, React.createElement(View, {\n          style: styles.scenes,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 888\n          }\n        }, React.createElement(SceneView, {\n          screenProps: screenProps,\n          navigation: navigation,\n          component: SceneComponent,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 889\n          }\n        })), this.renderHeader(scene, headerMode));\n      }\n\n      return React.createElement(SceneView, {\n        screenProps: screenProps,\n        navigation: navigation,\n        component: SceneComponent,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 900\n        }\n      });\n    }\n  }, {\n    key: \"prepareTransitionConfig\",\n    value: function prepareTransitionConfig() {\n      this.transitionConfig = TransitionConfigs.getTransitionConfig(this.props.transitionConfig, _objectSpread({}, this.props.transitionProps, {\n        position: this.position\n      }), this.props.lastTransitionProps, this.isModal());\n    }\n  }, {\n    key: \"preparePosition\",\n    value: function preparePosition() {\n      if (this.gesturePosition) {\n        this.position = Animated.add(Animated.multiply(this.props.transitionProps.position, this.positionSwitch), Animated.multiply(this.gesturePosition, this.gestureSwitch));\n      } else {\n        this.position = this.props.transitionProps.position;\n      }\n    }\n  }]);\n\n  return StackViewLayout;\n}(React.Component);\n\nStackViewLayout.contextType = ThemeContext;\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    flexDirection: 'column-reverse',\n    overflow: 'hidden'\n  },\n  scenes: {\n    flex: 1\n  },\n  floatingHeader: {\n    position: Platform.select({\n      default: 'absolute',\n      web: 'fixed'\n    }),\n    left: 0,\n    top: 0,\n    right: 0\n  }\n});\nexport default withOrientation(StackViewLayout);","map":{"version":3,"sources":["StackViewLayout.tsx"],"names":["State","IPHONE_XS_HEIGHT","IPHONE_XR_HEIGHT","width","WINDOW_WIDTH","height","WINDOW_HEIGHT","Dimensions","IS_IPHONE_X","Platform","EaseInOut","Easing","HEADER_LAYOUT_PRESET","HEADER_TRANSITION_PRESET","HEADER_BACKGROUND_TRANSITION_PRESET","ANIMATION_DURATION","POSITION_THRESHOLD","GESTURE_RESPONSE_DISTANCE_HORIZONTAL","GESTURE_RESPONSE_DISTANCE_VERTICAL","USE_NATIVE_DRIVER","getDefaultHeaderHeight","isLandscape","StackViewLayout","React","Component","contextType","ThemeContext","immediateIndex","Animated","nativeEvent","translationX","translationY","useNativeDriver","floatingHeaderHeight","props","scene","headerMode","options","header","headerShown","__DEV__","renderHeader","headerLeftInterpolator","headerTitleInterpolator","headerRightInterpolator","headerBackgroundInterpolator","backgroundTransitionPresetInterpolator","transitionProps","passProps","position","mode","transitionPreset","layoutPreset","backTitleVisible","leftInterpolator","titleInterpolator","rightInterpolator","backgroundInterpolator","resetToIndex","duration","supportsImprovedSpringAnimation","toValue","stiffness","damping","mass","overshootClamping","restDisplacementThreshold","restSpeedThreshold","easing","backFromIndex","navigation","scenes","Math","onCompleteAnimation","backFromScene","s","NavigationActions","key","immediate","StackActions","e","index","floatingHeader","styles","prevProps","prevState","state","userGestureResponseDistance","layout","gestureResponseDistance","isMotionInverted","maxDeltaX","minOffsetY","hitSlop","top","bottom","minOffsetX","maxDeltaY","left","right","gesturesEnabled","gestureDirection","I18nManager","distance","x","value","clamp","y","GestureState","inputRange","outputRange","extrapolate","movementDirection","movedDistance","gestureVelocity","defaultVelocity","velocity","resetDuration","goBackDuration","headerBackgroundTransitionPreset","HeaderStyleInterpolator","console","JSON","headerLayoutPreset","headerTransitionPreset","headerBackTitleVisible","enabledByDefault","getComponent","SceneComponent","screenProps","TransitionConfigs","cardShadowEnabled","cardOverlayEnabled","transparentCard","cardStyle","screenInterpolator","style","shadowEnabled","hasHeader","floatingContainerStyle","StyleSheet","web","default","paddingTop","container","flex","flexDirection","overflow","withOrientation"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  Animated,\n  StyleSheet,\n  Platform,\n  View,\n  I18nManager,\n  Easing,\n  Dimensions,\n  ViewStyle,\n  LayoutChangeEvent,\n} from 'react-native';\nimport {\n  SceneView,\n  StackActions,\n  NavigationActions,\n  NavigationProvider,\n  ThemeContext,\n  withOrientation,\n} from 'react-navigation';\nimport { ScreenContainer } from 'react-native-screens';\nimport {\n  PanGestureHandler,\n  State as GestureState,\n  PanGestureHandlerGestureEvent,\n  GestureHandlerGestureEventNativeEvent,\n  PanGestureHandlerEventExtra,\n} from 'react-native-gesture-handler';\n\nimport Card from './StackViewCard';\nimport Header from '../Header/Header';\nimport TransitionConfigs from './StackViewTransitionConfigs';\nimport HeaderStyleInterpolator from '../Header/HeaderStyleInterpolator';\nimport StackGestureContext from '../../utils/StackGestureContext';\nimport clamp from '../../utils/clamp';\nimport { supportsImprovedSpringAnimation } from '../../utils/ReactNativeFeatures';\nimport {\n  Scene,\n  HeaderMode,\n  TransitionProps,\n  TransitionConfig,\n  HeaderTransitionConfig,\n  HeaderProps,\n  NavigationStackConfig,\n} from '../../types';\n\ntype Props = NavigationStackConfig & {\n  isLandscape: boolean;\n  transitionProps: TransitionProps;\n  lastTransitionProps?: TransitionProps;\n  transitionConfig?: (\n    transitionProps: TransitionProps,\n    prevTransitionProps?: TransitionProps,\n    isModal?: boolean\n  ) => TransitionConfig;\n  onGestureBegin?: () => void;\n  onGestureEnd?: () => void;\n  onGestureCanceled?: () => void;\n  screenProps?: unknown;\n};\n\ntype State = {\n  floatingHeaderHeight: number;\n};\n\nconst IPHONE_XS_HEIGHT = 812; // iPhone X and XS\nconst IPHONE_XR_HEIGHT = 896; // iPhone XR and XS Max\nconst { width: WINDOW_WIDTH, height: WINDOW_HEIGHT } = Dimensions.get('window');\nconst IS_IPHONE_X =\n  Platform.OS === 'ios' &&\n  // @ts-ignore\n  !Platform.isPad &&\n  // @ts-ignore\n  !Platform.isTVOS &&\n  (WINDOW_HEIGHT === IPHONE_XS_HEIGHT ||\n    WINDOW_WIDTH === IPHONE_XS_HEIGHT ||\n    WINDOW_HEIGHT === IPHONE_XR_HEIGHT ||\n    WINDOW_WIDTH === IPHONE_XR_HEIGHT);\n\nconst EaseInOut = Easing.inOut(Easing.ease);\n\n/**\n * Enumerate possible values for validation\n */\nconst HEADER_LAYOUT_PRESET = ['center', 'left'];\nconst HEADER_TRANSITION_PRESET = ['fade-in-place', 'uikit'];\nconst HEADER_BACKGROUND_TRANSITION_PRESET = ['toggle', 'fade', 'translate'];\n\n/**\n * The max duration of the card animation in milliseconds after released gesture.\n * The actual duration should be always less then that because the rest distance\n * is always less then the full distance of the layout.\n */\nconst ANIMATION_DURATION = 500;\n\n/**\n * The gesture distance threshold to trigger the back behavior. For instance,\n * `1/2` means that moving greater than 1/2 of the width of the screen will\n * trigger a back action\n */\nconst POSITION_THRESHOLD = 1 / 2;\n\n/**\n * The distance of touch start from the edge of the screen where the gesture will be recognized\n */\nconst GESTURE_RESPONSE_DISTANCE_HORIZONTAL = 50;\nconst GESTURE_RESPONSE_DISTANCE_VERTICAL = 135;\n\nconst USE_NATIVE_DRIVER = Platform.OS === 'android' || Platform.OS === 'ios';\n\nconst getDefaultHeaderHeight = (isLandscape: boolean) => {\n  if (Platform.OS === 'ios') {\n    // @ts-ignore\n    if (isLandscape && !Platform.isPad) {\n      return 32;\n    } else if (IS_IPHONE_X) {\n      return 88;\n    } else {\n      return 64;\n    }\n  } else if (Platform.OS === 'android') {\n    return 56;\n  } else {\n    return 64;\n  }\n};\n\nclass StackViewLayout extends React.Component<Props, State> {\n  static contextType = ThemeContext;\n\n  context!: React.ContextType<typeof ThemeContext>;\n\n  private panGestureRef: React.RefObject<PanGestureHandler>;\n  private gestureX: Animated.Value;\n  private gestureY: Animated.Value;\n  private positionSwitch: Animated.Value;\n  private gestureSwitch: Animated.AnimatedInterpolation;\n  private gestureEvent: (...args: any[]) => void;\n  private gesturePosition: Animated.AnimatedInterpolation | undefined;\n\n  // @ts-ignore\n  private position: Animated.Value;\n\n  /**\n   * immediateIndex is used to represent the expected index that we will be on after a\n   * transition. To achieve a smooth animation when swiping back, the action to go back\n   * doesn't actually fire until the transition completes. The immediateIndex is used during\n   * the transition so that gestures can be handled correctly. This is a work-around for\n   * cases when the user quickly swipes back several times.\n   */\n  private immediateIndex: number | null = null;\n  private transitionConfig:\n    | HeaderTransitionConfig & TransitionConfig\n    | undefined;\n  private prevProps: Props | undefined;\n\n  constructor(props: Props) {\n    super(props);\n    this.panGestureRef = React.createRef();\n    this.gestureX = new Animated.Value(0);\n    this.gestureY = new Animated.Value(0);\n    this.positionSwitch = new Animated.Value(1);\n    if (Animated.subtract) {\n      this.gestureSwitch = Animated.subtract(1, this.positionSwitch);\n    } else {\n      this.gestureSwitch = Animated.add(\n        1,\n        Animated.multiply(-1, this.positionSwitch)\n      );\n    }\n    this.gestureEvent = Animated.event(\n      [\n        {\n          nativeEvent: {\n            translationX: this.gestureX,\n            translationY: this.gestureY,\n          },\n        },\n      ],\n      {\n        useNativeDriver: USE_NATIVE_DRIVER,\n      }\n    );\n\n    this.state = {\n      // Used when card's header is null and mode is float to make transition\n      // between screens with headers and those without headers smooth.\n      // This is not a great heuristic here. We don't know synchronously\n      // on mount what the header height is so we have just used the most\n      // common cases here.\n      floatingHeaderHeight: getDefaultHeaderHeight(props.isLandscape),\n    };\n  }\n\n  private renderHeader(scene: Scene, headerMode: HeaderMode) {\n    const { options } = scene.descriptor;\n    const { header, headerShown } = options;\n\n    if (__DEV__ && typeof header === 'string') {\n      throw new Error(\n        `Invalid header value: \"${header}\". The header option must be a valid React component or null, not a string.`\n      );\n    }\n\n    if ((header === null || headerShown === false) && headerMode === 'screen') {\n      return null;\n    }\n\n    // check if it's a react element\n    if (React.isValidElement(header)) {\n      return header;\n    }\n\n    // Handle the case where the header option is a function, and provide the default\n    const renderHeader =\n      // @ts-ignore TS warns about missing props, but they are in default props\n      header || ((props: HeaderProps) => <Header {...props} />);\n\n    let {\n      headerLeftInterpolator,\n      headerTitleInterpolator,\n      headerRightInterpolator,\n      headerBackgroundInterpolator,\n    } = this.transitionConfig as HeaderTransitionConfig;\n\n    const backgroundTransitionPresetInterpolator = this.getHeaderBackgroundTransitionPreset();\n    if (backgroundTransitionPresetInterpolator) {\n      headerBackgroundInterpolator = backgroundTransitionPresetInterpolator;\n    }\n\n    const { transitionProps, ...passProps } = this.props;\n\n    return (\n      <NavigationProvider value={scene.descriptor.navigation}>\n        {renderHeader({\n          ...passProps,\n          ...transitionProps,\n          position: this.position,\n          scene,\n          mode: headerMode,\n          transitionPreset: this.getHeaderTransitionPreset(),\n          layoutPreset: this.getHeaderLayoutPreset(),\n          backTitleVisible: this.getHeaderBackTitleVisible(),\n          leftInterpolator: headerLeftInterpolator,\n          titleInterpolator: headerTitleInterpolator,\n          rightInterpolator: headerRightInterpolator,\n          backgroundInterpolator: headerBackgroundInterpolator,\n        })}\n      </NavigationProvider>\n    );\n  }\n\n  private reset(resetToIndex: number, duration: number) {\n    if (Platform.OS === 'ios' && supportsImprovedSpringAnimation()) {\n      // @ts-ignore\n      Animated.spring(this.props.transitionProps.position, {\n        toValue: resetToIndex,\n        stiffness: 6000,\n        damping: 100,\n        mass: 3,\n        overshootClamping: true,\n        restDisplacementThreshold: 0.01,\n        restSpeedThreshold: 0.01,\n        useNativeDriver: USE_NATIVE_DRIVER,\n      }).start();\n    } else {\n      // @ts-ignore\n      Animated.timing(this.props.transitionProps.position, {\n        toValue: resetToIndex,\n        duration,\n        easing: EaseInOut,\n        useNativeDriver: USE_NATIVE_DRIVER,\n      }).start();\n    }\n  }\n\n  private goBack(backFromIndex: number, duration: number) {\n    const { navigation, position, scenes } = this.props.transitionProps;\n    const toValue = Math.max(backFromIndex - 1, 0);\n\n    // set temporary index for gesture handler to respect until the action is\n    // dispatched at the end of the transition.\n    this.immediateIndex = toValue;\n\n    const onCompleteAnimation = () => {\n      this.immediateIndex = null;\n      const backFromScene = scenes.find(s => s.index === toValue + 1);\n      if (backFromScene) {\n        navigation.dispatch(\n          NavigationActions.back({\n            key: backFromScene.route.key,\n            immediate: true,\n          })\n        );\n        navigation.dispatch(StackActions.completeTransition());\n      }\n    };\n\n    if (Platform.OS === 'ios' && supportsImprovedSpringAnimation()) {\n      // @ts-ignore\n      Animated.spring(position, {\n        toValue,\n        stiffness: 7000,\n        damping: 300,\n        mass: 3,\n        overshootClamping: true,\n        restDisplacementThreshold: 0.01,\n        restSpeedThreshold: 0.01,\n        useNativeDriver: USE_NATIVE_DRIVER,\n      }).start(onCompleteAnimation);\n    } else {\n      // @ts-ignore\n      Animated.timing(position, {\n        toValue,\n        duration,\n        easing: EaseInOut,\n        useNativeDriver: USE_NATIVE_DRIVER,\n      }).start(onCompleteAnimation);\n    }\n  }\n\n  private handleFloatingHeaderLayout = (e: LayoutChangeEvent) => {\n    const { height } = e.nativeEvent.layout;\n    if (height !== this.state.floatingHeaderHeight) {\n      this.setState({ floatingHeaderHeight: height });\n    }\n  };\n\n  private prepareAnimated() {\n    if (this.props === this.prevProps) {\n      return;\n    }\n    this.prevProps = this.props;\n\n    this.prepareGesture();\n    this.preparePosition();\n    this.prepareTransitionConfig();\n  }\n\n  render() {\n    this.prepareAnimated();\n\n    const { transitionProps } = this.props;\n    const {\n      navigation: {\n        state: { index },\n      },\n      scenes,\n    } = transitionProps;\n\n    const headerMode = this.getHeaderMode();\n    let floatingHeader = null;\n    if (headerMode === 'float') {\n      const { scene } = transitionProps;\n      floatingHeader = (\n        <View\n          style={styles.floatingHeader}\n          pointerEvents=\"box-none\"\n          onLayout={this.handleFloatingHeaderLayout}\n        >\n          {this.renderHeader(scene, headerMode)}\n        </View>\n      );\n    }\n\n    return (\n      <PanGestureHandler\n        {...this.gestureActivationCriteria()}\n        ref={this.panGestureRef}\n        onGestureEvent={this.gestureEvent}\n        onHandlerStateChange={this.handlePanGestureStateChange}\n        enabled={index > 0 && this.isGestureEnabled()}\n      >\n        <Animated.View\n          style={[\n            styles.container,\n            this.context === 'light'\n              ? this.transitionConfig!.containerStyleLight\n              : this.transitionConfig!.containerStyleDark,\n            this.transitionConfig!.containerStyle,\n          ]}\n        >\n          <StackGestureContext.Provider value={this.panGestureRef}>\n            <ScreenContainer style={styles.scenes}>\n              {scenes.map(this.renderCard)}\n            </ScreenContainer>\n            {floatingHeader}\n          </StackGestureContext.Provider>\n        </Animated.View>\n      </PanGestureHandler>\n    );\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    const { state: prevState } = prevProps.transitionProps.navigation;\n    const { state } = this.props.transitionProps.navigation;\n    if (prevState.index !== state.index) {\n      this.maybeCancelGesture();\n    }\n  }\n\n  private getGestureResponseDistance() {\n    const { scene } = this.props.transitionProps;\n    const { options } = scene.descriptor;\n    const {\n      gestureResponseDistance: userGestureResponseDistance = {} as {\n        vertical?: number;\n        horizontal?: number;\n      },\n    } = options;\n\n    // Doesn't make sense for a response distance of 0, so this works fine\n    return this.isModal()\n      ? userGestureResponseDistance.vertical ||\n          GESTURE_RESPONSE_DISTANCE_VERTICAL\n      : userGestureResponseDistance.horizontal ||\n          GESTURE_RESPONSE_DISTANCE_HORIZONTAL;\n  }\n\n  private gestureActivationCriteria() {\n    const { layout } = this.props.transitionProps;\n    const gestureResponseDistance = this.getGestureResponseDistance();\n    const isMotionInverted = this.isMotionInverted();\n\n    if (this.isMotionVertical()) {\n      // @ts-ignore\n      const height: number = layout.height.__getValue();\n\n      return {\n        maxDeltaX: 15,\n        minOffsetY: isMotionInverted ? -5 : 5,\n        hitSlop: isMotionInverted\n          ? { top: -height + gestureResponseDistance }\n          : { bottom: -height + gestureResponseDistance },\n      };\n    } else {\n      // @ts-ignore\n      const width: number = layout.width.__getValue();\n      const hitSlop = -width + gestureResponseDistance;\n\n      return {\n        minOffsetX: isMotionInverted ? -5 : 5,\n        maxDeltaY: 20,\n        hitSlop: isMotionInverted ? { left: hitSlop } : { right: hitSlop },\n      };\n    }\n  }\n\n  private isGestureEnabled() {\n    const gesturesEnabled = this.props.transitionProps.scene.descriptor.options\n      .gesturesEnabled;\n    return typeof gesturesEnabled === 'boolean'\n      ? gesturesEnabled\n      : Platform.OS === 'ios';\n  }\n\n  private isMotionVertical() {\n    return this.isModal();\n  }\n\n  private isModal() {\n    return this.props.mode === 'modal';\n  }\n\n  // This only currently applies to the horizontal gesture!\n  private isMotionInverted() {\n    const {\n      transitionProps: { scene },\n    } = this.props;\n    const { options } = scene.descriptor;\n    const { gestureDirection } = options;\n\n    if (this.isModal()) {\n      return gestureDirection === 'inverted';\n    } else {\n      return typeof gestureDirection === 'string'\n        ? gestureDirection === 'inverted'\n        : I18nManager.isRTL;\n    }\n  }\n\n  private computeHorizontalGestureValue({\n    translationX,\n  }: {\n    translationX: number;\n  }) {\n    const {\n      transitionProps: { navigation, layout },\n    } = this.props;\n\n    const { index } = navigation.state;\n\n    // TODO: remove this __getValue!\n    // @ts-ignore\n    const distance: number = layout.width.__getValue();\n\n    const x = this.isMotionInverted() ? -1 * translationX : translationX;\n\n    const value = index - x / distance;\n    return clamp(index - 1, value, index);\n  }\n\n  private computeVerticalGestureValue({\n    translationY,\n  }: {\n    translationY: number;\n  }) {\n    const {\n      transitionProps: { navigation, layout },\n    } = this.props;\n\n    const { index } = navigation.state;\n\n    // TODO: remove this __getValue!\n    // @ts-ignore\n    const distance: number = layout.height.__getValue();\n\n    const y = this.isMotionInverted() ? -1 * translationY : translationY;\n    const value = index - y / distance;\n    return clamp(index - 1, value, index);\n  }\n\n  private handlePanGestureStateChange = ({\n    nativeEvent,\n  }: PanGestureHandlerGestureEvent) => {\n    // @ts-ignore\n    if (nativeEvent.oldState === GestureState.ACTIVE) {\n      // Gesture was cancelled! For example, some navigation state update\n      // arrived while the gesture was active that cancelled it out\n      // @ts-ignore\n      if (this.positionSwitch.__getValue() === 1) {\n        return;\n      }\n\n      if (this.isMotionVertical()) {\n        this.handleReleaseVertical(nativeEvent);\n      } else {\n        this.handleReleaseHorizontal(nativeEvent);\n      }\n    } else if (nativeEvent.state === GestureState.ACTIVE) {\n      this.props.onGestureBegin && this.props.onGestureBegin();\n\n      // Switch to using gesture position\n      this.positionSwitch.setValue(0);\n\n      // By enabling the gesture switch and ignoring the position here we\n      // end up with a quick jump to the initial value and then back to the\n      // gesture. While this isn't ideal, it's preferred over preventing new\n      // gestures during the animation (all gestures should be interruptible)\n      // and we will properly fix it (interruptible and from the correct position)\n      // when we integrate reanimated. If you prefer to prevent gestures during\n      // transitions, then fork this library, comment the positionSwitch value set above,\n      // and uncomment the following two lines.\n      // if (!this.props.transitionProps.position._animation) {\n      //   this.positionSwitch.setValue(0);\n      // }\n    }\n  };\n\n  // note: this will not animated so nicely because the position is unaware\n  // of the gesturePosition, so if we are in the middle of swiping the screen away\n  // and back is programatically fired then we will reset to the initial position\n  // and animate from there\n  private maybeCancelGesture() {\n    this.positionSwitch.setValue(1);\n  }\n\n  private prepareGesture() {\n    if (!this.isGestureEnabled()) {\n      // @ts-ignore\n      if (this.positionSwitch.__getValue() !== 1) {\n        this.positionSwitch.setValue(1);\n      }\n      this.gesturePosition = undefined;\n      return;\n    }\n\n    // We can't run the gesture if width or height layout is unavailable\n    if (\n      // @ts-ignore\n      this.props.transitionProps.layout.width.__getValue() === 0 ||\n      // @ts-ignore\n      this.props.transitionProps.layout.height.__getValue() === 0\n    ) {\n      return;\n    }\n\n    if (this.isMotionVertical()) {\n      this.prepareGestureVertical();\n    } else {\n      this.prepareGestureHorizontal();\n    }\n  }\n\n  private prepareGestureHorizontal() {\n    const { index } = this.props.transitionProps.navigation.state;\n\n    if (this.isMotionInverted()) {\n      this.gesturePosition = Animated.add(\n        index,\n        Animated.divide(this.gestureX, this.props.transitionProps.layout.width)\n      ).interpolate({\n        inputRange: [index - 1, index],\n        outputRange: [index - 1, index],\n        extrapolate: 'clamp',\n      });\n    } else {\n      this.gesturePosition = Animated.add(\n        index,\n        Animated.multiply(\n          -1,\n          Animated.divide(\n            this.gestureX,\n            this.props.transitionProps.layout.width\n          )\n        )\n      ).interpolate({\n        inputRange: [index - 1, index],\n        outputRange: [index - 1, index],\n        extrapolate: 'clamp',\n      });\n    }\n  }\n\n  private prepareGestureVertical() {\n    const { index } = this.props.transitionProps.navigation.state;\n\n    if (this.isMotionInverted()) {\n      this.gesturePosition = Animated.add(\n        index,\n        Animated.divide(this.gestureY, this.props.transitionProps.layout.height)\n      ).interpolate({\n        inputRange: [index - 1, index],\n        outputRange: [index - 1, index],\n        extrapolate: 'clamp',\n      });\n    } else {\n      this.gesturePosition = Animated.add(\n        index,\n        Animated.multiply(\n          -1,\n          Animated.divide(\n            this.gestureY,\n            this.props.transitionProps.layout.height\n          )\n        )\n      ).interpolate({\n        inputRange: [index - 1, index],\n        outputRange: [index - 1, index],\n        extrapolate: 'clamp',\n      });\n    }\n  }\n\n  private handleReleaseHorizontal(\n    nativeEvent: GestureHandlerGestureEventNativeEvent &\n      PanGestureHandlerEventExtra\n  ) {\n    const {\n      transitionProps: { navigation, position, layout },\n    } = this.props;\n    const { index } = navigation.state;\n    const immediateIndex =\n      this.immediateIndex == null ? index : this.immediateIndex;\n\n    // Calculate animate duration according to gesture speed and moved distance\n    // @ts-ignore\n    const distance = layout.width.__getValue();\n    const movementDirection = this.isMotionInverted() ? -1 : 1;\n    const movedDistance = movementDirection * nativeEvent.translationX;\n    const gestureVelocity = movementDirection * nativeEvent.velocityX;\n    const defaultVelocity = distance / ANIMATION_DURATION;\n    const velocity = Math.max(Math.abs(gestureVelocity), defaultVelocity);\n    const resetDuration = this.isMotionInverted()\n      ? (distance - movedDistance) / velocity\n      : movedDistance / velocity;\n    const goBackDuration = this.isMotionInverted()\n      ? movedDistance / velocity\n      : (distance - movedDistance) / velocity;\n\n    // Get the current position value and reset to using the statically driven\n    // (rather than gesture driven) position.\n    const value = this.computeHorizontalGestureValue(nativeEvent);\n    position.setValue(value);\n    this.positionSwitch.setValue(1);\n\n    // If the speed of the gesture release is significant, use that as the indication\n    // of intent\n    if (gestureVelocity < -50) {\n      this.props.onGestureCanceled && this.props.onGestureCanceled();\n      this.reset(immediateIndex, resetDuration);\n      return;\n    }\n    if (gestureVelocity > 50) {\n      this.props.onGestureEnd && this.props.onGestureEnd();\n      this.goBack(immediateIndex, goBackDuration);\n      return;\n    }\n\n    // Then filter based on the distance the screen was moved. Over a third of the way swiped,\n    // and the back will happen.\n    if (value <= index - POSITION_THRESHOLD) {\n      this.props.onGestureEnd && this.props.onGestureEnd();\n      this.goBack(immediateIndex, goBackDuration);\n    } else {\n      this.props.onGestureCanceled && this.props.onGestureCanceled();\n      this.reset(immediateIndex, resetDuration);\n    }\n  }\n\n  private handleReleaseVertical(\n    nativeEvent: GestureHandlerGestureEventNativeEvent &\n      PanGestureHandlerEventExtra\n  ) {\n    const {\n      transitionProps: { navigation, position, layout },\n    } = this.props;\n    const { index } = navigation.state;\n    const immediateIndex =\n      this.immediateIndex == null ? index : this.immediateIndex;\n\n    // Calculate animate duration according to gesture speed and moved distance\n    // @ts-ignore\n    const distance = layout.height.__getValue();\n    const isMotionInverted = this.isMotionInverted();\n    const movementDirection = isMotionInverted ? -1 : 1;\n    const movedDistance = movementDirection * nativeEvent.translationY;\n    const gestureVelocity = movementDirection * nativeEvent.velocityY;\n    const defaultVelocity = distance / ANIMATION_DURATION;\n    const velocity = Math.max(Math.abs(gestureVelocity), defaultVelocity);\n    const resetDuration = isMotionInverted\n      ? (distance - movedDistance) / velocity\n      : movedDistance / velocity;\n    const goBackDuration = isMotionInverted\n      ? movedDistance / velocity\n      : (distance - movedDistance) / velocity;\n\n    const value = this.computeVerticalGestureValue(nativeEvent);\n    position.setValue(value);\n    this.positionSwitch.setValue(1);\n\n    // If the speed of the gesture release is significant, use that as the indication\n    // of intent\n    if (gestureVelocity < -50) {\n      this.props.onGestureCanceled && this.props.onGestureCanceled();\n      this.reset(immediateIndex, resetDuration);\n      return;\n    }\n    if (gestureVelocity > 50) {\n      this.props.onGestureEnd && this.props.onGestureEnd();\n      this.goBack(immediateIndex, goBackDuration);\n      return;\n    }\n\n    // Then filter based on the distance the screen was moved. Over a third of the way swiped,\n    // and the back will happen.\n    if (value <= index - POSITION_THRESHOLD) {\n      this.props.onGestureEnd && this.props.onGestureEnd();\n      this.goBack(immediateIndex, goBackDuration);\n    } else {\n      this.props.onGestureCanceled && this.props.onGestureCanceled();\n      this.reset(immediateIndex, resetDuration);\n    }\n  }\n\n  private getHeaderMode() {\n    if (this.props.headerMode) {\n      return this.props.headerMode;\n    }\n    if (Platform.OS === 'android' || this.props.mode === 'modal') {\n      return 'screen';\n    }\n    // On web, the float header mode will enable body scrolling and stick the header\n    // to the top of the URL bar when it shrinks and expands.\n    return 'float';\n  }\n\n  private getHeaderBackgroundTransitionPreset() {\n    const { headerBackgroundTransitionPreset } = this.props;\n    if (headerBackgroundTransitionPreset) {\n      if (\n        HEADER_BACKGROUND_TRANSITION_PRESET.includes(\n          headerBackgroundTransitionPreset\n        )\n      ) {\n        if (headerBackgroundTransitionPreset === 'fade') {\n          return HeaderStyleInterpolator.forBackgroundWithFade;\n        } else if (headerBackgroundTransitionPreset === 'translate') {\n          return HeaderStyleInterpolator.forBackgroundWithTranslation;\n        } else if (headerBackgroundTransitionPreset === 'toggle') {\n          return HeaderStyleInterpolator.forBackgroundWithInactiveHidden;\n        }\n      } else if (__DEV__) {\n        console.error(\n          `Invalid configuration applied for headerBackgroundTransitionPreset - expected one of ${HEADER_BACKGROUND_TRANSITION_PRESET.join(\n            ', '\n          )} but received ${JSON.stringify(headerBackgroundTransitionPreset)}`\n        );\n      }\n    }\n\n    return null;\n  }\n\n  private getHeaderLayoutPreset() {\n    const { headerLayoutPreset } = this.props;\n    if (headerLayoutPreset) {\n      if (__DEV__) {\n        if (\n          this.getHeaderTransitionPreset() === 'uikit' &&\n          headerLayoutPreset === 'left' &&\n          Platform.OS === 'ios'\n        ) {\n          console.warn(\n            `headerTransitionPreset with the value 'uikit' is incompatible with headerLayoutPreset 'left'`\n          );\n        }\n      }\n      if (HEADER_LAYOUT_PRESET.includes(headerLayoutPreset)) {\n        return headerLayoutPreset;\n      }\n\n      if (__DEV__) {\n        console.error(\n          `Invalid configuration applied for headerLayoutPreset - expected one of ${HEADER_LAYOUT_PRESET.join(\n            ', '\n          )} but received ${JSON.stringify(headerLayoutPreset)}`\n        );\n      }\n    }\n\n    if (Platform.OS !== 'ios') {\n      return 'left';\n    } else {\n      return 'center';\n    }\n  }\n\n  private getHeaderTransitionPreset() {\n    // On Android or with header mode screen, we always just use in-place,\n    // we ignore the option entirely (at least until we have other presets)\n    if (Platform.OS !== 'ios' || this.getHeaderMode() === 'screen') {\n      return 'fade-in-place';\n    }\n\n    const { headerTransitionPreset } = this.props;\n    if (headerTransitionPreset) {\n      if (HEADER_TRANSITION_PRESET.includes(headerTransitionPreset)) {\n        return headerTransitionPreset;\n      }\n\n      if (__DEV__) {\n        console.error(\n          `Invalid configuration applied for headerTransitionPreset - expected one of ${HEADER_TRANSITION_PRESET.join(\n            ', '\n          )} but received ${JSON.stringify(headerTransitionPreset)}`\n        );\n      }\n    }\n\n    return 'fade-in-place';\n  }\n\n  private getHeaderBackTitleVisible() {\n    const { headerBackTitleVisible } = this.props;\n    const layoutPreset = this.getHeaderLayoutPreset();\n\n    // Even when we align to center on Android, people should need to opt-in to\n    // showing the back title\n    const enabledByDefault = !(\n      layoutPreset === 'left' || Platform.OS !== 'ios'\n    );\n\n    return typeof headerBackTitleVisible === 'boolean'\n      ? headerBackTitleVisible\n      : enabledByDefault;\n  }\n\n  private renderInnerScene(scene: Scene) {\n    const { navigation, getComponent } = scene.descriptor;\n    const SceneComponent = getComponent();\n\n    const { screenProps } = this.props;\n    const headerMode = this.getHeaderMode();\n    if (headerMode === 'screen') {\n      return (\n        <View style={styles.container}>\n          <View style={styles.scenes}>\n            <SceneView\n              screenProps={screenProps}\n              navigation={navigation}\n              component={SceneComponent}\n            />\n          </View>\n          {this.renderHeader(scene, headerMode)}\n        </View>\n      );\n    }\n    return (\n      <SceneView\n        screenProps={screenProps}\n        navigation={navigation}\n        component={SceneComponent}\n      />\n    );\n  }\n\n  private prepareTransitionConfig() {\n    this.transitionConfig = TransitionConfigs.getTransitionConfig(\n      this.props.transitionConfig,\n      {\n        ...this.props.transitionProps,\n        position: this.position,\n      },\n      this.props.lastTransitionProps,\n      this.isModal()\n    );\n  }\n\n  private preparePosition() {\n    if (this.gesturePosition) {\n      // FIXME: this doesn't seem right, there is setValue called in some places\n      // @ts-ignore\n      this.position = Animated.add(\n        Animated.multiply(\n          this.props.transitionProps.position,\n          this.positionSwitch\n        ),\n        Animated.multiply(this.gesturePosition, this.gestureSwitch)\n      );\n    } else {\n      this.position = this.props.transitionProps.position;\n    }\n  }\n\n  private renderCard = (scene: Scene) => {\n    const {\n      transitionProps,\n      cardShadowEnabled,\n      cardOverlayEnabled,\n      transparentCard,\n      cardStyle,\n    } = this.props;\n\n    const { screenInterpolator } = this.transitionConfig as TransitionConfig;\n    const style =\n      screenInterpolator &&\n      screenInterpolator({\n        ...transitionProps,\n        shadowEnabled: cardShadowEnabled,\n        cardOverlayEnabled,\n        position: this.position,\n        scene,\n      });\n\n    // When using a floating header, we need to add some top\n    // padding on the scene.\n    const { options } = scene.descriptor;\n    const hasHeader = options.header !== null && options.headerShown !== false;\n    const headerMode = this.getHeaderMode();\n\n    let floatingContainerStyle: ViewStyle = StyleSheet.absoluteFill as ViewStyle;\n\n    if (hasHeader && headerMode === 'float' && !options.headerTransparent) {\n      floatingContainerStyle = {\n        ...Platform.select({\n          web: {} as ViewStyle,\n          default: StyleSheet.absoluteFillObject,\n        }),\n        paddingTop: this.state.floatingHeaderHeight,\n      };\n    }\n\n    return (\n      <Card\n        {...transitionProps}\n        key={`card_${scene.key}`}\n        position={this.position}\n        realPosition={transitionProps.position}\n        animatedStyle={style}\n        transparent={transparentCard}\n        style={[floatingContainerStyle, cardStyle]}\n        scene={scene}\n      >\n        {this.renderInnerScene(scene)}\n      </Card>\n    );\n  };\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    // Header is physically rendered after scenes so that Header won't be\n    // covered by the shadows of the scenes.\n    // That said, we'd have use `flexDirection: 'column-reverse'` to move\n    // Header above the scenes.\n    flexDirection: 'column-reverse',\n    overflow: 'hidden',\n  },\n  scenes: {\n    flex: 1,\n  },\n  floatingHeader: {\n    // @ts-ignore\n    position: Platform.select({ default: 'absolute', web: 'fixed' }),\n    left: 0,\n    top: 0,\n    right: 0,\n  },\n});\n\nexport default withOrientation(StackViewLayout);\n"]},"metadata":{},"sourceType":"module"}