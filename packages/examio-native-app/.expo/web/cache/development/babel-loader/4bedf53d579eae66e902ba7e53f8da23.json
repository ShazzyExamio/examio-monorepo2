{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _jsxFileName = \"/Users/trensik/dev/react-native-paper/src/components/Icon.tsx\";\nimport * as React from 'react';\nimport Image from \"react-native-web/dist/exports/Image\";\nimport I18nManager from \"react-native-web/dist/exports/I18nManager\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { Consumer as SettingsConsumer } from \"../core/settings\";\nimport { accessibilityProps } from \"./MaterialCommunityIcon\";\nimport { withTheme } from \"../core/theming\";\n\nvar isImageSource = function isImageSource(source) {\n  return typeof source === 'object' && source !== null && Object.prototype.hasOwnProperty.call(source, 'uri') && typeof source.uri === 'string' || typeof source === 'number' || Platform.OS === 'web' && typeof source === 'string' && (source.startsWith('data:image') || /\\.(bmp|jpg|jpeg|png|gif|svg)$/.test(source));\n};\n\nvar getIconId = function getIconId(source) {\n  if (typeof source === 'object' && source !== null && Object.prototype.hasOwnProperty.call(source, 'uri') && typeof source.uri === 'string') {\n    return source.uri;\n  }\n\n  return source;\n};\n\nexport var isValidIcon = function isValidIcon(source) {\n  return typeof source === 'string' || isImageSource(source);\n};\nexport var isEqualIcon = function isEqualIcon(a, b) {\n  return a === b || getIconId(a) === getIconId(b);\n};\n\nvar Icon = function Icon(_ref) {\n  var source = _ref.source,\n      color = _ref.color,\n      size = _ref.size,\n      theme = _ref.theme,\n      rest = _objectWithoutProperties(_ref, [\"source\", \"color\", \"size\", \"theme\"]);\n\n  var direction = typeof source === 'object' && source.direction && source.source ? source.direction === 'auto' ? I18nManager.isRTL ? 'rtl' : 'ltr' : source.direction : null;\n  var s = typeof source === 'object' && source.direction && source.source ? source.source : source;\n  var iconColor = color || theme.colors.text;\n\n  if (isImageSource(s)) {\n    return React.createElement(Image, _extends({}, rest, {\n      source: s,\n      style: [{\n        transform: [{\n          scaleX: direction === 'rtl' ? -1 : 1\n        }]\n      }, {\n        width: size,\n        height: size,\n        tintColor: color,\n        resizeMode: 'contain'\n      }]\n    }, accessibilityProps, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      }\n    }));\n  } else if (typeof s === 'string') {\n    return React.createElement(SettingsConsumer, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      }\n    }, function (_ref2) {\n      var icon = _ref2.icon;\n      return icon({\n        name: s,\n        color: iconColor,\n        size: size,\n        direction: direction\n      });\n    });\n  } else if (typeof s === 'function') {\n    return s({\n      color: iconColor,\n      size: size,\n      direction: direction\n    });\n  }\n\n  return null;\n};\n\nexport default withTheme(Icon);","map":{"version":3,"sources":["Icon.tsx"],"names":["Consumer","isImageSource","source","Object","Platform","getIconId","isValidIcon","isEqualIcon","a","Icon","color","size","theme","rest","direction","I18nManager","s","iconColor","transform","scaleX","width","height","tintColor","resizeMode","icon","name","withTheme"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  Image,\n  I18nManager,\n  Platform,\n  ImageSourcePropType,\n} from 'react-native';\nimport { Consumer as SettingsConsumer } from '../core/settings';\nimport { accessibilityProps } from './MaterialCommunityIcon';\nimport { withTheme } from '../core/theming';\nimport { Theme } from '../types';\n\ntype IconSourceBase = string | ImageSourcePropType;\n\nexport type IconSource =\n  | IconSourceBase\n  | Readonly<{ source: IconSourceBase; direction: 'rtl' | 'ltr' | 'auto' }>\n  | ((props: IconProps & { color: string }) => React.ReactNode);\n\ntype IconProps = {\n  size: number;\n  allowFontScaling?: boolean;\n};\n\ntype Props = IconProps & {\n  color?: string;\n  source: any;\n  /**\n   * @optional\n   */\n  theme: Theme;\n};\n\nconst isImageSource = (source: any) =>\n  // source is an object with uri\n  (typeof source === 'object' &&\n    source !== null &&\n    (Object.prototype.hasOwnProperty.call(source, 'uri') &&\n      typeof source.uri === 'string')) ||\n  // source is a module, e.g. - require('image')\n  typeof source === 'number' ||\n  // image url on web\n  (Platform.OS === 'web' &&\n    typeof source === 'string' &&\n    (source.startsWith('data:image') ||\n      /\\.(bmp|jpg|jpeg|png|gif|svg)$/.test(source)));\n\nconst getIconId = (source: any) => {\n  if (\n    typeof source === 'object' &&\n    source !== null &&\n    (Object.prototype.hasOwnProperty.call(source, 'uri') &&\n      typeof source.uri === 'string')\n  ) {\n    return source.uri;\n  }\n\n  return source;\n};\n\nexport const isValidIcon = (source: any) =>\n  typeof source === 'string' || isImageSource(source);\n\nexport const isEqualIcon = (a: any, b: any) =>\n  a === b || getIconId(a) === getIconId(b);\n\nconst Icon = ({ source, color, size, theme, ...rest }: Props) => {\n  const direction =\n    // @ts-ignore\n    typeof source === 'object' && source.direction && source.source\n      ? source.direction === 'auto'\n        ? I18nManager.isRTL\n          ? 'rtl'\n          : 'ltr'\n        : source.direction\n      : null;\n  const s =\n    // @ts-ignore\n    typeof source === 'object' && source.direction && source.source\n      ? source.source\n      : source;\n  const iconColor = color || theme.colors.text;\n\n  if (isImageSource(s)) {\n    return (\n      <Image\n        {...rest}\n        source={s}\n        style={[\n          {\n            transform: [{ scaleX: direction === 'rtl' ? -1 : 1 }],\n          },\n          // eslint-disable-next-line react-native/no-inline-styles\n          {\n            width: size,\n            height: size,\n            tintColor: color,\n            resizeMode: 'contain',\n          },\n        ]}\n        {...accessibilityProps}\n      />\n    );\n  } else if (typeof s === 'string') {\n    return (\n      <SettingsConsumer>\n        {({ icon }) => {\n          return icon({\n            name: s,\n            color: iconColor,\n            size,\n            direction,\n          });\n        }}\n      </SettingsConsumer>\n    );\n  } else if (typeof s === 'function') {\n    return s({ color: iconColor, size, direction });\n  }\n\n  return null;\n};\n\nexport default withTheme(Icon);\n"]},"metadata":{},"sourceType":"module"}