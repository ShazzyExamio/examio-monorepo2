{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nvar _jsxFileName = \"/Users/trensik/dev/react-native-paper/src/components/Appbar/AppbarHeader.tsx\";\nimport * as React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport StatusBar from \"react-native-web/dist/exports/StatusBar\";\nimport overlay from \"../../styles/overlay\";\nimport Appbar, { DEFAULT_APPBAR_HEIGHT } from \"./Appbar\";\nimport shadow from \"../../styles/shadow\";\nimport { withTheme } from \"../../core/theming\";\nimport { APPROX_STATUSBAR_HEIGHT } from \"../../constants\";\nimport color from 'color';\n\nvar AppbarHeader = function (_React$Component) {\n  _inherits(AppbarHeader, _React$Component);\n\n  function AppbarHeader() {\n    _classCallCheck(this, AppbarHeader);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(AppbarHeader).apply(this, arguments));\n  }\n\n  _createClass(AppbarHeader, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          _this$props$statusBar = _this$props.statusBarHeight,\n          statusBarHeight = _this$props$statusBar === void 0 ? APPROX_STATUSBAR_HEIGHT : _this$props$statusBar,\n          style = _this$props.style,\n          dark = _this$props.dark,\n          rest = _objectWithoutProperties(_this$props, [\"statusBarHeight\", \"style\", \"dark\"]);\n\n      var _rest$theme = rest.theme,\n          isDarkTheme = _rest$theme.dark,\n          colors = _rest$theme.colors,\n          mode = _rest$theme.mode;\n\n      var _ref = StyleSheet.flatten(style) || {},\n          _ref$height = _ref.height,\n          height = _ref$height === void 0 ? DEFAULT_APPBAR_HEIGHT : _ref$height,\n          _ref$elevation = _ref.elevation,\n          elevation = _ref$elevation === void 0 ? 4 : _ref$elevation,\n          customBackground = _ref.backgroundColor,\n          _ref$zIndex = _ref.zIndex,\n          zIndex = _ref$zIndex === void 0 ? 0 : _ref$zIndex,\n          restStyle = _objectWithoutProperties(_ref, [\"height\", \"elevation\", \"backgroundColor\", \"zIndex\"]);\n\n      var backgroundColor = customBackground ? customBackground : isDarkTheme && mode === 'adaptive' ? overlay(elevation, colors.surface) : colors.primary;\n      var Wrapper = typeof this.props.statusBarHeight === 'number' ? View : SafeAreaView;\n      var isDark;\n\n      if (typeof dark === 'boolean') {\n        isDark = dark;\n      } else {\n        isDark = backgroundColor === 'transparent' ? false : !color(backgroundColor).isLight();\n      }\n\n      StatusBar.setBarStyle(isDark ? 'light-content' : 'dark-content');\n      return React.createElement(Wrapper, {\n        style: [{\n          backgroundColor: backgroundColor,\n          zIndex: zIndex,\n          elevation: elevation\n        }, shadow(elevation)],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125\n        }\n      }, React.createElement(Appbar, _extends({\n        style: [{\n          height: height,\n          backgroundColor: backgroundColor,\n          marginTop: statusBarHeight\n        }, styles.appbar, restStyle],\n        dark: dark\n      }, rest, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 134\n        }\n      })));\n    }\n  }]);\n\n  return AppbarHeader;\n}(React.Component);\n\nAppbarHeader.displayName = 'Appbar.Header';\nvar styles = StyleSheet.create({\n  appbar: {\n    elevation: 0\n  }\n});\nexport default withTheme(AppbarHeader);\nexport { AppbarHeader };","map":{"version":3,"sources":["AppbarHeader.tsx"],"names":["AppbarHeader","React","Component","displayName","statusBarHeight","style","dark","rest","isDarkTheme","colors","mode","height","elevation","customBackground","zIndex","restStyle","StyleSheet","backgroundColor","overlay","Wrapper","isDark","color","StatusBar","shadow","marginTop","styles","appbar","withTheme"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  StyleSheet,\n  StyleProp,\n  View,\n  SafeAreaView,\n  ViewStyle,\n  StatusBar,\n} from 'react-native';\nimport overlay from '../../styles/overlay';\nimport Appbar, { DEFAULT_APPBAR_HEIGHT } from './Appbar';\nimport shadow from '../../styles/shadow';\nimport { withTheme } from '../../core/theming';\nimport { Theme } from '../../types';\nimport { APPROX_STATUSBAR_HEIGHT } from '../../constants';\nimport color from 'color';\n\ntype Props = React.ComponentProps<typeof Appbar> & {\n  /**\n   * Whether the background color is a dark color. A dark header will render light text and vice-versa.\n   */\n  dark?: boolean;\n  /**\n   * Extra padding to add at the top of header to account for translucent status bar.\n   * This is automatically handled on iOS >= 11 including iPhone X using `SafeAreaView`.\n   * If you are using Expo, we assume translucent status bar and set a height for status bar automatically.\n   * Pass `0` or a custom value to disable the default behaviour, and customize the height.\n   */\n  statusBarHeight?: number;\n  /**\n   * Content of the header.\n   */\n  children: React.ReactNode;\n  /**\n   * @optional\n   */\n  theme: Theme;\n  style?: StyleProp<ViewStyle>;\n};\n\n/**\n * A component to use as a header at the top of the screen.\n * It can contain the screen title, controls such as navigation buttons, menu button etc.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/appbar-header.android.png\" />\n *     <figcaption>Android</figcaption>\n *   </figure>\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/appbar-header.ios.png\" />\n *     <figcaption>iOS</figcaption>\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Appbar } from 'react-native-paper';\n *\n * export default class MyComponent extends React.Component {\n *   _goBack = () => console.log('Went back');\n *\n *   _onSearch = () => console.log('Searching');\n *\n *   _onMore = () => console.log('Shown more');\n *\n *   render() {\n *     return (\n *       <Appbar.Header>\n *         <Appbar.BackAction\n *           onPress={this._goBack}\n *         />\n *         <Appbar.Content\n *           title=\"Title\"\n *           subtitle=\"Subtitle\"\n *         />\n *         <Appbar.Action icon=\"search\" onPress={this._onSearch} />\n *         <Appbar.Action icon=\"more-vert\" onPress={this._onMore} />\n *       </Appbar.Header>\n *     );\n *   }\n * }\n * ```\n */\nclass AppbarHeader extends React.Component<Props> {\n  static displayName = 'Appbar.Header';\n\n  render() {\n    const {\n      // Don't use default props since we check it to know whether we should use SafeAreaView\n      statusBarHeight = APPROX_STATUSBAR_HEIGHT,\n      style,\n      dark,\n      ...rest\n    } = this.props;\n    const { dark: isDarkTheme, colors, mode } = rest.theme;\n    const {\n      height = DEFAULT_APPBAR_HEIGHT,\n      elevation = 4,\n      backgroundColor: customBackground,\n      zIndex = 0,\n      ...restStyle\n    }: ViewStyle = StyleSheet.flatten(style) || {};\n    const backgroundColor = customBackground\n      ? customBackground\n      : isDarkTheme && mode === 'adaptive'\n      ? overlay(elevation, colors.surface)\n      : colors.primary;\n    // Let the user override the behaviour\n    const Wrapper =\n      typeof this.props.statusBarHeight === 'number' ? View : SafeAreaView;\n    let isDark;\n    if (typeof dark === 'boolean') {\n      isDark = dark;\n    } else {\n      isDark =\n        backgroundColor === 'transparent'\n          ? false\n          : !color(backgroundColor).isLight();\n    }\n    StatusBar.setBarStyle(isDark ? 'light-content' : 'dark-content');\n\n    return (\n      <Wrapper\n        style={\n          [\n            { backgroundColor, zIndex, elevation },\n            shadow(elevation),\n          ] as StyleProp<ViewStyle>\n        }\n      >\n        {/* $FlowFixMe: There seems to be conflict between Appbar's props and Header's props */}\n        <Appbar\n          //@ts-ignore\n          style={[\n            { height, backgroundColor, marginTop: statusBarHeight },\n            styles.appbar,\n            restStyle,\n          ]}\n          dark={dark}\n          {...rest}\n        />\n      </Wrapper>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  appbar: {\n    elevation: 0,\n  },\n});\n\nexport default withTheme(AppbarHeader);\n\n// @component-docs ignore-next-line\nexport { AppbarHeader };\n"]},"metadata":{},"sourceType":"module"}