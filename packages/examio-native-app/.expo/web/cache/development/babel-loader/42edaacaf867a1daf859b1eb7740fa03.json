{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nvar _jsxFileName = \"/Users/satya/Workspace/Callstack/react-navigation-stack/src/views/Header/ModularHeaderBackButton.tsx\";\nimport * as React from 'react';\nimport I18nManager from \"react-native-web/dist/exports/I18nManager\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TouchableItem from \"../TouchableItem\";\nimport defaultBackImage from \"../assets/back-icon.png\";\n\nvar ModularHeaderBackButton = function (_React$PureComponent) {\n  _inherits(ModularHeaderBackButton, _React$PureComponent);\n\n  function ModularHeaderBackButton() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, ModularHeaderBackButton);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(ModularHeaderBackButton)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {};\n\n    _this.onTextLayout = function (e) {\n      if (_this.state.initialTextWidth) {\n        return;\n      }\n\n      _this.setState({\n        initialTextWidth: e.nativeEvent.layout.x + e.nativeEvent.layout.width\n      });\n    };\n\n    _this.getTitleText = function () {\n      var _this$props = _this.props,\n          width = _this$props.width,\n          title = _this$props.title,\n          truncatedTitle = _this$props.truncatedTitle;\n      var initialTextWidth = _this.state.initialTextWidth;\n\n      if (title === null) {\n        return null;\n      } else if (!title) {\n        return truncatedTitle;\n      } else if (initialTextWidth && width && initialTextWidth > width) {\n        return truncatedTitle;\n      } else {\n        return title.length > 8 ? truncatedTitle : title;\n      }\n    };\n\n    return _this;\n  }\n\n  _createClass(ModularHeaderBackButton, [{\n    key: \"renderBackImage\",\n    value: function renderBackImage() {\n      var _this$props2 = this.props,\n          backImage = _this$props2.backImage,\n          backTitleVisible = _this$props2.backTitleVisible,\n          tintColor = _this$props2.tintColor;\n\n      if (React.isValidElement(backImage)) {\n        return backImage;\n      } else if (backImage) {\n        return backImage({\n          tintColor: tintColor\n        });\n      } else {\n        return React.createElement(Image, {\n          style: [styles.icon, !!backTitleVisible && styles.iconWithTitle, !!tintColor && {\n            tintColor: tintColor\n          }],\n          source: defaultBackImage,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 51\n          }\n        });\n      }\n    }\n  }, {\n    key: \"maybeRenderTitle\",\n    value: function maybeRenderTitle() {\n      var _this$props3 = this.props,\n          backTitleVisible = _this$props3.backTitleVisible,\n          titleStyle = _this$props3.titleStyle,\n          tintColor = _this$props3.tintColor;\n      var backTitleText = this.getTitleText();\n\n      if (!backTitleVisible || backTitleText === null) {\n        return null;\n      }\n\n      var LabelContainerComponent = this.props.LabelContainerComponent;\n      return React.createElement(LabelContainerComponent, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90\n        }\n      }, React.createElement(Text, {\n        accessible: false,\n        onLayout: this.onTextLayout,\n        style: [styles.title, !!tintColor && {\n          color: tintColor\n        }, titleStyle],\n        numberOfLines: 1,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91\n        }\n      }, this.getTitleText()));\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props4 = this.props,\n          onPress = _this$props4.onPress,\n          title = _this$props4.title;\n      var ButtonContainerComponent = this.props.ButtonContainerComponent;\n      return React.createElement(TouchableItem, {\n        accessibilityComponentType: \"button\",\n        accessibilityLabel: title ? title + \", back\" : 'Go back',\n        accessibilityTraits: \"button\",\n        testID: \"header-back\",\n        delayPressIn: 0,\n        onPress: onPress,\n        style: styles.container,\n        borderless: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112\n        }\n      }, React.createElement(View, {\n        style: styles.container,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122\n        }\n      }, React.createElement(ButtonContainerComponent, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123\n        }\n      }, this.renderBackImage()), this.maybeRenderTitle()));\n    }\n  }]);\n\n  return ModularHeaderBackButton;\n}(React.PureComponent);\n\nModularHeaderBackButton.defaultProps = {\n  tintColor: '#037aff',\n  truncatedTitle: 'Back'\n};\nvar styles = StyleSheet.create({\n  container: {\n    alignItems: 'center',\n    flexDirection: 'row',\n    backgroundColor: 'transparent',\n    marginBottom: 1,\n    overflow: 'visible'\n  },\n  title: {\n    fontSize: 17,\n    paddingRight: 10\n  },\n  icon: {\n    height: 21,\n    width: 12,\n    marginLeft: 9,\n    marginRight: 22,\n    marginVertical: 12,\n    resizeMode: 'contain',\n    transform: [{\n      scaleX: I18nManager.isRTL ? -1 : 1\n    }]\n  },\n  iconWithTitle: {\n    marginRight: 3\n  }\n});\nexport default ModularHeaderBackButton;","map":{"version":3,"sources":["ModularHeaderBackButton.tsx"],"names":["ModularHeaderBackButton","React","PureComponent","defaultProps","tintColor","truncatedTitle","state","onTextLayout","initialTextWidth","e","backImage","backTitleVisible","styles","getTitleText","width","title","titleStyle","backTitleText","LabelContainerComponent","color","onPress","ButtonContainerComponent","StyleSheet","container","alignItems","flexDirection","backgroundColor","marginBottom","overflow","fontSize","paddingRight","icon","height","marginLeft","marginRight","marginVertical","resizeMode","transform","scaleX","I18nManager","iconWithTitle"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  I18nManager,\n  Image,\n  Text,\n  View,\n  StyleSheet,\n  LayoutChangeEvent,\n} from 'react-native';\n\nimport TouchableItem from '../TouchableItem';\n\nimport defaultBackImage from '../assets/back-icon.png';\nimport { HeaderBackButtonProps } from '../../types';\n\ntype Props = HeaderBackButtonProps & {\n  LabelContainerComponent: React.ComponentType;\n  ButtonContainerComponent: React.ComponentType;\n};\n\ntype State = {\n  initialTextWidth?: number;\n};\n\nclass ModularHeaderBackButton extends React.PureComponent<Props, State> {\n  static defaultProps = {\n    tintColor: '#037aff',\n    truncatedTitle: 'Back',\n  };\n\n  state: State = {};\n\n  private onTextLayout = (e: LayoutChangeEvent) => {\n    if (this.state.initialTextWidth) {\n      return;\n    }\n    this.setState({\n      initialTextWidth: e.nativeEvent.layout.x + e.nativeEvent.layout.width,\n    });\n  };\n\n  private renderBackImage() {\n    const { backImage, backTitleVisible, tintColor } = this.props;\n\n    if (React.isValidElement(backImage)) {\n      return backImage;\n    } else if (backImage) {\n      return backImage({ tintColor });\n    } else {\n      return (\n        <Image\n          style={[\n            styles.icon,\n            !!backTitleVisible && styles.iconWithTitle,\n            !!tintColor && { tintColor },\n          ]}\n          source={defaultBackImage}\n        />\n      );\n    }\n  }\n\n  private getTitleText = () => {\n    const { width, title, truncatedTitle } = this.props;\n\n    let { initialTextWidth } = this.state;\n\n    if (title === null) {\n      return null;\n    } else if (!title) {\n      return truncatedTitle;\n    } else if (initialTextWidth && width && initialTextWidth > width) {\n      return truncatedTitle;\n    } else {\n      return title.length > 8 ? truncatedTitle : title;\n    }\n  };\n\n  private maybeRenderTitle() {\n    const { backTitleVisible, titleStyle, tintColor } = this.props;\n    let backTitleText = this.getTitleText();\n\n    if (!backTitleVisible || backTitleText === null) {\n      return null;\n    }\n\n    const { LabelContainerComponent } = this.props;\n\n    return (\n      <LabelContainerComponent>\n        <Text\n          accessible={false}\n          onLayout={this.onTextLayout}\n          style={[\n            styles.title,\n            !!tintColor && { color: tintColor },\n            titleStyle,\n          ]}\n          numberOfLines={1}\n        >\n          {this.getTitleText()}\n        </Text>\n      </LabelContainerComponent>\n    );\n  }\n\n  render() {\n    const { onPress, title } = this.props;\n    const { ButtonContainerComponent } = this.props;\n\n    return (\n      <TouchableItem\n        accessibilityComponentType=\"button\"\n        accessibilityLabel={title ? `${title}, back` : 'Go back'}\n        accessibilityTraits=\"button\"\n        testID=\"header-back\"\n        delayPressIn={0}\n        onPress={onPress}\n        style={styles.container}\n        borderless\n      >\n        <View style={styles.container}>\n          <ButtonContainerComponent>\n            {this.renderBackImage()}\n          </ButtonContainerComponent>\n          {this.maybeRenderTitle()}\n        </View>\n      </TouchableItem>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    alignItems: 'center',\n    flexDirection: 'row',\n    backgroundColor: 'transparent',\n    marginBottom: 1,\n    overflow: 'visible',\n  },\n  title: {\n    fontSize: 17,\n    paddingRight: 10,\n  },\n  icon: {\n    height: 21,\n    width: 12,\n    marginLeft: 9,\n    marginRight: 22,\n    marginVertical: 12,\n    resizeMode: 'contain',\n    transform: [{ scaleX: I18nManager.isRTL ? -1 : 1 }],\n  },\n  iconWithTitle: {\n    marginRight: 3,\n  },\n});\n\nexport default ModularHeaderBackButton;\n"]},"metadata":{},"sourceType":"module"}