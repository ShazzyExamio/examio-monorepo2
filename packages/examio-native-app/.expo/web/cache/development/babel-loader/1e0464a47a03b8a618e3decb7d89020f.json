{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport React, { memo, useState } from 'react';\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Background from \"../components/Background\";\nimport Logo from \"../components/Logo\";\nimport Header from \"../components/Header\";\nimport Button from \"../components/Button\";\nimport TextInput from \"../components/TextInput\";\nimport BackButton from \"../components/BackButton\";\nimport { theme } from \"../core/theme\";\nimport { emailValidator, passwordValidator } from \"../core/utils\";\nimport { loginFunction } from \"../services/user.service\";\nimport { useToast } from \"react-native-toast-notifications\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar LoginScreen = function LoginScreen(_ref) {\n  var navigation = _ref.navigation;\n\n  var _useState = useState({\n    value: '',\n    error: ''\n  }),\n      _useState2 = _slicedToArray(_useState, 2),\n      email = _useState2[0],\n      setEmail = _useState2[1];\n\n  var _useState3 = useState({\n    value: '',\n    error: ''\n  }),\n      _useState4 = _slicedToArray(_useState3, 2),\n      password = _useState4[0],\n      setPassword = _useState4[1];\n\n  var toast = useToast();\n\n  var _onLoginPressed = function _callee() {\n    var emailError, passwordError, result;\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            emailError = emailValidator(email.value);\n            passwordError = passwordValidator(password.value);\n\n            if (!(emailError || passwordError)) {\n              _context.next = 6;\n              break;\n            }\n\n            setEmail(_objectSpread(_objectSpread({}, email), {}, {\n              error: emailError\n            }));\n            setPassword(_objectSpread(_objectSpread({}, password), {}, {\n              error: passwordError\n            }));\n            return _context.abrupt(\"return\");\n\n          case 6:\n            _context.next = 8;\n            return _regeneratorRuntime.awrap(loginFunction(email.value, password.value));\n\n          case 8:\n            result = _context.sent;\n\n            if (result) {\n              navigation.navigate('Dashboard');\n            } else {\n              toast.show(\"Falsche E-Mail/Passwort\");\n            }\n\n          case 10:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  return _jsxs(Background, {\n    children: [_jsx(BackButton, {\n      goBack: function goBack() {\n        return navigation.navigate('HomeScreen');\n      }\n    }), _jsx(Logo, {}), _jsx(Header, {\n      children: \"Willkommen\"\n    }), _jsx(TextInput, {\n      label: \"Benutzername / E-Mail Adresse\",\n      returnKeyType: \"next\",\n      value: email.value,\n      onChangeText: function onChangeText(text) {\n        return setEmail({\n          value: text,\n          error: ''\n        });\n      },\n      error: !!email.error,\n      errorText: email.error,\n      autoCapitalize: \"none\",\n      autoCompleteType: \"email\",\n      textContentType: \"emailAddress\",\n      keyboardType: \"email-address\",\n      accessibilityStates: true,\n      accessibilityComponentType: true,\n      accessibilityTraits: true\n    }), _jsx(TextInput, {\n      label: \"Passwort\",\n      returnKeyType: \"done\",\n      value: password.value,\n      onChangeText: function onChangeText(text) {\n        return setPassword({\n          value: text,\n          error: ''\n        });\n      },\n      error: !!password.error,\n      errorText: password.error,\n      autoCompleteType: \"password\",\n      secureTextEntry: true,\n      accessibilityStates: true,\n      accessibilityComponentType: true,\n      accessibilityTraits: true\n    }), _jsx(View, {\n      style: styles.forgotPassword,\n      children: _jsx(TouchableOpacity, {\n        onPress: function onPress() {\n          return navigation.navigate('ForgotPasswordScreen');\n        },\n        children: _jsx(Text, {\n          style: styles.label,\n          children: \"Passwort vergessen?\"\n        })\n      })\n    }), _jsx(Button, {\n      mode: \"contained\",\n      onPress: _onLoginPressed,\n      accessibilityStates: true,\n      accessibilityComponentType: true,\n      accessibilityTraits: true,\n      children: \"Anmelden\"\n    }), _jsxs(View, {\n      style: styles.row,\n      children: [_jsx(Text, {\n        style: styles.label2,\n        children: \"Sie haben kein Konto? \"\n      }), _jsx(TouchableOpacity, {\n        onPress: function onPress() {\n          return navigation.navigate('RegisterScreen');\n        },\n        children: _jsx(Text, {\n          style: styles.link,\n          children: \"Anmeldung\"\n        })\n      })]\n    })]\n  });\n};\n\nvar styles = StyleSheet.create({\n  forgotPassword: {\n    width: '100%',\n    alignItems: 'flex-end',\n    marginBottom: 24\n  },\n  row: {\n    flexDirection: 'row',\n    marginTop: 4\n  },\n  label: {\n    color: '#ff9916'\n  },\n  label2: {\n    color: theme.colors.secondary\n  },\n  link: {\n    fontWeight: 'bold',\n    color: theme.colors.primary\n  }\n});\nexport default memo(LoginScreen);","map":{"version":3,"names":["React","memo","useState","Background","Logo","Header","Button","TextInput","BackButton","theme","emailValidator","passwordValidator","loginFunction","useToast","LoginScreen","navigation","value","error","email","setEmail","password","setPassword","toast","_onLoginPressed","emailError","passwordError","result","navigate","show","text","styles","forgotPassword","label","row","label2","link","StyleSheet","create","width","alignItems","marginBottom","flexDirection","marginTop","color","colors","secondary","fontWeight","primary"],"sources":["/Users/shahzarkhalid/Desktop/Examio Mono Repo2/packages/examio-native-app/src/screens/LoginScreen.tsx"],"sourcesContent":["import React, { memo, useState, } from 'react';\nimport { TouchableOpacity, StyleSheet, Text, View } from 'react-native';\nimport Background from '../components/Background';\nimport Logo from '../components/Logo';\nimport Header from '../components/Header';\nimport Button from '../components/Button';\nimport TextInput from '../components/TextInput';\nimport BackButton from '../components/BackButton';\nimport { theme } from '../core/theme';\nimport { emailValidator, passwordValidator } from '../core/utils';\nimport { Navigation } from '../types';\nimport { loginFunction } from '../services/user.service';\nimport { useToast } from \"react-native-toast-notifications\";\n\ntype Props = {\n  navigation: Navigation;\n};\n\nconst LoginScreen = ({ navigation }: Props) => {\n  const [email, setEmail] = useState({ value: '', error: '' });\n  const [password, setPassword] = useState({ value: '', error: '' });\n  const toast = useToast();\n\n  \n  const _onLoginPressed =  async () => {\n    const emailError = emailValidator(email.value);\n    const passwordError = passwordValidator(password.value);\n\n    if (emailError || passwordError) {\n      setEmail({ ...email, error: emailError });\n      setPassword({ ...password, error: passwordError });\n      return;\n    }\n\n    \n    let result = await loginFunction(email.value,password.value)\n\n    if(result)\n    {\n      navigation.navigate('Dashboard');\n    }\n    else\n    {\n      toast.show(\"Falsche E-Mail/Passwort\");\n    }\n\n  };\n\n  return (\n    <Background>\n      <BackButton goBack={() => navigation.navigate('HomeScreen')} />\n\n      <Logo />\n\n      <Header>Willkommen</Header>\n\n      <TextInput\n        label=\"Benutzername / E-Mail Adresse\"\n        returnKeyType=\"next\"\n        value={email.value}\n        onChangeText={text => setEmail({ value: text, error: '' })}\n        error={!!email.error}\n        errorText={email.error}\n        autoCapitalize=\"none\"\n        autoCompleteType=\"email\"\n        textContentType=\"emailAddress\"\n        keyboardType=\"email-address\"\n        accessibilityStates\n        accessibilityComponentType\n        accessibilityTraits\n      />\n\n      <TextInput\n        label=\"Passwort\"\n        returnKeyType=\"done\"\n        value={password.value}\n        onChangeText={text => setPassword({ value: text, error: '' })}\n        error={!!password.error}\n        errorText={password.error}\n        autoCompleteType=\"password\"\n        secureTextEntry\n        accessibilityStates\n        accessibilityComponentType\n        accessibilityTraits\n      />\n\n      <View style={styles.forgotPassword}>\n        <TouchableOpacity\n          onPress={() => navigation.navigate('ForgotPasswordScreen')}\n        >\n          <Text style={styles.label}>Passwort vergessen?</Text>\n        </TouchableOpacity>\n      </View>\n\n      <Button mode=\"contained\" onPress={_onLoginPressed} accessibilityStates  accessibilityComponentType  accessibilityTraits>\n        Anmelden\n      </Button>\n\n      <View style={styles.row}>\n        <Text style={styles.label2}>Sie haben kein Konto? </Text>\n        <TouchableOpacity onPress={() => navigation.navigate('RegisterScreen')}>\n          <Text style={styles.link}>Anmeldung</Text>\n        </TouchableOpacity>\n      </View>\n    </Background>\n  );\n};\n\nconst styles = StyleSheet.create({\n  forgotPassword: {\n    width: '100%',\n    alignItems: 'flex-end',\n    marginBottom: 24,\n  },\n  row: {\n    flexDirection: 'row',\n    marginTop: 4,\n  },\n  label: {\n    color: '#ff9916',\n  },\n  label2: {\n    color: theme.colors.secondary,\n  },\n  link: {\n    fontWeight: 'bold',\n    color: theme.colors.primary,\n  },\n});\n\nexport default memo(LoginScreen);\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}