{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(source, true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(source).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport Easing from \"react-native-web/dist/exports/Easing\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport StyleInterpolator from \"./StackViewStyleInterpolator\";\nimport { supportsImprovedSpringAnimation } from \"../../utils/ReactNativeFeatures\";\nvar IOSTransitionSpec;\n\nif (supportsImprovedSpringAnimation()) {\n  IOSTransitionSpec = {\n    timing: Animated.spring,\n    stiffness: 1000,\n    damping: 500,\n    mass: 3,\n    overshootClamping: true,\n    restDisplacementThreshold: 0.01,\n    restSpeedThreshold: 0.01\n  };\n} else {\n  IOSTransitionSpec = {\n    duration: 500,\n    easing: Easing.bezier(0.2833, 0.99, 0.31833, 0.99),\n    timing: Animated.timing\n  };\n}\n\nvar SlideFromRightIOS = {\n  transitionSpec: IOSTransitionSpec,\n  screenInterpolator: StyleInterpolator.forHorizontal,\n  containerStyleLight: {\n    backgroundColor: '#eee'\n  },\n  containerStyleDark: {\n    backgroundColor: '#000'\n  }\n};\nvar ModalSlideFromBottomIOS = {\n  transitionSpec: IOSTransitionSpec,\n  screenInterpolator: StyleInterpolator.forVertical,\n  containerStyleLight: {\n    backgroundColor: '#eee'\n  },\n  containerStyleDark: {\n    backgroundColor: '#000'\n  }\n};\nvar FadeInFromBottomAndroid = {\n  transitionSpec: {\n    duration: 350,\n    easing: Easing.out(Easing.poly(5)),\n    timing: Animated.timing\n  },\n  screenInterpolator: StyleInterpolator.forFadeFromBottomAndroid\n};\nvar FadeOutToBottomAndroid = {\n  transitionSpec: {\n    duration: 150,\n    easing: Easing.in(Easing.linear),\n    timing: Animated.timing\n  },\n  screenInterpolator: StyleInterpolator.forFadeToBottomAndroid\n};\nvar NoAnimation = {\n  transitionSpec: {\n    duration: 0,\n    timing: Animated.timing\n  },\n  screenInterpolator: StyleInterpolator.forNoAnimation,\n  containerStyleLight: {\n    backgroundColor: '#eee'\n  },\n  containerStyleDark: {\n    backgroundColor: '#000'\n  }\n};\n\nfunction defaultTransitionConfig(transitionProps, prevTransitionProps, isModal) {\n  if (Platform.OS !== 'ios') {\n    if (prevTransitionProps && transitionProps.index < prevTransitionProps.index) {\n      return FadeOutToBottomAndroid;\n    }\n\n    return FadeInFromBottomAndroid;\n  }\n\n  if (isModal) {\n    return ModalSlideFromBottomIOS;\n  }\n\n  return SlideFromRightIOS;\n}\n\nfunction getTransitionConfig(transitionConfigurer, transitionProps, prevTransitionProps, isModal) {\n  var defaultConfig = defaultTransitionConfig(transitionProps, prevTransitionProps, isModal);\n\n  if (transitionConfigurer) {\n    return _objectSpread({}, defaultConfig, {}, transitionConfigurer(transitionProps, prevTransitionProps, isModal));\n  }\n\n  return defaultConfig;\n}\n\nexport default {\n  defaultTransitionConfig: defaultTransitionConfig,\n  getTransitionConfig: getTransitionConfig,\n  SlideFromRightIOS: SlideFromRightIOS,\n  ModalSlideFromBottomIOS: ModalSlideFromBottomIOS,\n  FadeInFromBottomAndroid: FadeInFromBottomAndroid,\n  FadeOutToBottomAndroid: FadeOutToBottomAndroid,\n  NoAnimation: NoAnimation\n};","map":{"version":3,"sources":["StackViewTransitionConfigs.tsx"],"names":["supportsImprovedSpringAnimation","IOSTransitionSpec","timing","Animated","stiffness","damping","mass","overshootClamping","restDisplacementThreshold","restSpeedThreshold","duration","easing","Easing","SlideFromRightIOS","transitionSpec","screenInterpolator","StyleInterpolator","containerStyleLight","backgroundColor","containerStyleDark","ModalSlideFromBottomIOS","FadeInFromBottomAndroid","FadeOutToBottomAndroid","NoAnimation","Platform","prevTransitionProps","transitionProps","defaultConfig","defaultTransitionConfig","transitionConfigurer","getTransitionConfig"],"mappings":"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","sourcesContent":["import { Animated, Easing, Platform } from 'react-native';\nimport StyleInterpolator from './StackViewStyleInterpolator';\nimport { supportsImprovedSpringAnimation } from '../../utils/ReactNativeFeatures';\nimport { TransitionProps, TransitionConfig } from '../../types';\n\nlet IOSTransitionSpec;\nif (supportsImprovedSpringAnimation()) {\n  // These are the exact values from UINavigationController's animation configuration\n  IOSTransitionSpec = {\n    timing: Animated.spring,\n    stiffness: 1000,\n    damping: 500,\n    mass: 3,\n    overshootClamping: true,\n    restDisplacementThreshold: 0.01,\n    restSpeedThreshold: 0.01,\n  };\n} else {\n  // This is an approximation of the IOS spring animation using a derived bezier curve\n  IOSTransitionSpec = {\n    duration: 500,\n    easing: Easing.bezier(0.2833, 0.99, 0.31833, 0.99),\n    timing: Animated.timing,\n  };\n}\n\n// Standard iOS navigation transition\nconst SlideFromRightIOS = {\n  transitionSpec: IOSTransitionSpec,\n  screenInterpolator: StyleInterpolator.forHorizontal,\n  containerStyleLight: {\n    backgroundColor: '#eee',\n  },\n  containerStyleDark: {\n    backgroundColor: '#000',\n  },\n};\n\n// Standard iOS navigation transition for modals\nconst ModalSlideFromBottomIOS = {\n  transitionSpec: IOSTransitionSpec,\n  screenInterpolator: StyleInterpolator.forVertical,\n  containerStyleLight: {\n    backgroundColor: '#eee',\n  },\n  containerStyleDark: {\n    backgroundColor: '#000',\n  },\n};\n\n// Standard Android navigation transition when opening an Activity\nconst FadeInFromBottomAndroid = {\n  // See http://androidxref.com/7.1.1_r6/xref/frameworks/base/core/res/res/anim/activity_open_enter.xml\n  transitionSpec: {\n    duration: 350,\n    easing: Easing.out(Easing.poly(5)), // decelerate\n    timing: Animated.timing,\n  },\n  screenInterpolator: StyleInterpolator.forFadeFromBottomAndroid,\n};\n\n// Standard Android navigation transition when closing an Activity\nconst FadeOutToBottomAndroid = {\n  // See http://androidxref.com/7.1.1_r6/xref/frameworks/base/core/res/res/anim/activity_close_exit.xml\n  transitionSpec: {\n    duration: 150,\n    easing: Easing.in(Easing.linear), // accelerate\n    timing: Animated.timing,\n  },\n  screenInterpolator: StyleInterpolator.forFadeToBottomAndroid,\n};\n\nconst NoAnimation = {\n  transitionSpec: {\n    duration: 0,\n    timing: Animated.timing,\n  },\n  screenInterpolator: StyleInterpolator.forNoAnimation,\n  containerStyleLight: {\n    backgroundColor: '#eee',\n  },\n  containerStyleDark: {\n    backgroundColor: '#000',\n  },\n};\n\nfunction defaultTransitionConfig(\n  transitionProps: TransitionProps,\n  prevTransitionProps?: TransitionProps,\n  isModal?: boolean\n): TransitionConfig {\n  if (Platform.OS !== 'ios') {\n    // Use the default Android animation no matter if the screen is a modal.\n    // Android doesn't have full-screen modals like iOS does, it has dialogs.\n    if (\n      prevTransitionProps &&\n      transitionProps.index < prevTransitionProps.index\n    ) {\n      // Navigating back to the previous screen\n      return FadeOutToBottomAndroid;\n    }\n    return FadeInFromBottomAndroid;\n  }\n  // iOS and other platforms\n  if (isModal) {\n    return ModalSlideFromBottomIOS;\n  }\n  return SlideFromRightIOS;\n}\n\nfunction getTransitionConfig<T = {}>(\n  transitionConfigurer:\n    | undefined\n    | ((\n        transitionProps: TransitionProps,\n        prevTransitionProps?: TransitionProps,\n        isModal?: boolean\n      ) => T),\n  transitionProps: TransitionProps,\n  prevTransitionProps?: TransitionProps,\n  isModal?: boolean\n): TransitionConfig & T {\n  const defaultConfig = defaultTransitionConfig(\n    transitionProps,\n    prevTransitionProps,\n    isModal\n  );\n  if (transitionConfigurer) {\n    return {\n      ...defaultConfig,\n      ...transitionConfigurer(transitionProps, prevTransitionProps, isModal),\n    };\n  }\n\n  return defaultConfig as any;\n}\n\nexport default {\n  defaultTransitionConfig,\n  getTransitionConfig,\n  SlideFromRightIOS,\n  ModalSlideFromBottomIOS,\n  FadeInFromBottomAndroid,\n  FadeOutToBottomAndroid,\n  NoAnimation,\n};\n"]},"metadata":{},"sourceType":"module"}