{"ast":null,"code":"import * as NavigationActions from \"../NavigationActions\";\nimport invariant from \"../utils/invariant\";\n\nvar getNavigationActionCreators = function getNavigationActionCreators(route) {\n  return {\n    goBack: function goBack(key) {\n      var actualizedKey = key;\n\n      if (key === undefined && route.key) {\n        invariant(typeof route.key === 'string', 'key should be a string');\n        actualizedKey = route.key;\n      }\n\n      return NavigationActions.back({\n        key: actualizedKey\n      });\n    },\n    navigate: function navigate(navigateTo, params, action) {\n      if (typeof navigateTo === 'string') {\n        return NavigationActions.navigate({\n          routeName: navigateTo,\n          params: params,\n          action: action\n        });\n      }\n\n      invariant(typeof navigateTo === 'object', 'Must navigateTo an object or a string');\n      invariant(params == null, 'Params must not be provided to .navigate() when specifying an object');\n      invariant(action == null, 'Child action must not be provided to .navigate() when specifying an object');\n      return NavigationActions.navigate(navigateTo);\n    },\n    setParams: function setParams(params) {\n      invariant(route.key && typeof route.key === 'string', 'setParams cannot be called by root navigator');\n      return NavigationActions.setParams({\n        params: params,\n        key: route.key\n      });\n    }\n  };\n};\n\nexport default getNavigationActionCreators;","map":{"version":3,"sources":["getNavigationActionCreators.js"],"names":["getNavigationActionCreators","goBack","actualizedKey","key","route","invariant","NavigationActions","navigate","routeName","params","action","setParams"],"mappings":"AAAA,OAAO,KAAP,iBAAA;AACA,OAAA,SAAA;;AAEA,IAAMA,2BAA2B,GAA3BA,SAAAA,2BAAAA,CAA8B,KAA9BA,EAAuC;EAC3C,OAAO;IACLC,MAAM,EAAE,SAAA,MAAA,CAAA,GAAA,EAAO;MACb,IAAIC,aAAa,GAAjB,GAAA;;MACA,IAAIC,GAAG,KAAHA,SAAAA,IAAqBC,KAAK,CAA9B,GAAA,EAAoC;QAClCC,SAAS,CAAC,OAAOD,KAAK,CAAZ,GAAA,KAAD,QAAA,EAATC,wBAAS,CAATA;QACAH,aAAa,GAAGE,KAAK,CAArBF,GAAAA;MAEF;;MAAA,OAAOI,iBAAiB,CAAjBA,IAAAA,CAAuB;QAAEH,GAAG,EAAnC;MAA8B,CAAvBG,CAAP;IAPG,CAAA;IASLC,QAAQ,EAAE,SAAA,QAAA,CAAA,UAAA,EAAA,MAAA,EAAA,MAAA,EAAgC;MACxC,IAAI,OAAA,UAAA,KAAJ,QAAA,EAAoC;QAClC,OAAOD,iBAAiB,CAAjBA,QAAAA,CAA2B;UAChCE,SAAS,EADuB,UAAA;UAEhCC,MAAM,EAF0B,MAAA;UAGhCC,MAAM,EAHR;QAAkC,CAA3BJ,CAAP;MAMFD;;MAAAA,SAAS,CACP,OAAA,UAAA,KADO,QAAA,EAATA,uCAAS,CAATA;MAIAA,SAAS,CACPI,MAAM,IADC,IAAA,EAATJ,sEAAS,CAATA;MAIAA,SAAS,CACPK,MAAM,IADC,IAAA,EAATL,4EAAS,CAATA;MAIA,OAAOC,iBAAiB,CAAjBA,QAAAA,CAAP,UAAOA,CAAP;IA7BG,CAAA;IA+BLK,SAAS,EAAE,SAAA,SAAA,CAAA,MAAA,EAAU;MACnBN,SAAS,CACPD,KAAK,CAALA,GAAAA,IAAa,OAAOA,KAAK,CAAZ,GAAA,KADN,QAAA,EAATC,8CAAS,CAATA;MAIA,OAAOC,iBAAiB,CAAjBA,SAAAA,CAA4B;QAAEG,MAAM,EAAR,MAAA;QAAUN,GAAG,EAAEC,KAAK,CAAvD;MAAmC,CAA5BE,CAAP;IApCJ;EAAO,CAAP;AADF,CAAA;;AA0CA,eAAA,2BAAA","sourcesContent":["import * as NavigationActions from '../NavigationActions';\nimport invariant from '../utils/invariant';\n\nconst getNavigationActionCreators = route => {\n  return {\n    goBack: key => {\n      let actualizedKey = key;\n      if (key === undefined && route.key) {\n        invariant(typeof route.key === 'string', 'key should be a string');\n        actualizedKey = route.key;\n      }\n      return NavigationActions.back({ key: actualizedKey });\n    },\n    navigate: (navigateTo, params, action) => {\n      if (typeof navigateTo === 'string') {\n        return NavigationActions.navigate({\n          routeName: navigateTo,\n          params,\n          action,\n        });\n      }\n      invariant(\n        typeof navigateTo === 'object',\n        'Must navigateTo an object or a string'\n      );\n      invariant(\n        params == null,\n        'Params must not be provided to .navigate() when specifying an object'\n      );\n      invariant(\n        action == null,\n        'Child action must not be provided to .navigate() when specifying an object'\n      );\n      return NavigationActions.navigate(navigateTo);\n    },\n    setParams: params => {\n      invariant(\n        route.key && typeof route.key === 'string',\n        'setParams cannot be called by root navigator'\n      );\n      return NavigationActions.setParams({ params, key: route.key });\n    },\n  };\n};\n\nexport default getNavigationActionCreators;\n"]},"metadata":{},"sourceType":"module"}