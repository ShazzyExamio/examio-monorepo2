{"ast":null,"code":"import _objectSpread from \"@babel/runtime/helpers/objectSpread\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nvar _jsxFileName = \"/Users/trensik/dev/react-native-paper/src/components/Modal.tsx\";\nimport * as React from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport BackHandler from \"react-native-web/dist/exports/BackHandler\";\nimport Easing from \"react-native-web/dist/exports/Easing\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TouchableWithoutFeedback from \"react-native-web/dist/exports/TouchableWithoutFeedback\";\nimport SafeAreaView from 'react-native-safe-area-view';\nimport Surface from \"./Surface\";\nimport { withTheme } from \"../core/theming\";\n\nvar Modal = function (_React$Component) {\n  _inherits(Modal, _React$Component);\n\n  function Modal() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Modal);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Modal)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      opacity: new Animated.Value(_this.props.visible ? 1 : 0),\n      rendered: _this.props.visible\n    };\n\n    _this._handleBack = function () {\n      if (_this.props.dismissable) {\n        _this._hideModal();\n      }\n\n      return true;\n    };\n\n    _this._showModal = function () {\n      var scale = _this.props.theme.animation.scale;\n      BackHandler.removeEventListener('hardwareBackPress', _this._handleBack);\n      BackHandler.addEventListener('hardwareBackPress', _this._handleBack);\n      Animated.timing(_this.state.opacity, {\n        toValue: 1,\n        duration: scale * 280,\n        easing: Easing.ease,\n        useNativeDriver: true\n      }).start();\n    };\n\n    _this._hideModal = function () {\n      var scale = _this.props.theme.animation.scale;\n      BackHandler.removeEventListener('hardwareBackPress', _this._handleBack);\n      Animated.timing(_this.state.opacity, {\n        toValue: 0,\n        duration: scale * 280,\n        easing: Easing.ease,\n        useNativeDriver: true\n      }).start(function (_ref) {\n        var finished = _ref.finished;\n\n        if (!finished) {\n          return;\n        }\n\n        if (_this.props.visible && _this.props.onDismiss) {\n          _this.props.onDismiss();\n        }\n\n        if (_this.props.visible) {\n          _this._showModal();\n        } else {\n          _this.setState({\n            rendered: false\n          });\n        }\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(Modal, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      if (prevProps.visible !== this.props.visible) {\n        if (this.props.visible) {\n          this._showModal();\n        } else {\n          this._hideModal();\n        }\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      BackHandler.removeEventListener('hardwareBackPress', this._handleBack);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      if (!this.state.rendered) return null;\n      var _this$props = this.props,\n          children = _this$props.children,\n          dismissable = _this$props.dismissable,\n          theme = _this$props.theme,\n          contentContainerStyle = _this$props.contentContainerStyle;\n      var colors = theme.colors;\n      return React.createElement(Animated.View, {\n        pointerEvents: this.props.visible ? 'auto' : 'none',\n        accessibilityViewIsModal: true,\n        accessibilityLiveRegion: \"polite\",\n        style: StyleSheet.absoluteFill,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 182\n        }\n      }, React.createElement(TouchableWithoutFeedback, {\n        onPress: dismissable ? this._hideModal : undefined,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 188\n        }\n      }, React.createElement(Animated.View, {\n        style: [styles.backdrop, {\n          backgroundColor: colors.backdrop,\n          opacity: this.state.opacity\n        }],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 191\n        }\n      })), React.createElement(SafeAreaView, {\n        style: styles.wrapper,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 198\n        }\n      }, React.createElement(Surface, {\n        style: [{\n          opacity: this.state.opacity\n        }, styles.content, contentContainerStyle],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 199\n        }\n      }, children)));\n    }\n  }], [{\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(nextProps, prevState) {\n      if (nextProps.visible && !prevState.rendered) {\n        return {\n          rendered: true\n        };\n      }\n\n      return null;\n    }\n  }]);\n\n  return Modal;\n}(React.Component);\n\nModal.defaultProps = {\n  dismissable: true,\n  visible: false\n};\nexport default withTheme(Modal);\nvar styles = StyleSheet.create({\n  backdrop: {\n    flex: 1\n  },\n  wrapper: _objectSpread({}, StyleSheet.absoluteFillObject, {\n    justifyContent: 'center'\n  }),\n  content: {\n    backgroundColor: 'transparent',\n    justifyContent: 'center'\n  }\n});","map":{"version":3,"sources":["Modal.tsx"],"names":["Modal","React","Component","defaultProps","dismissable","visible","nextProps","prevState","rendered","state","opacity","Animated","prevProps","_handleBack","_showModal","scale","BackHandler","toValue","duration","easing","Easing","useNativeDriver","_hideModal","finished","children","theme","contentContainerStyle","colors","StyleSheet","styles","backgroundColor","withTheme","backdrop","flex","wrapper","justifyContent","content"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  Animated,\n  BackHandler,\n  Easing,\n  StyleProp,\n  StyleSheet,\n  TouchableWithoutFeedback,\n  ViewStyle,\n} from 'react-native';\nimport SafeAreaView from 'react-native-safe-area-view';\nimport Surface from './Surface';\nimport { withTheme } from '../core/theming';\nimport { Theme } from '../types';\n\ntype Props = {\n  /**\n   * Determines whether clicking outside the modal dismiss it.\n   */\n  dismissable?: boolean;\n  /**\n   * Callback that is called when the user dismisses the modal.\n   */\n  onDismiss?: () => void;\n  /**\n   * Determines Whether the modal is visible.\n   */\n  visible: boolean;\n  /**\n   * Content of the `Modal`.\n   */\n  children: React.ReactNode;\n  /**\n   * Style for the content of the modal\n   */\n  contentContainerStyle?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme: Theme;\n};\n\ntype State = {\n  opacity: Animated.Value;\n  rendered: boolean;\n};\n\n/**\n * The Modal component is a simple way to present content above an enclosing view.\n * To render the `Modal` above other components, you'll need to wrap it with the [`Portal`](portal.html) component.\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Modal, Portal, Text, Button, Provider } from 'react-native-paper';\n *\n * export default class MyComponent extends React.Component {\n *   state = {\n *     visible: false,\n *   };\n *\n *   _showModal = () => this.setState({ visible: true });\n *   _hideModal = () => this.setState({ visible: false });\n *\n *   render() {\n *     const { visible } = this.state;\n *     return (\n *       <Provider>\n *          <Portal>\n *            <Modal visible={visible} onDismiss={this._hideModal}>\n *              <Text>Example Modal</Text>\n *            </Modal>\n *            <Button\n *              style={{ marginTop: 30 }}\n *              onPress={this._showModal}\n *            >\n *              Show\n *            </Button>\n *          </Portal>\n *       </Provider>\n *     );\n *   }\n * }\n * ```\n */\n\nclass Modal extends React.Component<Props, State> {\n  static defaultProps = {\n    dismissable: true,\n    visible: false,\n  };\n\n  static getDerivedStateFromProps(nextProps: Props, prevState: State) {\n    if (nextProps.visible && !prevState.rendered) {\n      return {\n        rendered: true,\n      };\n    }\n\n    return null;\n  }\n\n  state = {\n    opacity: new Animated.Value(this.props.visible ? 1 : 0),\n    rendered: this.props.visible,\n  };\n\n  componentDidUpdate(prevProps: Props) {\n    if (prevProps.visible !== this.props.visible) {\n      if (this.props.visible) {\n        this._showModal();\n      } else {\n        this._hideModal();\n      }\n    }\n  }\n\n  _handleBack = () => {\n    if (this.props.dismissable) {\n      this._hideModal();\n    }\n    return true;\n  };\n\n  _showModal = () => {\n    const {\n      theme: {\n        animation: { scale },\n      },\n    } = this.props;\n\n    BackHandler.removeEventListener('hardwareBackPress', this._handleBack);\n    BackHandler.addEventListener('hardwareBackPress', this._handleBack);\n    Animated.timing(this.state.opacity, {\n      toValue: 1,\n      duration: scale * 280,\n      easing: Easing.ease,\n      useNativeDriver: true,\n    }).start();\n  };\n\n  _hideModal = () => {\n    const {\n      theme: {\n        animation: { scale },\n      },\n    } = this.props;\n\n    BackHandler.removeEventListener('hardwareBackPress', this._handleBack);\n    Animated.timing(this.state.opacity, {\n      toValue: 0,\n      duration: scale * 280,\n      easing: Easing.ease,\n      useNativeDriver: true,\n    }).start(({ finished }) => {\n      if (!finished) {\n        return;\n      }\n      if (this.props.visible && this.props.onDismiss) {\n        this.props.onDismiss();\n      }\n      if (this.props.visible) {\n        this._showModal();\n      } else {\n        this.setState({\n          rendered: false,\n        });\n      }\n    });\n  };\n\n  componentWillUnmount() {\n    BackHandler.removeEventListener('hardwareBackPress', this._handleBack);\n  }\n\n  render() {\n    if (!this.state.rendered) return null;\n\n    const { children, dismissable, theme, contentContainerStyle } = this.props;\n    const { colors } = theme;\n    return (\n      <Animated.View\n        pointerEvents={this.props.visible ? 'auto' : 'none'}\n        accessibilityViewIsModal\n        accessibilityLiveRegion=\"polite\"\n        style={StyleSheet.absoluteFill}\n      >\n        <TouchableWithoutFeedback\n          onPress={dismissable ? this._hideModal : undefined}\n        >\n          <Animated.View\n            style={[\n              styles.backdrop,\n              { backgroundColor: colors.backdrop, opacity: this.state.opacity },\n            ]}\n          />\n        </TouchableWithoutFeedback>\n        <SafeAreaView style={styles.wrapper}>\n          <Surface\n            style={\n              [\n                { opacity: this.state.opacity },\n                styles.content,\n                contentContainerStyle,\n              ] as StyleProp<ViewStyle>\n            }\n          >\n            {children}\n          </Surface>\n        </SafeAreaView>\n      </Animated.View>\n    );\n  }\n}\n\nexport default withTheme(Modal);\n\nconst styles = StyleSheet.create({\n  backdrop: {\n    flex: 1,\n  },\n  wrapper: {\n    ...StyleSheet.absoluteFillObject,\n    justifyContent: 'center',\n  },\n  content: {\n    backgroundColor: 'transparent',\n    justifyContent: 'center',\n  },\n});\n"]},"metadata":{},"sourceType":"module"}