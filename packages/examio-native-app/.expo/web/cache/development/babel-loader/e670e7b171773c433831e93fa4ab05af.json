{"ast":null,"code":"import _objectSpread from \"@babel/runtime/helpers/objectSpread\";\nvar _jsxFileName = \"/Users/trensik/dev/react-native-paper/src/components/TextInput/Label/InputLabel.tsx\";\nimport React from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport AnimatedText from \"../../Typography/AnimatedText\";\n\nvar InputLabel = function InputLabel(props) {\n  var parentState = props.parentState,\n      labelBackground = props.labelBackground;\n  var _props$labelProps = props.labelProps,\n      label = _props$labelProps.label,\n      error = _props$labelProps.error,\n      onLayoutAnimatedText = _props$labelProps.onLayoutAnimatedText,\n      hasActiveOutline = _props$labelProps.hasActiveOutline,\n      activeColor = _props$labelProps.activeColor,\n      placeholderStyle = _props$labelProps.placeholderStyle,\n      baseLabelTranslateX = _props$labelProps.baseLabelTranslateX,\n      baseLabelTranslateY = _props$labelProps.baseLabelTranslateY,\n      font = _props$labelProps.font,\n      fontSize = _props$labelProps.fontSize,\n      fontWeight = _props$labelProps.fontWeight,\n      placeholderOpacity = _props$labelProps.placeholderOpacity,\n      wiggleOffsetX = _props$labelProps.wiggleOffsetX,\n      labelScale = _props$labelProps.labelScale,\n      topPosition = _props$labelProps.topPosition,\n      paddingOffset = _props$labelProps.paddingOffset,\n      placeholderColor = _props$labelProps.placeholderColor;\n  var labelTranslationX = {\n    transform: [{\n      translateX: parentState.labeled.interpolate({\n        inputRange: [0, 1],\n        outputRange: [baseLabelTranslateX, 0]\n      })\n    }]\n  };\n\n  var labelStyle = _objectSpread({}, font, {\n    fontSize: fontSize,\n    fontWeight: fontWeight,\n    transform: [{\n      translateX: parentState.error.interpolate({\n        inputRange: [0, 0.5, 1],\n        outputRange: [0, parentState.value && error ? wiggleOffsetX : 0, 0]\n      })\n    }, {\n      translateY: parentState.labeled.interpolate({\n        inputRange: [0, 1],\n        outputRange: [baseLabelTranslateY, 0]\n      })\n    }, {\n      scale: parentState.labeled.interpolate({\n        inputRange: [0, 1],\n        outputRange: [labelScale, 1]\n      })\n    }]\n  });\n\n  return label ? React.createElement(Animated.View, {\n    pointerEvents: \"none\",\n    style: [StyleSheet.absoluteFill, {\n      opacity: parentState.value || parentState.focused ? parentState.labelLayout.measured ? 1 : 0 : 1\n    }, labelTranslationX],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74\n    }\n  }, labelBackground && labelBackground({\n    parentState: parentState,\n    labelStyle: labelStyle,\n    labelProps: props.labelProps\n  }), React.createElement(AnimatedText, {\n    onLayout: onLayoutAnimatedText,\n    style: [placeholderStyle, {\n      top: topPosition\n    }, labelStyle, paddingOffset || {}, {\n      color: activeColor,\n      opacity: parentState.labeled.interpolate({\n        inputRange: [0, 1],\n        outputRange: [hasActiveOutline ? 1 : 0, 0]\n      })\n    }],\n    numberOfLines: 1,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96\n    }\n  }, label), React.createElement(AnimatedText, {\n    style: [placeholderStyle, {\n      top: topPosition\n    }, labelStyle, paddingOffset, {\n      color: placeholderColor,\n      opacity: placeholderOpacity\n    }],\n    numberOfLines: 1,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117\n    }\n  }, label)) : null;\n};\n\nexport default InputLabel;","map":{"version":3,"sources":["InputLabel.tsx"],"names":["InputLabel","parentState","labelBackground","props","label","error","onLayoutAnimatedText","hasActiveOutline","activeColor","placeholderStyle","baseLabelTranslateX","baseLabelTranslateY","font","fontSize","fontWeight","placeholderOpacity","wiggleOffsetX","labelScale","topPosition","paddingOffset","placeholderColor","labelTranslationX","transform","translateX","inputRange","outputRange","labelStyle","translateY","scale","StyleSheet","opacity","labelProps","top","color"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Animated, StyleSheet } from 'react-native';\nimport AnimatedText from '../../Typography/AnimatedText';\n\nimport { InputLabelProps } from '../types';\n\nconst InputLabel = (props: InputLabelProps) => {\n  const { parentState, labelBackground } = props;\n\n  const {\n    label,\n    error,\n    onLayoutAnimatedText,\n    hasActiveOutline,\n    activeColor,\n    placeholderStyle,\n    baseLabelTranslateX,\n    baseLabelTranslateY,\n    font,\n    fontSize,\n    fontWeight,\n    placeholderOpacity,\n    wiggleOffsetX,\n    labelScale,\n    topPosition,\n    paddingOffset,\n    placeholderColor,\n  } = props.labelProps;\n\n  const labelTranslationX = {\n    transform: [\n      {\n        // Offset label scale since RN doesn't support transform origin\n        translateX: parentState.labeled.interpolate({\n          inputRange: [0, 1],\n          outputRange: [baseLabelTranslateX, 0],\n        }),\n      },\n    ],\n  };\n\n  const labelStyle = {\n    ...font,\n    fontSize,\n    fontWeight,\n    transform: [\n      {\n        // Wiggle the label when there's an error\n        translateX: parentState.error.interpolate({\n          inputRange: [0, 0.5, 1],\n          outputRange: [0, parentState.value && error ? wiggleOffsetX : 0, 0],\n        }),\n      },\n      {\n        // Move label to top\n        translateY: parentState.labeled.interpolate({\n          inputRange: [0, 1],\n          outputRange: [baseLabelTranslateY, 0],\n        }),\n      },\n      {\n        // Make label smaller\n        scale: parentState.labeled.interpolate({\n          inputRange: [0, 1],\n          outputRange: [labelScale, 1],\n        }),\n      },\n    ],\n  };\n\n  return label ? (\n    // Position colored placeholder and gray placeholder on top of each other and crossfade them\n    // This gives the effect of animating the color, but allows us to use native driver\n    <Animated.View\n      pointerEvents=\"none\"\n      style={[\n        StyleSheet.absoluteFill,\n        {\n          opacity:\n            // Hide the label in minimized state until we measure it's width\n            parentState.value || parentState.focused\n              ? parentState.labelLayout.measured\n                ? 1\n                : 0\n              : 1,\n        },\n        labelTranslationX,\n      ]}\n    >\n      {labelBackground &&\n        labelBackground({\n          parentState,\n          labelStyle,\n          labelProps: props.labelProps,\n        })}\n      <AnimatedText\n        onLayout={onLayoutAnimatedText}\n        style={[\n          placeholderStyle,\n          {\n            top: topPosition,\n          },\n          labelStyle,\n          paddingOffset || {},\n          {\n            color: activeColor,\n            opacity: parentState.labeled.interpolate({\n              inputRange: [0, 1],\n              outputRange: [hasActiveOutline ? 1 : 0, 0],\n            }),\n          },\n        ]}\n        numberOfLines={1}\n      >\n        {label}\n      </AnimatedText>\n      <AnimatedText\n        style={[\n          placeholderStyle,\n          {\n            top: topPosition,\n          },\n          labelStyle,\n          paddingOffset,\n          {\n            color: placeholderColor,\n            opacity: placeholderOpacity,\n          },\n        ]}\n        numberOfLines={1}\n      >\n        {label}\n      </AnimatedText>\n    </Animated.View>\n  ) : null;\n};\n\nexport default InputLabel;\n"]},"metadata":{},"sourceType":"module"}