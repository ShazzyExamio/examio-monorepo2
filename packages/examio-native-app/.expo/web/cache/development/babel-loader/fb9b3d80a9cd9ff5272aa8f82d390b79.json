{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nvar _jsxFileName = \"/Users/trensik/dev/react-native-paper/src/components/ProgressBar.tsx\";\nimport * as React from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport setColor from 'color';\nimport { withTheme } from \"../core/theming\";\nvar INDETERMINATE_DURATION = 2000;\nvar INDETERMINATE_MAX_WIDTH = 0.6;\n\nvar ProgressBar = function (_React$Component) {\n  _inherits(ProgressBar, _React$Component);\n\n  function ProgressBar() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, ProgressBar);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(ProgressBar)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      width: 0,\n      timer: new Animated.Value(0),\n      fade: new Animated.Value(0)\n    };\n    _this.indeterminateAnimation = null;\n\n    _this._onLayout = function (event) {\n      var visible = _this.props.visible;\n      var previousWidth = _this.state.width;\n\n      _this.setState({\n        width: event.nativeEvent.layout.width\n      }, function () {\n        if (visible && previousWidth === 0) {\n          _this._startAnimation();\n        }\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(ProgressBar, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      var _this$props = this.props,\n          visible = _this$props.visible,\n          progress = _this$props.progress;\n\n      if (progress !== prevProps.progress || visible !== prevProps.visible) {\n        if (visible) {\n          this._startAnimation();\n        } else {\n          this._stopAnimation();\n        }\n      }\n    }\n  }, {\n    key: \"_startAnimation\",\n    value: function _startAnimation() {\n      var _this$props2 = this.props,\n          indeterminate = _this$props2.indeterminate,\n          progress = _this$props2.progress;\n      var _this$state = this.state,\n          fade = _this$state.fade,\n          timer = _this$state.timer;\n      Animated.timing(fade, {\n        duration: 200,\n        toValue: 1,\n        useNativeDriver: true,\n        isInteraction: false\n      }).start();\n\n      if (indeterminate) {\n        if (!this.indeterminateAnimation) {\n          this.indeterminateAnimation = Animated.timing(timer, {\n            duration: INDETERMINATE_DURATION,\n            toValue: 1,\n            useNativeDriver: Platform.OS !== 'web',\n            isInteraction: false\n          });\n        }\n\n        timer.setValue(0);\n        Animated.loop(this.indeterminateAnimation).start();\n      } else {\n        Animated.timing(timer, {\n          duration: 200,\n          toValue: progress ? progress : 0,\n          useNativeDriver: true,\n          isInteraction: false\n        }).start();\n      }\n    }\n  }, {\n    key: \"_stopAnimation\",\n    value: function _stopAnimation() {\n      var fade = this.state.fade;\n\n      if (this.indeterminateAnimation) {\n        this.indeterminateAnimation.stop();\n      }\n\n      Animated.timing(fade, {\n        duration: 200,\n        toValue: 0,\n        useNativeDriver: true,\n        isInteraction: false\n      }).start();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props3 = this.props,\n          color = _this$props3.color,\n          indeterminate = _this$props3.indeterminate,\n          style = _this$props3.style,\n          theme = _this$props3.theme;\n      var _this$state2 = this.state,\n          fade = _this$state2.fade,\n          timer = _this$state2.timer,\n          width = _this$state2.width;\n      var tintColor = color || theme.colors.primary;\n      var trackTintColor = setColor(tintColor).alpha(0.38).rgb().string();\n      return React.createElement(View, {\n        onLayout: this._onLayout,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 169\n        }\n      }, React.createElement(Animated.View, {\n        style: [styles.container, {\n          backgroundColor: trackTintColor,\n          opacity: fade\n        }, style],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 170\n        }\n      }, React.createElement(Animated.View, {\n        style: [styles.progressBar, {\n          backgroundColor: tintColor,\n          width: width,\n          transform: [{\n            translateX: timer.interpolate(indeterminate ? {\n              inputRange: [0, 0.5, 1],\n              outputRange: [-0.5 * width, -0.5 * INDETERMINATE_MAX_WIDTH * width, 0.7 * width]\n            } : {\n              inputRange: [0, 1],\n              outputRange: [-0.5 * width, 0]\n            })\n          }, {\n            scaleX: timer.interpolate(indeterminate ? {\n              inputRange: [0, 0.5, 1],\n              outputRange: [0.0001, INDETERMINATE_MAX_WIDTH, 0.0001]\n            } : {\n              inputRange: [0, 1],\n              outputRange: [0.0001, 1]\n            })\n          }]\n        }],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 177\n        }\n      })));\n    }\n  }]);\n\n  return ProgressBar;\n}(React.Component);\n\nProgressBar.defaultProps = {\n  visible: true,\n  progress: 0\n};\nvar styles = StyleSheet.create({\n  container: {\n    height: 4,\n    overflow: 'hidden'\n  },\n  progressBar: {\n    flex: 1\n  }\n});\nexport default withTheme(ProgressBar);","map":{"version":3,"sources":["ProgressBar.tsx"],"names":["INDETERMINATE_DURATION","INDETERMINATE_MAX_WIDTH","ProgressBar","React","Component","defaultProps","visible","progress","state","width","timer","Animated","fade","indeterminateAnimation","prevProps","_onLayout","previousWidth","event","indeterminate","duration","toValue","useNativeDriver","isInteraction","Platform","color","style","theme","tintColor","trackTintColor","setColor","styles","backgroundColor","opacity","transform","translateX","inputRange","outputRange","scaleX","StyleSheet","container","height","overflow","progressBar","flex","withTheme"],"mappings":";;;;;;AAAA,OAAO,KAAP,KAAA,MAAA,OAAA;;;;;AAUA,OAAA,QAAA,MAAA,OAAA;AACA,SAAA,SAAA;AAiCA,IAAMA,sBAAsB,GAA5B,IAAA;AACA,IAAMC,uBAAuB,GAA7B,GAAA;;AAqBMC,IAAAA,W;;;;;;;;;;;;;;;UAMJM,K,GAAQ;MACNC,KAAK,EADC,CAAA;MAENC,KAAK,EAAE,IAAIC,QAAQ,CAAZ,KAAA,CAFD,CAEC,CAFD;MAGNC,IAAI,EAAE,IAAID,QAAQ,CAAZ,KAAA,CAHA,CAGA;IAHA,C;UAMRE,sB,GAA6D,I;;UAc7DE,S,GAAY,UAAA,KAAA,EAA8B;MAAA,IAChCT,OADgC,GACpB,KAAA,CADoB,KACpB,CADoB,OAAA;MAAA,IAEzBU,aAFyB,GAEP,KAAA,CAFO,KAEP,CAFO,KAAA;;MAIxC,KAAA,CAAA,QAAA,CAAc;QAAEP,KAAK,EAAEQ,KAAK,CAALA,WAAAA,CAAAA,MAAAA,CAAvB;MAAc,CAAd,EAAyD,YAAM;QAE7D,IAAIX,OAAO,IAAIU,aAAa,KAA5B,CAAA,EAAoC;UAClC,KAAA,CAAA,eAAA;QAEH;MALD,CAAA;;;;;;;;uCAhBiBF,S,EAAkB;MAAA,IAAA,WAAA,GACL,KADK,KAAA;MAAA,IAC3BR,OAD2B,GAAA,WAAA,CAAA,OAAA;MAAA,IAClBC,QADkB,GAAA,WAAA,CAAA,QAAA;;MAGnC,IAAIA,QAAQ,KAAKO,SAAS,CAAtBP,QAAAA,IAAmCD,OAAO,KAAKQ,SAAS,CAA5D,OAAA,EAAsE;QACpE,IAAA,OAAA,EAAa;UACX,KAAA,eAAA;QADF,CAAA,MAEO;UACL,KAAA,cAAA;QAEH;MACF;;;;sCAciB;MAAA,IAAA,YAAA,GACoB,KADpB,KAAA;MAAA,IACRI,aADQ,GAAA,YAAA,CAAA,aAAA;MAAA,IACOX,QADP,GAAA,YAAA,CAAA,QAAA;MAAA,IAAA,WAAA,GAEQ,KAFR,KAAA;MAAA,IAERK,IAFQ,GAAA,WAAA,CAAA,IAAA;MAAA,IAEFF,KAFE,GAAA,WAAA,CAAA,KAAA;MAKhBC,QAAQ,CAARA,MAAAA,CAAAA,IAAAA,EAAsB;QACpBQ,QAAQ,EADY,GAAA;QAEpBC,OAAO,EAFa,CAAA;QAGpBC,eAAe,EAHK,IAAA;QAIpBC,aAAa,EAJfX;MAAsB,CAAtBA,EAAAA,KAAAA;;MAQA,IAAA,aAAA,EAAmB;QACjB,IAAI,CAAC,KAAL,sBAAA,EAAkC;UAChC,KAAA,sBAAA,GAA8BA,QAAQ,CAARA,MAAAA,CAAAA,KAAAA,EAAuB;YACnDQ,QAAQ,EAD2C,sBAAA;YAEnDC,OAAO,EAF4C,CAAA;YAInDC,eAAe,EAAEE,QAAQ,CAARA,EAAAA,KAJkC,KAAA;YAKnDD,aAAa,EALf;UAAqD,CAAvBX,CAA9B;QAUFD;;QAAAA,KAAK,CAALA,QAAAA,CAAAA,CAAAA;QAEAC,QAAQ,CAARA,IAAAA,CAAc,KAAdA,sBAAAA,EAAAA,KAAAA;MAdF,CAAA,MAeO;QACLA,QAAQ,CAARA,MAAAA,CAAAA,KAAAA,EAAuB;UACrBQ,QAAQ,EADa,GAAA;UAErBC,OAAO,EAAEb,QAAQ,GAAA,QAAA,GAFI,CAAA;UAGrBc,eAAe,EAHM,IAAA;UAIrBC,aAAa,EAJfX;QAAuB,CAAvBA,EAAAA,KAAAA;MAOH;;;;qCAEgB;MAAA,IACPC,IADO,GACE,KADF,KACE,CADF,IAAA;;MAIf,IAAI,KAAJ,sBAAA,EAAiC;QAC/B,KAAA,sBAAA,CAAA,IAAA;MAGFD;;MAAAA,QAAQ,CAARA,MAAAA,CAAAA,IAAAA,EAAsB;QACpBQ,QAAQ,EADY,GAAA;QAEpBC,OAAO,EAFa,CAAA;QAGpBC,eAAe,EAHK,IAAA;QAIpBC,aAAa,EAJfX;MAAsB,CAAtBA,EAAAA,KAAAA;;;;6BAQO;MAAA,IAAA,YAAA,GACwC,KADxC,KAAA;MAAA,IACCa,KADD,GAAA,YAAA,CAAA,KAAA;MAAA,IACQN,aADR,GAAA,YAAA,CAAA,aAAA;MAAA,IACuBO,KADvB,GAAA,YAAA,CAAA,KAAA;MAAA,IAC8BC,KAD9B,GAAA,YAAA,CAAA,KAAA;MAAA,IAAA,YAAA,GAEwB,KAFxB,KAAA;MAAA,IAECd,IAFD,GAAA,YAAA,CAAA,IAAA;MAAA,IAEOF,KAFP,GAAA,YAAA,CAAA,KAAA;MAAA,IAEcD,KAFd,GAAA,YAAA,CAAA,KAAA;MAGP,IAAMkB,SAAS,GAAGH,KAAK,IAAIE,KAAK,CAALA,MAAAA,CAA3B,OAAA;MACA,IAAME,cAAc,GAAGC,QAAQ,CAARA,SAAQ,CAARA,CAAAA,KAAAA,CAAAA,IAAAA,EAAAA,GAAAA,GAAvB,MAAuBA,EAAvB;MAKA,OACE,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA;QAAM,QAAQ,EAAE,KAAhB,SAAA;QAAA,QAAA,EAAA;UAAA,QAAA,EAAA,YAAA;UAAA,UAAA,EAAA;QAAA;MAAA,CAAA,EACE,KAAA,CAAA,aAAA,CAAC,QAAD,CAAA,IAAA,EAAA;QACE,KAAK,EAAE,CACLC,MAAM,CADD,SAAA,EAEL;UAAEC,eAAe,EAAjB,cAAA;UAAmCC,OAAO,EAFrC;QAEL,CAFK,EADT,KACS,CADT;QAAA,QAAA,EAAA;UAAA,QAAA,EAAA,YAAA;UAAA,UAAA,EAAA;QAAA;MAAA,CAAA,EAOE,KAAA,CAAA,aAAA,CAAC,QAAD,CAAA,IAAA,EAAA;QACE,KAAK,EAAE,CACLF,MAAM,CADD,WAAA,EAEL;UACEC,eAAe,EADjB,SAAA;UAEEtB,KAAK,EAFP,KAAA;UAGEwB,SAAS,EAAE,CACT;YACEC,UAAU,EAAExB,KAAK,CAALA,WAAAA,CACVQ,aAAa,GACT;cACEiB,UAAU,EAAE,CAAA,CAAA,EAAA,GAAA,EADd,CACc,CADd;cAEEC,WAAW,EAAE,CACX,CAAA,GAAA,GADW,KAAA,EAEX,CAAA,GAAA,GAAA,uBAAA,GAFW,KAAA,EAGX,MANK,KAGM;YAFf,CADS,GAST;cACED,UAAU,EAAE,CAAA,CAAA,EADd,CACc,CADd;cAEEC,WAAW,EAAE,CAAC,CAAA,GAAA,GAAD,KAAA,EAdd,CAcc;YAFf,CAVM1B;UADd,CADS,EAkBT;YAEE2B,MAAM,EAAE3B,KAAK,CAALA,WAAAA,CACNQ,aAAa,GACT;cACEiB,UAAU,EAAE,CAAA,CAAA,EAAA,GAAA,EADd,CACc,CADd;cAEEC,WAAW,EAAE,CAAA,MAAA,EAAA,uBAAA,EAHN,MAGM;YAFf,CADS,GAST;cACED,UAAU,EAAE,CAAA,CAAA,EADd,CACc,CADd;cAEEC,WAAW,EAAE,CAAA,MAAA,EAtC/B,CAsC+B;YAFf,CAVE1B;UAFV,CAlBS;QAHb,CAFK,CADT;QAAA,QAAA,EAAA;UAAA,QAAA,EAAA,YAAA;UAAA,UAAA,EATN;QASM;MAAA,CAAA,CAPF,CADF,CADF;;;;;EArGsBP,KAAK,CAACC,S,CAA1BF;;AAAAA,W,CACGG,YADHH,GACkB;EACpBI,OAAO,EADa,IAAA;EAEpBC,QAAQ,EAFY;AAAA,CADlBL;AAkKN,IAAM4B,MAAM,GAAGQ,UAAU,CAAVA,MAAAA,CAAkB;EAC/BC,SAAS,EAAE;IACTC,MAAM,EADG,CAAA;IAETC,QAAQ,EAHqB;EACpB,CADoB;EAM/BC,WAAW,EAAE;IACXC,IAAI,EAPR;EAMe;AANkB,CAAlBL,CAAf;AAWA,eAAeM,SAAS,CAAxB,WAAwB,CAAxB","sourcesContent":["import * as React from 'react';\nimport {\n  Animated,\n  Platform,\n  StyleSheet,\n  View,\n  ViewStyle,\n  StyleProp,\n  LayoutChangeEvent,\n} from 'react-native';\nimport setColor from 'color';\nimport { withTheme } from '../core/theming';\nimport { Theme } from '../types';\n\ntype Props = {\n  /**\n   * Progress value (between 0 and 1).\n   */\n  progress?: number;\n  /**\n   * Color of the progress bar. The background color will be calculated based on this but you can change it by passing `backgroundColor` to `style` prop.\n   */\n  color?: string;\n  /**\n   * If the progress bar will show indeterminate progress.\n   */\n  indeterminate?: boolean;\n  /**\n   * Whether to show the ProgressBar (true, the default) or hide it (false).\n   */\n  visible?: boolean;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme: Theme;\n};\n\ntype State = {\n  width: number;\n  fade: Animated.Value;\n  timer: Animated.Value;\n};\n\nconst INDETERMINATE_DURATION = 2000;\nconst INDETERMINATE_MAX_WIDTH = 0.6;\n\n/**\n * Progress bar is an indicator used to present progress of some activity in the app.\n *\n * <div class=\"screenshots\">\n *   <img src=\"screenshots/progress-bar.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { ProgressBar, Colors } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <ProgressBar progress={0.5} color={Colors.red800} />\n * );\n *\n * export default MyComponent;\n * ```\n */\nclass ProgressBar extends React.Component<Props, State> {\n  static defaultProps = {\n    visible: true,\n    progress: 0,\n  };\n\n  state = {\n    width: 0,\n    timer: new Animated.Value(0),\n    fade: new Animated.Value(0),\n  };\n\n  indeterminateAnimation: Animated.CompositeAnimation | null = null;\n\n  componentDidUpdate(prevProps: Props) {\n    const { visible, progress } = this.props;\n\n    if (progress !== prevProps.progress || visible !== prevProps.visible) {\n      if (visible) {\n        this._startAnimation();\n      } else {\n        this._stopAnimation();\n      }\n    }\n  }\n\n  _onLayout = (event: LayoutChangeEvent) => {\n    const { visible } = this.props;\n    const { width: previousWidth } = this.state;\n\n    this.setState({ width: event.nativeEvent.layout.width }, () => {\n      // Start animation the very first time when previously the width was unclear\n      if (visible && previousWidth === 0) {\n        this._startAnimation();\n      }\n    });\n  };\n\n  _startAnimation() {\n    const { indeterminate, progress } = this.props;\n    const { fade, timer } = this.state;\n\n    // Show progress bar\n    Animated.timing(fade, {\n      duration: 200,\n      toValue: 1,\n      useNativeDriver: true,\n      isInteraction: false,\n    }).start();\n\n    // Animate progress bar\n    if (indeterminate) {\n      if (!this.indeterminateAnimation) {\n        this.indeterminateAnimation = Animated.timing(timer, {\n          duration: INDETERMINATE_DURATION,\n          toValue: 1,\n          // Animated.loop does not work if useNativeDriver is true on web\n          useNativeDriver: Platform.OS !== 'web',\n          isInteraction: false,\n        });\n      }\n\n      // Reset timer to the beginning\n      timer.setValue(0);\n\n      Animated.loop(this.indeterminateAnimation).start();\n    } else {\n      Animated.timing(timer, {\n        duration: 200,\n        toValue: progress ? progress : 0,\n        useNativeDriver: true,\n        isInteraction: false,\n      }).start();\n    }\n  }\n\n  _stopAnimation() {\n    const { fade } = this.state;\n\n    // Stop indeterminate animation\n    if (this.indeterminateAnimation) {\n      this.indeterminateAnimation.stop();\n    }\n\n    Animated.timing(fade, {\n      duration: 200,\n      toValue: 0,\n      useNativeDriver: true,\n      isInteraction: false,\n    }).start();\n  }\n\n  render() {\n    const { color, indeterminate, style, theme } = this.props;\n    const { fade, timer, width } = this.state;\n    const tintColor = color || theme.colors.primary;\n    const trackTintColor = setColor(tintColor)\n      .alpha(0.38)\n      .rgb()\n      .string();\n\n    return (\n      <View onLayout={this._onLayout}>\n        <Animated.View\n          style={[\n            styles.container,\n            { backgroundColor: trackTintColor, opacity: fade },\n            style,\n          ]}\n        >\n          <Animated.View\n            style={[\n              styles.progressBar,\n              {\n                backgroundColor: tintColor,\n                width,\n                transform: [\n                  {\n                    translateX: timer.interpolate(\n                      indeterminate\n                        ? {\n                            inputRange: [0, 0.5, 1],\n                            outputRange: [\n                              -0.5 * width,\n                              -0.5 * INDETERMINATE_MAX_WIDTH * width,\n                              0.7 * width,\n                            ],\n                          }\n                        : {\n                            inputRange: [0, 1],\n                            outputRange: [-0.5 * width, 0],\n                          }\n                    ),\n                  },\n                  {\n                    // Workaround for workaround for https://github.com/facebook/react-native/issues/6278\n                    scaleX: timer.interpolate(\n                      indeterminate\n                        ? {\n                            inputRange: [0, 0.5, 1],\n                            outputRange: [\n                              0.0001,\n                              INDETERMINATE_MAX_WIDTH,\n                              0.0001,\n                            ],\n                          }\n                        : {\n                            inputRange: [0, 1],\n                            outputRange: [0.0001, 1],\n                          }\n                    ),\n                  },\n                ],\n              },\n            ]}\n          />\n        </Animated.View>\n      </View>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    height: 4,\n    overflow: 'hidden',\n  },\n\n  progressBar: {\n    flex: 1,\n  },\n});\n\nexport default withTheme(ProgressBar);\n"]},"metadata":{},"sourceType":"module"}