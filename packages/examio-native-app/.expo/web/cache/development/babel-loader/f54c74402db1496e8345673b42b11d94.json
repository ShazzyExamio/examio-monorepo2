{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nvar _jsxFileName = \"/Users/trensik/dev/react-native-paper/src/components/Portal/PortalHost.tsx\";\nimport * as React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport PortalManager from \"./PortalManager\";\nexport var PortalContext = React.createContext(null);\n\nvar PortalHost = function (_React$Component) {\n  _inherits(PortalHost, _React$Component);\n\n  function PortalHost() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, PortalHost);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(PortalHost)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _this._setManager = function (manager) {\n      _this._manager = manager;\n    };\n\n    _this._mount = function (children) {\n      var key = _this._nextKey++;\n\n      if (_this._manager) {\n        _this._manager.mount(key, children);\n      } else {\n        _this._queue.push({\n          type: 'mount',\n          key: key,\n          children: children\n        });\n      }\n\n      return key;\n    };\n\n    _this._update = function (key, children) {\n      if (_this._manager) {\n        _this._manager.update(key, children);\n      } else {\n        var op = {\n          type: 'mount',\n          key: key,\n          children: children\n        };\n\n        var index = _this._queue.findIndex(function (o) {\n          return o.type === 'mount' || o.type === 'update' && o.key === key;\n        });\n\n        if (index > -1) {\n          _this._queue[index] = op;\n        } else {\n          _this._queue.push(op);\n        }\n      }\n    };\n\n    _this._unmount = function (key) {\n      if (_this._manager) {\n        _this._manager.unmount(key);\n      } else {\n        _this._queue.push({\n          type: 'unmount',\n          key: key\n        });\n      }\n    };\n\n    _this._nextKey = 0;\n    _this._queue = [];\n    return _this;\n  }\n\n  _createClass(PortalHost, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var manager = this._manager;\n      var queue = this._queue;\n\n      while (queue.length && manager) {\n        var action = queue.pop();\n\n        if (action) {\n          switch (action.type) {\n            case 'mount':\n              manager.mount(action.key, action.children);\n              break;\n\n            case 'update':\n              manager.update(action.key, action.children);\n              break;\n\n            case 'unmount':\n              manager.unmount(action.key);\n              break;\n          }\n        }\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(PortalContext.Provider, {\n        value: {\n          mount: this._mount,\n          update: this._update,\n          unmount: this._unmount\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120\n        }\n      }, React.createElement(View, {\n        style: styles.container,\n        collapsable: false,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 128\n        }\n      }, this.props.children), React.createElement(PortalManager, {\n        ref: this._setManager,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 131\n        }\n      }));\n    }\n  }]);\n\n  return PortalHost;\n}(React.Component);\n\nPortalHost.displayName = 'Portal.Host';\nexport { PortalHost as default };\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1\n  }\n});","map":{"version":3,"sources":["PortalHost.tsx"],"names":["PortalContext","React","PortalHost","Component","displayName","manager","queue","action","_setManager","_mount","key","type","children","_update","op","index","o","_unmount","_nextKey","_queue","mount","update","unmount","styles","StyleSheet","container","flex"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { View, StyleSheet } from 'react-native';\nimport PortalManager from './PortalManager';\n\ntype Props = {\n  children: React.ReactNode;\n};\n\ntype Operation =\n  | { type: 'mount'; key: number; children: React.ReactNode }\n  | { type: 'update'; key: number; children: React.ReactNode }\n  | { type: 'unmount'; key: number };\n\nexport type PortalMethods = {\n  mount: (children: React.ReactNode) => number;\n  update: (key: number, children: React.ReactNode) => void;\n  unmount: (key: number) => void;\n};\n\nexport const PortalContext = React.createContext<PortalMethods>(null as any);\n\n/**\n * Portal host renders all of its children `Portal` elements.\n * For example, you can wrap a screen in `Portal.Host` to render items above the screen.\n * If you're using the `Provider` component, it already includes `Portal.Host`.\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Text } from 'react-native';\n * import { Portal } from 'react-native-paper';\n *\n * export default class MyComponent extends React.Component {\n *   render() {\n *     return (\n *       <Portal.Host>\n *         <Text>Content of the app</Text>\n *       </Portal.Host>\n *     );\n *   }\n * }\n * ```\n *\n * Here any `Portal` elements under `<App />` are rendered alongside `<App />` and will appear above `<App />` like a `Modal`.\n */\nexport default class PortalHost extends React.Component<Props> {\n  static displayName = 'Portal.Host';\n\n  componentDidMount() {\n    const manager = this._manager;\n    const queue = this._queue;\n\n    while (queue.length && manager) {\n      const action = queue.pop();\n      if (action) {\n        // eslint-disable-next-line default-case\n        switch (action.type) {\n          case 'mount':\n            manager.mount(action.key, action.children);\n            break;\n          case 'update':\n            manager.update(action.key, action.children);\n            break;\n          case 'unmount':\n            manager.unmount(action.key);\n            break;\n        }\n      }\n    }\n  }\n\n  _setManager = (manager: PortalManager | undefined | null) => {\n    this._manager = manager;\n  };\n\n  _mount = (children: React.ReactNode) => {\n    const key = this._nextKey++;\n\n    if (this._manager) {\n      this._manager.mount(key, children);\n    } else {\n      this._queue.push({ type: 'mount', key, children });\n    }\n\n    return key;\n  };\n\n  _update = (key: number, children: React.ReactNode) => {\n    if (this._manager) {\n      this._manager.update(key, children);\n    } else {\n      const op = { type: 'mount', key, children };\n      const index = this._queue.findIndex(\n        o => o.type === 'mount' || (o.type === 'update' && o.key === key)\n      );\n\n      if (index > -1) {\n        // @ts-ignore\n        this._queue[index] = op;\n      } else {\n        this._queue.push(op as Operation);\n      }\n    }\n  };\n\n  _unmount = (key: number) => {\n    if (this._manager) {\n      this._manager.unmount(key);\n    } else {\n      this._queue.push({ type: 'unmount', key });\n    }\n  };\n\n  _nextKey = 0;\n  _queue: Operation[] = [];\n  _manager: PortalManager | null | undefined;\n\n  render() {\n    return (\n      <PortalContext.Provider\n        value={{\n          mount: this._mount,\n          update: this._update,\n          unmount: this._unmount,\n        }}\n      >\n        {/* Need collapsable=false here to clip the elevations, otherwise they appear above Portal components */}\n        <View style={styles.container} collapsable={false}>\n          {this.props.children}\n        </View>\n        <PortalManager ref={this._setManager} />\n      </PortalContext.Provider>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}