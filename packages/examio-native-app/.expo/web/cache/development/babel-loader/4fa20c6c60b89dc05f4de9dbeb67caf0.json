{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectSpread from \"@babel/runtime/helpers/objectSpread\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nvar _jsxFileName = \"/Users/trensik/dev/react-native-paper/src/components/Drawer/DrawerItem.tsx\";\nimport color from 'color';\nimport * as React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"../Typography/Text\";\nimport Icon from \"../Icon\";\nimport TouchableRipple from \"../TouchableRipple\";\nimport { withTheme } from \"../../core/theming\";\n\nvar DrawerItem = function (_React$Component) {\n  _inherits(DrawerItem, _React$Component);\n\n  function DrawerItem() {\n    _classCallCheck(this, DrawerItem);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(DrawerItem).apply(this, arguments));\n  }\n\n  _createClass(DrawerItem, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          icon = _this$props.icon,\n          label = _this$props.label,\n          active = _this$props.active,\n          theme = _this$props.theme,\n          style = _this$props.style,\n          onPress = _this$props.onPress,\n          rest = _objectWithoutProperties(_this$props, [\"icon\", \"label\", \"active\", \"theme\", \"style\", \"onPress\"]);\n\n      var colors = theme.colors,\n          roundness = theme.roundness;\n      var backgroundColor = active ? color(colors.primary).alpha(0.12).rgb().string() : 'transparent';\n      var contentColor = active ? colors.primary : color(colors.text).alpha(0.68).rgb().string();\n      var font = theme.fonts.medium;\n      var labelMargin = icon ? 32 : 0;\n      return React.createElement(View, _extends({}, rest, {\n        style: [styles.container, {\n          backgroundColor: backgroundColor,\n          borderRadius: roundness\n        }, style],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71\n        }\n      }), React.createElement(TouchableRipple, {\n        borderless: true,\n        delayPressIn: 0,\n        onPress: onPress,\n        style: {\n          borderRadius: roundness\n        },\n        accessibilityTraits: active ? ['button', 'selected'] : 'button',\n        accessibilityComponentType: \"button\",\n        accessibilityRole: \"button\",\n        accessibilityStates: active ? ['selected'] : [],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79\n        }\n      }, React.createElement(View, {\n        style: styles.wrapper,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89\n        }\n      }, icon ? React.createElement(Icon, {\n        source: icon,\n        size: 24,\n        color: contentColor,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91\n        }\n      }) : null, React.createElement(Text, {\n        numberOfLines: 1,\n        style: [styles.label, _objectSpread({\n          color: contentColor\n        }, font, {\n          marginLeft: labelMargin\n        })],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93\n        }\n      }, label))));\n    }\n  }]);\n\n  return DrawerItem;\n}(React.Component);\n\nDrawerItem.displayName = 'Drawer.Item';\nvar styles = StyleSheet.create({\n  container: {\n    marginHorizontal: 10,\n    marginVertical: 4\n  },\n  wrapper: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    padding: 8\n  },\n  label: {\n    marginRight: 32\n  }\n});\nexport default withTheme(DrawerItem);","map":{"version":3,"sources":["DrawerItem.tsx"],"names":["DrawerItem","React","Component","displayName","icon","label","active","theme","style","onPress","rest","colors","roundness","backgroundColor","color","contentColor","font","labelMargin","styles","borderRadius","marginLeft","StyleSheet","container","marginHorizontal","marginVertical","wrapper","flexDirection","alignItems","padding","marginRight","withTheme"],"mappings":"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","sourcesContent":["import color from 'color';\nimport * as React from 'react';\nimport { View, StyleSheet, StyleProp, ViewStyle } from 'react-native';\nimport Text from '../Typography/Text';\nimport Icon, { IconSource } from '../Icon';\nimport TouchableRipple from '../TouchableRipple';\nimport { withTheme } from '../../core/theming';\nimport { Theme } from '../../types';\n\ntype Props = {\n  /**\n   * The label text of the item.\n   */\n  label: string;\n  /**\n   * Icon to display for the `DrawerItem`.\n   */\n  icon?: IconSource;\n  /**\n   * Whether to highlight the drawer item as active.\n   */\n  active?: boolean;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme: Theme;\n};\n\n/**\n * A component used to show an action item with an icon and a label in a navigation drawer.\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Drawer } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <Drawer.Item label=\"First Item\" />\n * );\n *\n * export default MyComponent;\n * ```\n */\nclass DrawerItem extends React.Component<Props> {\n  static displayName = 'Drawer.Item';\n\n  render() {\n    const { icon, label, active, theme, style, onPress, ...rest } = this.props;\n    const { colors, roundness } = theme;\n    const backgroundColor = active\n      ? color(colors.primary)\n          .alpha(0.12)\n          .rgb()\n          .string()\n      : 'transparent';\n    const contentColor = active\n      ? colors.primary\n      : color(colors.text)\n          .alpha(0.68)\n          .rgb()\n          .string();\n    const font = theme.fonts.medium;\n    const labelMargin = icon ? 32 : 0;\n\n    return (\n      <View\n        {...rest}\n        style={[\n          styles.container,\n          { backgroundColor, borderRadius: roundness },\n          style,\n        ]}\n      >\n        <TouchableRipple\n          borderless\n          delayPressIn={0}\n          onPress={onPress}\n          style={{ borderRadius: roundness }}\n          accessibilityTraits={active ? ['button', 'selected'] : 'button'}\n          accessibilityComponentType=\"button\"\n          accessibilityRole=\"button\"\n          accessibilityStates={active ? ['selected'] : []}\n        >\n          <View style={styles.wrapper}>\n            {icon ? (\n              <Icon source={icon} size={24} color={contentColor} />\n            ) : null}\n            <Text\n              numberOfLines={1}\n              style={[\n                styles.label,\n                {\n                  color: contentColor,\n                  ...font,\n                  marginLeft: labelMargin,\n                },\n              ]}\n            >\n              {label}\n            </Text>\n          </View>\n        </TouchableRipple>\n      </View>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    marginHorizontal: 10,\n    marginVertical: 4,\n  },\n  wrapper: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    padding: 8,\n  },\n  label: {\n    marginRight: 32,\n  },\n});\n\nexport default withTheme(DrawerItem);\n"]},"metadata":{},"sourceType":"module"}