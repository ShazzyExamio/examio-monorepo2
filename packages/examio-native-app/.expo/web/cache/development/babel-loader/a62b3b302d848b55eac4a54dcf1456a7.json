{"ast":null,"code":"import _objectSpread from \"@babel/runtime/helpers/objectSpread\";\nimport invariant from \"../utils/invariant\";\nimport getScreenForRouteName from \"./getScreenForRouteName\";\nimport validateScreenOptions from \"./validateScreenOptions\";\n\nfunction applyConfig(configurer, navigationOptions, configProps) {\n  if (typeof configurer === 'function') {\n    return _objectSpread({}, navigationOptions, configurer(_objectSpread({}, configProps, {\n      navigationOptions: navigationOptions\n    })));\n  }\n\n  if (typeof configurer === 'object') {\n    return _objectSpread({}, navigationOptions, configurer);\n  }\n\n  return navigationOptions;\n}\n\nexport default (function (routeConfigs, navigatorScreenConfig) {\n  return function (navigation, screenProps, theme) {\n    var state = navigation.state;\n    var route = state;\n    invariant(route.routeName && typeof route.routeName === 'string', 'Cannot get config because the route does not have a routeName.');\n    var Component = getScreenForRouteName(routeConfigs, route.routeName);\n    var routeConfig = routeConfigs[route.routeName];\n    var routeScreenConfig = routeConfig === Component ? null : routeConfig.navigationOptions;\n    var componentScreenConfig = Component.navigationOptions;\n    var configOptions = {\n      navigation: navigation,\n      screenProps: screenProps || {},\n      theme: theme\n    };\n    var outputConfig = applyConfig(navigatorScreenConfig, {}, configOptions);\n    outputConfig = applyConfig(componentScreenConfig, outputConfig, configOptions);\n    outputConfig = applyConfig(routeScreenConfig, outputConfig, configOptions);\n    validateScreenOptions(outputConfig, route);\n    return outputConfig;\n  };\n});","map":{"version":3,"sources":["createConfigGetter.js"],"names":["configurer","navigationOptions","state","navigation","route","invariant","Component","getScreenForRouteName","routeConfig","routeConfigs","routeScreenConfig","componentScreenConfig","configOptions","screenProps","theme","outputConfig","applyConfig","validateScreenOptions"],"mappings":";AAAA,OAAA,SAAA;AAEA,OAAA,qBAAA;AACA,OAAA,qBAAA;;AAEA,SAAA,WAAA,CAAA,UAAA,EAAA,iBAAA,EAAA,WAAA,EAAiE;EAC/D,IAAI,OAAA,UAAA,KAAJ,UAAA,EAAsC;IACpC,OAAA,aAAA,CAAA,EAAA,EAAA,iBAAA,EAEKA,UAAU,CAAA,aAAA,CAAA,EAAA,EAAA,WAAA,EAAA;MAEXC,iBAAiB,EAJrB;IAEe,CAAA,CAAA,CAFf,CAAA;EAQF;;EAAA,IAAI,OAAA,UAAA,KAAJ,QAAA,EAAoC;IAClC,OAAA,aAAA,CAAA,EAAA,EAAA,iBAAA,EAAA,UAAA,CAAA;EAKF;;EAAA,OAAA,iBAAA;AAGF;;AAAA,gBAAe,UAAA,YAAA,EAAA,qBAAA,EAAA;EAAA,OAAyC,UAAA,UAAA,EAAA,WAAA,EAAA,KAAA,EAInD;IAAA,IACKC,KADL,GACeC,UADf,CAAA,KAAA;IAEH,IAAMC,KAAK,GAAX,KAAA;IAEAC,SAAS,CACPD,KAAK,CAALA,SAAAA,IAAmB,OAAOA,KAAK,CAAZ,SAAA,KADZ,QAAA,EAATC,gEAAS,CAATA;IAKA,IAAMC,SAAS,GAAGC,qBAAqB,CAAA,YAAA,EAAeH,KAAK,CAA3D,SAAuC,CAAvC;IAEA,IAAMI,WAAW,GAAGC,YAAY,CAACL,KAAK,CAAtC,SAAgC,CAAhC;IAEA,IAAMM,iBAAiB,GACrBF,WAAW,KAAXA,SAAAA,GAAAA,IAAAA,GAAmCA,WAAW,CADhD,iBAAA;IAEA,IAAMG,qBAAqB,GAAGL,SAAS,CAAvC,iBAAA;IAEA,IAAMM,aAAa,GAAG;MAAET,UAAU,EAAZ,UAAA;MAAcU,WAAW,EAAEA,WAAW,IAAtC,EAAA;MAA8CC,KAAK,EAAzE;IAAsB,CAAtB;IAEA,IAAIC,YAAY,GAAGC,WAAW,CAAA,qBAAA,EAAA,EAAA,EAA9B,aAA8B,CAA9B;IACAD,YAAY,GAAGC,WAAW,CAAA,qBAAA,EAAA,YAAA,EAA1BD,aAA0B,CAA1BA;IAKAA,YAAY,GAAGC,WAAW,CAAA,iBAAA,EAAA,YAAA,EAA1BD,aAA0B,CAA1BA;IAEAE,qBAAqB,CAAA,YAAA,EAArBA,KAAqB,CAArBA;IAEA,OAAA,YAAA;EAjCa,CAAA;AAAf,CAAA","sourcesContent":["import invariant from '../utils/invariant';\n\nimport getScreenForRouteName from './getScreenForRouteName';\nimport validateScreenOptions from './validateScreenOptions';\n\nfunction applyConfig(configurer, navigationOptions, configProps) {\n  if (typeof configurer === 'function') {\n    return {\n      ...navigationOptions,\n      ...configurer({\n        ...configProps,\n        navigationOptions,\n      }),\n    };\n  }\n  if (typeof configurer === 'object') {\n    return {\n      ...navigationOptions,\n      ...configurer,\n    };\n  }\n  return navigationOptions;\n}\n\nexport default (routeConfigs, navigatorScreenConfig) => (\n  navigation,\n  screenProps,\n  theme\n) => {\n  const { state } = navigation;\n  const route = state;\n\n  invariant(\n    route.routeName && typeof route.routeName === 'string',\n    'Cannot get config because the route does not have a routeName.'\n  );\n\n  const Component = getScreenForRouteName(routeConfigs, route.routeName);\n\n  const routeConfig = routeConfigs[route.routeName];\n\n  const routeScreenConfig =\n    routeConfig === Component ? null : routeConfig.navigationOptions;\n  const componentScreenConfig = Component.navigationOptions;\n\n  const configOptions = { navigation, screenProps: screenProps || {}, theme };\n\n  let outputConfig = applyConfig(navigatorScreenConfig, {}, configOptions);\n  outputConfig = applyConfig(\n    componentScreenConfig,\n    outputConfig,\n    configOptions\n  );\n  outputConfig = applyConfig(routeScreenConfig, outputConfig, configOptions);\n\n  validateScreenOptions(outputConfig, route);\n\n  return outputConfig;\n};\n"]},"metadata":{},"sourceType":"module"}