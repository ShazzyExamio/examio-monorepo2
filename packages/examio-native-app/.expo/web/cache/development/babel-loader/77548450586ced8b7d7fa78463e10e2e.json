{"ast":null,"code":"import _objectSpread from \"@babel/runtime/helpers/objectSpread\";\nimport getChildEventSubscriber from \"./getChildEventSubscriber\";\nimport getChildRouter from \"./getChildRouter\";\nimport getNavigationActionCreators from \"./routers/getNavigationActionCreators\";\nimport getChildrenNavigationCache from \"./getChildrenNavigationCache\";\n\nvar createParamGetter = function createParamGetter(route) {\n  return function (paramName, defaultValue) {\n    var params = route.params;\n\n    if (params && paramName in params) {\n      return params[paramName];\n    }\n\n    return defaultValue;\n  };\n};\n\nfunction _getChildNavigation(navigation, childKey, getCurrentParentNavigation) {\n  var children = getChildrenNavigationCache(navigation);\n  var childRoute = navigation.state.routes.find(function (r) {\n    return r.key === childKey;\n  });\n\n  if (!childRoute) {\n    return null;\n  }\n\n  if (children[childKey] && children[childKey].state === childRoute) {\n    return children[childKey];\n  }\n\n  var childRouter = getChildRouter(navigation.router, childRoute.routeName);\n  var focusedGrandChildRoute = childRoute.routes && typeof childRoute.index === 'number' ? childRoute.routes[childRoute.index] : null;\n\n  var actionCreators = _objectSpread({}, navigation.actions, navigation.router.getActionCreators(childRoute, navigation.state.key), childRouter ? childRouter.getActionCreators(focusedGrandChildRoute, childRoute.key) : {}, getNavigationActionCreators(childRoute));\n\n  var actionHelpers = {};\n  Object.keys(actionCreators).forEach(function (actionName) {\n    actionHelpers[actionName] = function () {\n      var actionCreator = actionCreators[actionName];\n      var action = actionCreator.apply(void 0, arguments);\n      return navigation.dispatch(action);\n    };\n  });\n  var _isFirstRouteInParent = true;\n  var parentNavigation = getCurrentParentNavigation();\n\n  if (parentNavigation) {\n    _isFirstRouteInParent = parentNavigation.state.routes.indexOf(childRoute) === 0;\n  }\n\n  if (children[childKey] && children[childKey].isFirstRouteInParent() === _isFirstRouteInParent) {\n    children[childKey] = _objectSpread({}, children[childKey], actionHelpers, {\n      state: childRoute,\n      router: childRouter,\n      actions: actionCreators,\n      getParam: createParamGetter(childRoute)\n    });\n    return children[childKey];\n  } else {\n    var childSubscriber = getChildEventSubscriber(navigation.addListener, childKey);\n    children[childKey] = _objectSpread({}, actionHelpers, {\n      state: childRoute,\n      router: childRouter,\n      actions: actionCreators,\n      getParam: createParamGetter(childRoute),\n      getChildNavigation: function getChildNavigation(grandChildKey) {\n        return _getChildNavigation(children[childKey], grandChildKey, function () {\n          var nav = getCurrentParentNavigation();\n          return nav && nav.getChildNavigation(childKey);\n        });\n      },\n      isFocused: function isFocused() {\n        var currentNavigation = getCurrentParentNavigation();\n\n        if (!currentNavigation) {\n          return false;\n        }\n\n        var _currentNavigation$st = currentNavigation.state,\n            routes = _currentNavigation$st.routes,\n            index = _currentNavigation$st.index;\n\n        if (!currentNavigation.isFocused()) {\n          return false;\n        }\n\n        if (routes[index].key === childKey) {\n          return true;\n        }\n\n        return false;\n      },\n      isFirstRouteInParent: function isFirstRouteInParent() {\n        return _isFirstRouteInParent;\n      },\n      dispatch: navigation.dispatch,\n      getScreenProps: navigation.getScreenProps,\n      dangerouslyGetParent: getCurrentParentNavigation,\n      addListener: childSubscriber.addListener,\n      emit: childSubscriber.emit\n    });\n    return children[childKey];\n  }\n}\n\nexport default _getChildNavigation;","map":{"version":3,"sources":["getChildNavigation.js"],"names":["createParamGetter","params","route","paramName","children","getChildrenNavigationCache","childRoute","navigation","r","childRouter","getChildRouter","focusedGrandChildRoute","actionCreators","getNavigationActionCreators","actionHelpers","Object","actionCreator","action","isFirstRouteInParent","parentNavigation","getCurrentParentNavigation","state","router","actions","getParam","childSubscriber","getChildEventSubscriber","getChildNavigation","nav","isFocused","currentNavigation","routes","index","dispatch","getScreenProps","dangerouslyGetParent","addListener","emit"],"mappings":"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","sourcesContent":["import getChildEventSubscriber from './getChildEventSubscriber';\nimport getChildRouter from './getChildRouter';\nimport getNavigationActionCreators from './routers/getNavigationActionCreators';\nimport getChildrenNavigationCache from './getChildrenNavigationCache';\n\nconst createParamGetter = route => (paramName, defaultValue) => {\n  const params = route.params;\n\n  if (params && paramName in params) {\n    return params[paramName];\n  }\n\n  return defaultValue;\n};\n\nfunction getChildNavigation(navigation, childKey, getCurrentParentNavigation) {\n  const children = getChildrenNavigationCache(navigation);\n  const childRoute = navigation.state.routes.find(r => r.key === childKey);\n\n  if (!childRoute) {\n    return null;\n  }\n\n  if (children[childKey] && children[childKey].state === childRoute) {\n    return children[childKey];\n  }\n\n  const childRouter = getChildRouter(navigation.router, childRoute.routeName);\n\n  // If the route has children, we'll use this to pass in to the action creators\n  // for the childRouter so that any action that depends on the active route will\n  // behave as expected. We don't explicitly require that routers implement routes\n  // and index properties, but if we did then we would put an invariant here to\n  // ensure that a focusedGrandChildRoute exists if childRouter is defined.\n  const focusedGrandChildRoute =\n    childRoute.routes && typeof childRoute.index === 'number'\n      ? childRoute.routes[childRoute.index]\n      : null;\n\n  const actionCreators = {\n    ...navigation.actions,\n    ...navigation.router.getActionCreators(childRoute, navigation.state.key),\n    ...(childRouter\n      ? childRouter.getActionCreators(focusedGrandChildRoute, childRoute.key)\n      : {}),\n    ...getNavigationActionCreators(childRoute),\n  };\n\n  const actionHelpers = {};\n  Object.keys(actionCreators).forEach(actionName => {\n    actionHelpers[actionName] = (...args) => {\n      const actionCreator = actionCreators[actionName];\n      const action = actionCreator(...args);\n      return navigation.dispatch(action);\n    };\n  });\n\n  let isFirstRouteInParent = true;\n\n  const parentNavigation = getCurrentParentNavigation();\n\n  if (parentNavigation) {\n    isFirstRouteInParent =\n      parentNavigation.state.routes.indexOf(childRoute) === 0;\n  }\n\n  if (\n    children[childKey] &&\n    children[childKey].isFirstRouteInParent() === isFirstRouteInParent\n  ) {\n    children[childKey] = {\n      ...children[childKey],\n      ...actionHelpers,\n      state: childRoute,\n      router: childRouter,\n      actions: actionCreators,\n      getParam: createParamGetter(childRoute),\n    };\n    return children[childKey];\n  } else {\n    const childSubscriber = getChildEventSubscriber(\n      navigation.addListener,\n      childKey\n    );\n\n    children[childKey] = {\n      ...actionHelpers,\n\n      state: childRoute,\n      router: childRouter,\n      actions: actionCreators,\n      getParam: createParamGetter(childRoute),\n\n      getChildNavigation: grandChildKey =>\n        getChildNavigation(children[childKey], grandChildKey, () => {\n          const nav = getCurrentParentNavigation();\n          return nav && nav.getChildNavigation(childKey);\n        }),\n\n      isFocused: () => {\n        const currentNavigation = getCurrentParentNavigation();\n        if (!currentNavigation) {\n          return false;\n        }\n        const { routes, index } = currentNavigation.state;\n        if (!currentNavigation.isFocused()) {\n          return false;\n        }\n        if (routes[index].key === childKey) {\n          return true;\n        }\n        return false;\n      },\n      isFirstRouteInParent: () => isFirstRouteInParent,\n      dispatch: navigation.dispatch,\n      getScreenProps: navigation.getScreenProps,\n      dangerouslyGetParent: getCurrentParentNavigation,\n      addListener: childSubscriber.addListener,\n      emit: childSubscriber.emit,\n    };\n    return children[childKey];\n  }\n}\n\nexport default getChildNavigation;\n"]},"metadata":{},"sourceType":"module"}