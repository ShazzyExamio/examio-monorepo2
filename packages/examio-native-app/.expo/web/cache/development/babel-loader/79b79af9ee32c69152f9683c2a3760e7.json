{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nvar _jsxFileName = \"/Users/satya/Workspace/Callstack/react-navigation-stack/src/views/StackView/createPointerEventsContainer.tsx\";\nimport * as React from 'react';\nvar MIN_POSITION_OFFSET = 0.01;\nexport default function createPointerEventsContainer(Component) {\n  var Container = function (_React$Component) {\n    _inherits(Container, _React$Component);\n\n    function Container() {\n      var _getPrototypeOf2;\n\n      var _this;\n\n      _classCallCheck(this, Container);\n\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Container)).call.apply(_getPrototypeOf2, [this].concat(args)));\n      _this.pointerEvents = _this.computePointerEvents();\n      _this.component = null;\n\n      _this.handleComponentRef = function (component) {\n        _this.component = component;\n\n        if (component && typeof component.setNativeProps !== 'function') {\n          throw new Error('Component must implement method `setNativeProps`');\n        }\n      };\n\n      _this.handlePositionChange = function () {\n        if (_this.component) {\n          var pointerEvents = _this.computePointerEvents();\n\n          if (_this.pointerEvents !== pointerEvents) {\n            _this.pointerEvents = pointerEvents;\n\n            _this.component.setNativeProps({\n              pointerEvents: pointerEvents\n            });\n          }\n        }\n      };\n\n      return _this;\n    }\n\n    _createClass(Container, [{\n      key: \"componentWillUnmount\",\n      value: function componentWillUnmount() {\n        this.positionListener && this.positionListener.remove();\n      }\n    }, {\n      key: \"bindPosition\",\n      value: function bindPosition() {\n        this.positionListener && this.positionListener.remove();\n        this.positionListener = new AnimatedValueSubscription(this.props.realPosition, this.handlePositionChange);\n      }\n    }, {\n      key: \"computePointerEvents\",\n      value: function computePointerEvents() {\n        var _this$props = this.props,\n            navigation = _this$props.navigation,\n            realPosition = _this$props.realPosition,\n            scene = _this$props.scene;\n\n        if (scene.isStale || navigation.state.index !== scene.index) {\n          return scene.index > navigation.state.index ? 'box-only' : 'none';\n        }\n\n        var offset = realPosition.__getAnimatedValue() - navigation.state.index;\n\n        if (Math.abs(offset) > MIN_POSITION_OFFSET) {\n          return 'box-only';\n        }\n\n        return 'auto';\n      }\n    }, {\n      key: \"render\",\n      value: function render() {\n        this.bindPosition();\n        this.pointerEvents = this.computePointerEvents();\n        return React.createElement(Component, _extends({}, this.props, {\n          pointerEvents: this.pointerEvents,\n          onComponentRef: this.handleComponentRef,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 95\n          }\n        }));\n      }\n    }]);\n\n    return Container;\n  }(React.Component);\n\n  return Container;\n}\n\nvar AnimatedValueSubscription = function () {\n  function AnimatedValueSubscription(value, callback) {\n    _classCallCheck(this, AnimatedValueSubscription);\n\n    this.value = value;\n    this.token = value.addListener(callback);\n  }\n\n  _createClass(AnimatedValueSubscription, [{\n    key: \"remove\",\n    value: function remove() {\n      this.value.removeListener(this.token);\n    }\n  }]);\n\n  return AnimatedValueSubscription;\n}();","map":{"version":3,"sources":["createPointerEventsContainer.tsx"],"names":["MIN_POSITION_OFFSET","Container","React","component","pointerEvents","navigation","realPosition","scene","offset","Math","AnimatedValueSubscription","value"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { Animated, View } from 'react-native';\nimport { NavigationStackProp, Scene } from '../../types';\n\nconst MIN_POSITION_OFFSET = 0.01;\n\nexport type PointerEvents = 'box-only' | 'none' | 'auto';\n\nexport type InputProps = {\n  scene: Scene;\n  navigation: NavigationStackProp;\n  realPosition: Animated.Value;\n};\n\nexport type InjectedProps = {\n  pointerEvents: PointerEvents;\n  onComponentRef: (ref: View | null) => void;\n};\n\n/**\n * Create a higher-order component that automatically computes the\n * `pointerEvents` property for a component whenever navigation position\n * changes.\n */\nexport default function createPointerEventsContainer<\n  Props extends InjectedProps & InputProps\n>(\n  Component: React.ComponentType<Props>\n): React.ComponentType<Pick<Props, Exclude<keyof Props, keyof InjectedProps>>> {\n  class Container extends React.Component<Props> {\n    private pointerEvents = this.computePointerEvents();\n    private component: View | null = null;\n    private positionListener: AnimatedValueSubscription | undefined;\n\n    componentWillUnmount() {\n      this.positionListener && this.positionListener.remove();\n    }\n\n    private handleComponentRef = (component: View | null) => {\n      this.component = component;\n\n      if (component && typeof component.setNativeProps !== 'function') {\n        throw new Error('Component must implement method `setNativeProps`');\n      }\n    };\n\n    private bindPosition() {\n      this.positionListener && this.positionListener.remove();\n      this.positionListener = new AnimatedValueSubscription(\n        this.props.realPosition,\n        this.handlePositionChange\n      );\n    }\n\n    private handlePositionChange = (/* { value } */) => {\n      // This should log each frame when releasing the gesture or when pressing\n      // the back button! If not, something has gone wrong with the animated\n      // value subscription\n      // console.log(value);\n\n      if (this.component) {\n        const pointerEvents = this.computePointerEvents();\n        if (this.pointerEvents !== pointerEvents) {\n          this.pointerEvents = pointerEvents;\n          this.component.setNativeProps({ pointerEvents });\n        }\n      }\n    };\n\n    private computePointerEvents() {\n      const { navigation, realPosition, scene } = this.props;\n\n      if (scene.isStale || navigation.state.index !== scene.index) {\n        // The scene isn't focused.\n        return scene.index > navigation.state.index ? 'box-only' : 'none';\n      }\n\n      // @ts-ignore\n      const offset = realPosition.__getAnimatedValue() - navigation.state.index;\n      if (Math.abs(offset) > MIN_POSITION_OFFSET) {\n        // The positon is still away from scene's index.\n        // Scene's children should not receive touches until the position\n        // is close enough to scene's index.\n        return 'box-only';\n      }\n\n      return 'auto';\n    }\n\n    render() {\n      this.bindPosition();\n      this.pointerEvents = this.computePointerEvents();\n\n      return (\n        <Component\n          {...this.props}\n          pointerEvents={this.pointerEvents}\n          onComponentRef={this.handleComponentRef}\n        />\n      );\n    }\n  }\n\n  return Container as any;\n}\n\nclass AnimatedValueSubscription {\n  private value: Animated.Value;\n  private token: string;\n\n  constructor(value: Animated.Value, callback: Animated.ValueListenerCallback) {\n    this.value = value;\n    this.token = value.addListener(callback);\n  }\n\n  remove() {\n    this.value.removeListener(this.token);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}