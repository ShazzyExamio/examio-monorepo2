{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nvar _jsxFileName = \"/Users/trensik/dev/react-native-paper/src/components/HelperText.tsx\";\nimport * as React from 'react';\nimport color from 'color';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport AnimatedText from \"./Typography/AnimatedText\";\nimport { withTheme } from \"../core/theming\";\n\nvar HelperText = function (_React$PureComponent) {\n  _inherits(HelperText, _React$PureComponent);\n\n  function HelperText() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, HelperText);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(HelperText)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      shown: new Animated.Value(_this.props.visible ? 1 : 0),\n      textHeight: 0\n    };\n\n    _this._showText = function () {\n      Animated.timing(_this.state.shown, {\n        toValue: 1,\n        duration: 150,\n        useNativeDriver: true\n      }).start();\n    };\n\n    _this._hideText = function () {\n      Animated.timing(_this.state.shown, {\n        toValue: 0,\n        duration: 180,\n        useNativeDriver: true\n      }).start();\n    };\n\n    _this._handleTextLayout = function (e) {\n      _this.props.onLayout && _this.props.onLayout(e);\n\n      _this.setState({\n        textHeight: e.nativeEvent.layout.height\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(HelperText, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps, prevState) {\n      if (prevProps.visible !== this.props.visible || prevState.textHeight !== this.state.textHeight) {\n        if (this.props.visible) {\n          this._showText();\n        } else {\n          this._hideText();\n        }\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          style = _this$props.style,\n          type = _this$props.type,\n          visible = _this$props.visible,\n          theme = _this$props.theme,\n          onLayout = _this$props.onLayout,\n          padding = _this$props.padding,\n          rest = _objectWithoutProperties(_this$props, [\"style\", \"type\", \"visible\", \"theme\", \"onLayout\", \"padding\"]);\n\n      var colors = theme.colors,\n          dark = theme.dark;\n      var textColor = this.props.type === 'error' ? colors.error : color(colors.text).alpha(dark ? 0.7 : 0.54).rgb().string();\n      return React.createElement(AnimatedText, _extends({\n        onLayout: this._handleTextLayout,\n        style: [styles.text, padding !== 'none' ? styles.padding : {}, {\n          color: textColor,\n          opacity: this.state.shown,\n          transform: visible && type === 'error' ? [{\n            translateY: this.state.shown.interpolate({\n              inputRange: [0, 1],\n              outputRange: [-this.state.textHeight / 2, 0]\n            })\n          }] : []\n        }, style]\n      }, rest, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 158\n        }\n      }), this.props.children);\n    }\n  }]);\n\n  return HelperText;\n}(React.PureComponent);\n\nHelperText.defaultProps = {\n  type: 'info',\n  padding: 'normal',\n  visible: true\n};\nvar styles = StyleSheet.create({\n  text: {\n    fontSize: 12,\n    paddingVertical: 4\n  },\n  padding: {\n    paddingHorizontal: 12\n  }\n});\nexport default withTheme(HelperText);","map":{"version":3,"sources":["HelperText.tsx"],"names":["HelperText","React","PureComponent","defaultProps","type","padding","visible","state","shown","Animated","textHeight","prevProps","prevState","_showText","toValue","duration","useNativeDriver","_hideText","_handleTextLayout","e","style","theme","onLayout","rest","colors","dark","textColor","color","styles","opacity","transform","translateY","inputRange","outputRange","StyleSheet","text","fontSize","paddingVertical","paddingHorizontal","withTheme"],"mappings":";;;;;;;;AAAA,OAAO,KAAP,KAAA,MAAA,OAAA;AACA,OAAA,KAAA,MAAA,OAAA;;;AAQA,OAAA,YAAA;AACA,SAAA,SAAA;;AA6EMA,IAAAA,U;;;;;;;;;;;;;;;UAOJO,K,GAAQ;MACNC,KAAK,EAAE,IAAIC,QAAQ,CAAZ,KAAA,CAAmB,KAAA,CAAA,KAAA,CAAA,OAAA,GAAA,CAAA,GADpB,CACC,CADD;MAENC,UAAU,EAFJ;IAAA,C;;UAkBRG,S,GAAY,YAAM;MAChBJ,QAAQ,CAARA,MAAAA,CAAgB,KAAA,CAAA,KAAA,CAAhBA,KAAAA,EAAkC;QAChCK,OAAO,EADyB,CAAA;QAEhCC,QAAQ,EAFwB,GAAA;QAGhCC,eAAe,EAHjBP;MAAkC,CAAlCA,EAAAA,KAAAA;;;UAOFQ,S,GAAY,YAAM;MAChBR,QAAQ,CAARA,MAAAA,CAAgB,KAAA,CAAA,KAAA,CAAhBA,KAAAA,EAAkC;QAChCK,OAAO,EADyB,CAAA;QAEhCC,QAAQ,EAFwB,GAAA;QAGhCC,eAAe,EAHjBP;MAAkC,CAAlCA,EAAAA,KAAAA;;;UAOFS,iB,GAAoB,UAAA,CAAA,EAA0B;MAC5C,KAAA,CAAA,KAAA,CAAA,QAAA,IAAuB,KAAA,CAAA,KAAA,CAAA,QAAA,CAAvB,CAAuB,CAAvB;;MACA,KAAA,CAAA,QAAA,CAAc;QACZR,UAAU,EAAES,CAAC,CAADA,WAAAA,CAAAA,MAAAA,CADd;MAAc,CAAd;;;;;;;;uCA/BiBR,S,EAAkBC,S,EAAkB;MACrD,IACED,SAAS,CAATA,OAAAA,KAAsB,KAAA,KAAA,CAAtBA,OAAAA,IACAC,SAAS,CAATA,UAAAA,KAAyB,KAAA,KAAA,CAF3B,UAAA,EAGE;QACA,IAAI,KAAA,KAAA,CAAJ,OAAA,EAAwB;UACtB,KAAA,SAAA;QADF,CAAA,MAEO;UACL,KAAA,SAAA;QAEH;MACF;;;;6BAyBQ;MAAA,IAAA,WAAA,GAUH,KAVG,KAAA;MAAA,IAELQ,KAFK,GAAA,WAAA,CAAA,KAAA;MAAA,IAGLhB,IAHK,GAAA,WAAA,CAAA,IAAA;MAAA,IAILE,OAJK,GAAA,WAAA,CAAA,OAAA;MAAA,IAKLe,KALK,GAAA,WAAA,CAAA,KAAA;MAAA,IAOLC,QAPK,GAAA,WAAA,CAAA,QAAA;MAAA,IAQLjB,OARK,GAAA,WAAA,CAAA,OAAA;MAAA,IASFkB,IATE,GAAA,wBAAA,CAAA,WAAA,EAAA,CAAA,OAAA,EAAA,MAAA,EAAA,SAAA,EAAA,OAAA,EAAA,UAAA,EAAA,SAAA,CAAA,CAAA;;MAAA,IAWCC,MAXD,GAWkBH,KAXlB,CAAA,MAAA;MAAA,IAWSI,IAXT,GAWkBJ,KAXlB,CAAA,IAAA;MAaP,IAAMK,SAAS,GACb,KAAA,KAAA,CAAA,IAAA,KAAA,OAAA,GACIF,MAAM,CADV,KAAA,GAEIG,KAAK,CAACH,MAAM,CAAZG,IAAK,CAALA,CAAAA,KAAAA,CACSF,IAAI,GAAA,GAAA,GADbE,IAAAA,EAAAA,GAAAA,GAHN,MAGMA,EAHN;MAQA,OACE,KAAA,CAAA,aAAA,CAAA,YAAA,EAAA,QAAA,CAAA;QACE,QAAQ,EAAE,KADZ,iBAAA;QAEE,KAAK,EAAE,CACLC,MAAM,CADD,IAAA,EAELvB,OAAO,KAAPA,MAAAA,GAAqBuB,MAAM,CAA3BvB,OAAAA,GAFK,EAAA,EAGL;UACEsB,KAAK,EADP,SAAA;UAEEE,OAAO,EAAE,KAAA,KAAA,CAFX,KAAA;UAGEC,SAAS,EACPxB,OAAO,IAAIF,IAAI,KAAfE,OAAAA,GACI,CACE;YACEyB,UAAU,EAAE,KAAA,KAAA,CAAA,KAAA,CAAA,WAAA,CAA6B;cACvCC,UAAU,EAAE,CAAA,CAAA,EAD2B,CAC3B,CAD2B;cAEvCC,WAAW,EAAE,CAAC,CAAC,KAAA,KAAA,CAAD,UAAA,GAAD,CAAA,EALvB3B,CAKuB;YAF0B,CAA7B;UADd,CADF,CADJA,GAPC;QAGL,CAHK,EAFT,KAES;MAFT,CAAA,EAAA,IAAA,EAAA;QAAA,QAAA,EAAA;UAAA,QAAA,EAAA,YAAA;UAAA,UAAA,EAAA;QAAA;MAAA,CAAA,CAAA,EAwBG,KAAA,KAAA,CAzBL,QACE,CADF;;;;;EArEqBL,KAAK,CAACC,a,CAAzBF;;AAAAA,U,CACGG,YADHH,GACkC;EACpCI,IAAI,EADgC,MAAA;EAEpCC,OAAO,EAF6B,QAAA;EAGpCC,OAAO,EAH6B;AAAA,CADlCN;AAoGN,IAAM4B,MAAM,GAAGM,UAAU,CAAVA,MAAAA,CAAkB;EAC/BC,IAAI,EAAE;IACJC,QAAQ,EADJ,EAAA;IAEJC,eAAe,EAHc;EACzB,CADyB;EAK/BhC,OAAO,EAAE;IACPiC,iBAAiB,EANrB;EAKW;AALsB,CAAlBJ,CAAf;AAUA,eAAeK,SAAS,CAAxB,UAAwB,CAAxB","sourcesContent":["import * as React from 'react';\nimport color from 'color';\nimport {\n  Animated,\n  StyleSheet,\n  StyleProp,\n  TextStyle,\n  LayoutChangeEvent,\n} from 'react-native';\nimport AnimatedText from './Typography/AnimatedText';\nimport { withTheme } from '../core/theming';\nimport { Theme, $Omit } from '../types';\n\ntype Props = $Omit<\n  $Omit<React.ComponentProps<typeof Animated.Text>, 'padding'>,\n  'type'\n> & {\n  /**\n   * Type of the helper text.\n   */\n  type: 'error' | 'info';\n  /**\n   * Whether to display the helper text.\n   */\n  visible?: boolean;\n  /**\n   * Whether to apply padding to the helper text.\n   */\n  padding?: 'none' | 'normal';\n  /**\n   * Text content of the HelperText.\n   */\n  children: React.ReactNode;\n  style?: StyleProp<TextStyle>;\n  /**\n   * @optional\n   */\n  theme: Theme;\n  /**\n   * TestID used for testing purposes\n   */\n  testID?: string;\n};\n\ntype State = {\n  shown: Animated.Value;\n  textHeight: number;\n};\n\n/**\n * Helper text is used in conjuction with input elements to provide additional hints for the user.\n *\n * <div class=\"screenshots\">\n *   <img class=\"medium\" src=\"screenshots/helper-text.gif\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { View } from 'react-native';\n * import { HelperText, TextInput } from 'react-native-paper';\n *\n * export default class MyComponent extends React.Component {\n *   state = {\n *     text: ''\n *   };\n *\n *   render(){\n *     return (\n *       <View>\n *         <TextInput\n *           label=\"Email\"\n *           value={this.state.text}\n *           onChangeText={text => this.setState({ text })}\n *         />\n *         <HelperText\n *           type=\"error\"\n *           visible={!this.state.text.includes('@')}\n *         >\n *           Email address is invalid!\n *         </HelperText>\n *       </View>\n *     );\n *   }\n * }\n * ```\n */\nclass HelperText extends React.PureComponent<Props, State> {\n  static defaultProps: Partial<Props> = {\n    type: 'info',\n    padding: 'normal',\n    visible: true,\n  };\n\n  state = {\n    shown: new Animated.Value(this.props.visible ? 1 : 0),\n    textHeight: 0,\n  };\n\n  componentDidUpdate(prevProps: Props, prevState: State) {\n    if (\n      prevProps.visible !== this.props.visible ||\n      prevState.textHeight !== this.state.textHeight\n    ) {\n      if (this.props.visible) {\n        this._showText();\n      } else {\n        this._hideText();\n      }\n    }\n  }\n\n  _showText = () => {\n    Animated.timing(this.state.shown, {\n      toValue: 1,\n      duration: 150,\n      useNativeDriver: true,\n    }).start();\n  };\n\n  _hideText = () => {\n    Animated.timing(this.state.shown, {\n      toValue: 0,\n      duration: 180,\n      useNativeDriver: true,\n    }).start();\n  };\n\n  _handleTextLayout = (e: LayoutChangeEvent) => {\n    this.props.onLayout && this.props.onLayout(e);\n    this.setState({\n      textHeight: e.nativeEvent.layout.height,\n    });\n  };\n\n  render() {\n    const {\n      style,\n      type,\n      visible,\n      theme,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      onLayout,\n      padding,\n      ...rest\n    } = this.props;\n    const { colors, dark } = theme;\n\n    const textColor =\n      this.props.type === 'error'\n        ? colors.error\n        : color(colors.text)\n            .alpha(dark ? 0.7 : 0.54)\n            .rgb()\n            .string();\n\n    return (\n      <AnimatedText\n        onLayout={this._handleTextLayout}\n        style={[\n          styles.text,\n          padding !== 'none' ? styles.padding : {},\n          {\n            color: textColor,\n            opacity: this.state.shown,\n            transform:\n              visible && type === 'error'\n                ? [\n                    {\n                      translateY: this.state.shown.interpolate({\n                        inputRange: [0, 1],\n                        outputRange: [-this.state.textHeight / 2, 0],\n                      }),\n                    },\n                  ]\n                : [],\n          },\n          style,\n        ]}\n        {...rest}\n      >\n        {this.props.children}\n      </AnimatedText>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  text: {\n    fontSize: 12,\n    paddingVertical: 4,\n  },\n  padding: {\n    paddingHorizontal: 12,\n  },\n});\n\nexport default withTheme(HelperText);\n"]},"metadata":{},"sourceType":"module"}