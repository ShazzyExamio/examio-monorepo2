{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nvar _jsxFileName = \"/Users/trensik/dev/react-native-paper/src/components/RadioButtonIOS.tsx\";\nimport * as React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport color from 'color';\nimport Icon from \"./Icon\";\nimport TouchableRipple from \"./TouchableRipple\";\nimport { withTheme } from \"../core/theming\";\n\nvar RadioButtonIOS = function (_React$Component) {\n  _inherits(RadioButtonIOS, _React$Component);\n\n  function RadioButtonIOS() {\n    _classCallCheck(this, RadioButtonIOS);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(RadioButtonIOS).apply(this, arguments));\n  }\n\n  _createClass(RadioButtonIOS, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          disabled = _this$props.disabled,\n          onPress = _this$props.onPress,\n          theme = _this$props.theme,\n          rest = _objectWithoutProperties(_this$props, [\"disabled\", \"onPress\", \"theme\"]);\n\n      var checkedColor = disabled ? theme.colors.disabled : this.props.color || theme.colors.accent;\n      var rippleColor;\n      var checked = this.props.status === 'checked';\n\n      if (disabled) {\n        rippleColor = color(theme.colors.text).alpha(0.16).rgb().string();\n      } else {\n        rippleColor = color(checkedColor).fade(0.32).rgb().string();\n      }\n\n      return React.createElement(TouchableRipple, _extends({}, rest, {\n        borderless: true,\n        rippleColor: rippleColor,\n        onPress: disabled ? undefined : function () {\n          onPress && onPress();\n        },\n        accessibilityTraits: disabled ? ['button', 'disabled'] : 'button',\n        accessibilityComponentType: checked ? 'radiobutton_checked' : 'radiobutton_unchecked',\n        accessibilityRole: \"button\",\n        accessibilityStates: disabled ? ['disabled'] : [],\n        accessibilityLiveRegion: \"polite\",\n        style: styles.container,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77\n        }\n      }), React.createElement(View, {\n        style: {\n          opacity: checked ? 1 : 0\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97\n        }\n      }, React.createElement(Icon, {\n        allowFontScaling: false,\n        source: \"check\",\n        size: 24,\n        color: checkedColor,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98\n        }\n      })));\n    }\n  }]);\n\n  return RadioButtonIOS;\n}(React.Component);\n\nRadioButtonIOS.displayName = 'RadioButton.IOS';\nvar styles = StyleSheet.create({\n  container: {\n    borderRadius: 18,\n    padding: 6\n  }\n});\nexport default withTheme(RadioButtonIOS);\nexport { RadioButtonIOS };","map":{"version":3,"sources":["RadioButtonIOS.tsx"],"names":["RadioButtonIOS","React","Component","displayName","disabled","onPress","theme","rest","checkedColor","checked","rippleColor","color","styles","opacity","StyleSheet","container","borderRadius","padding","withTheme"],"mappings":";;;;;;;;AAAA,OAAO,KAAP,KAAA,MAAA,OAAA;;;AAEA,OAAA,KAAA,MAAA,OAAA;AACA,OAAA,IAAA;AACA,OAAA,eAAA;AACA,SAAA,SAAA;;AA6CMA,IAAAA,c;;;;;;;;;;;6BAGK;MAAA,IAAA,WAAA,GACuC,KADvC,KAAA;MAAA,IACCI,QADD,GAAA,WAAA,CAAA,QAAA;MAAA,IACWC,OADX,GAAA,WAAA,CAAA,OAAA;MAAA,IACoBC,KADpB,GAAA,WAAA,CAAA,KAAA;MAAA,IAC8BC,IAD9B,GAAA,wBAAA,CAAA,WAAA,EAAA,CAAA,UAAA,EAAA,SAAA,EAAA,OAAA,CAAA,CAAA;;MAGP,IAAMC,YAAY,GAAGJ,QAAQ,GACzBE,KAAK,CAALA,MAAAA,CADyB,QAAA,GAEzB,KAAA,KAAA,CAAA,KAAA,IAAoBA,KAAK,CAALA,MAAAA,CAFxB,MAAA;MAIA,IAAA,WAAA;MAEA,IAAMG,OAAO,GAAG,KAAA,KAAA,CAAA,MAAA,KAAhB,SAAA;;MAEA,IAAA,QAAA,EAAc;QACZC,WAAW,GAAGC,KAAK,CAACL,KAAK,CAALA,MAAAA,CAANK,IAAK,CAALA,CAAAA,KAAAA,CAAAA,IAAAA,EAAAA,GAAAA,GAAdD,MAAcC,EAAdD;MADF,CAAA,MAKO;QACLA,WAAW,GAAGC,KAAK,CAALA,YAAK,CAALA,CAAAA,IAAAA,CAAAA,IAAAA,EAAAA,GAAAA,GAAdD,MAAcC,EAAdD;MAKF;;MAAA,OACE,KAAA,CAAA,aAAA,CAAA,eAAA,EAAA,QAAA,CAAA,EAAA,EAAA,IAAA,EAAA;QAEE,UAAU,EAFZ,IAAA;QAGE,WAAW,EAHb,WAAA;QAIE,OAAO,EACLN,QAAQ,GAAA,SAAA,GAEJ,YAAM;UACJC,OAAO,IAAIA,OAAXA,EAAAA;QARV,CAAA;QAWE,mBAAmB,EAAED,QAAQ,GAAG,CAAA,QAAA,EAAH,UAAG,CAAH,GAX/B,QAAA;QAYE,0BAA0B,EACxBK,OAAO,GAAA,qBAAA,GAbX,uBAAA;QAeE,iBAAiB,EAfnB,QAAA;QAgBE,mBAAmB,EAAEL,QAAQ,GAAG,CAAH,UAAG,CAAH,GAhB/B,EAAA;QAiBE,uBAAuB,EAjBzB,QAAA;QAkBE,KAAK,EAAEQ,MAAM,CAlBf,SAAA;QAAA,QAAA,EAAA;UAAA,QAAA,EAAA,YAAA;UAAA,UAAA,EAAA;QAAA;MAAA,CAAA,CAAA,EAoBE,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA;QAAM,KAAK,EAAE;UAAEC,OAAO,EAAEJ,OAAO,GAAA,CAAA,GAA/B;QAAa,CAAb;QAAA,QAAA,EAAA;UAAA,QAAA,EAAA,YAAA;UAAA,UAAA,EAAA;QAAA;MAAA,CAAA,EACE,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA;QACE,gBAAgB,EADlB,KAAA;QAEE,MAAM,EAFR,OAAA;QAGE,IAAI,EAHN,EAAA;QAIE,KAAK,EAJP,YAAA;QAAA,QAAA,EAAA;UAAA,QAAA,EAAA,YAAA;UAAA,UAAA,EAtBN;QAsBM;MAAA,CAAA,CADF,CApBF,CADF;;;;;EAzByBR,KAAK,CAACC,S,CAA7BF;;AAAAA,c,CACGG,WADHH,GACiB,iBADjBA;AA2DN,IAAMY,MAAM,GAAGE,UAAU,CAAVA,MAAAA,CAAkB;EAC/BC,SAAS,EAAE;IACTC,YAAY,EADH,EAAA;IAETC,OAAO,EAHX;EACa;AADoB,CAAlBH,CAAf;AAOA,eAAeI,SAAS,CAAxB,cAAwB,CAAxB;AAGA,SAAA,cAAA","sourcesContent":["import * as React from 'react';\nimport { StyleSheet, View } from 'react-native';\nimport color from 'color';\nimport Icon from './Icon';\nimport TouchableRipple from './TouchableRipple';\nimport { withTheme } from '../core/theming';\nimport { Theme, $RemoveChildren } from '../types';\n\ntype Props = $RemoveChildren<typeof TouchableRipple> & {\n  /**\n   * Value of the radio button\n   */\n  value: string;\n  /**\n   * Status of radio button.\n   */\n  status?: 'checked' | 'unchecked';\n  /**\n   * Whether radio is disabled.\n   */\n  disabled?: boolean;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * Custom color for radio.\n   */\n  color?: string;\n  /**\n   * @optional\n   */\n  theme: Theme;\n};\n\n/**\n * Radio buttons allow the selection a single option from a set.\n * This component follows platform guidelines for iOS.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img src=\"screenshots/radio-enabled.ios.png\" />\n *     <figcaption>Enabled</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/radio-disabled.ios.png\" />\n *     <figcaption>Disabled</figcaption>\n *   </figure>\n * </div>\n */\nclass RadioButtonIOS extends React.Component<Props> {\n  static displayName = 'RadioButton.IOS';\n\n  render() {\n    const { disabled, onPress, theme, ...rest } = this.props;\n\n    const checkedColor = disabled\n      ? theme.colors.disabled\n      : this.props.color || theme.colors.accent;\n\n    let rippleColor;\n\n    const checked = this.props.status === 'checked';\n\n    if (disabled) {\n      rippleColor = color(theme.colors.text)\n        .alpha(0.16)\n        .rgb()\n        .string();\n    } else {\n      rippleColor = color(checkedColor)\n        .fade(0.32)\n        .rgb()\n        .string();\n    }\n    return (\n      <TouchableRipple\n        {...rest}\n        borderless\n        rippleColor={rippleColor}\n        onPress={\n          disabled\n            ? undefined\n            : () => {\n                onPress && onPress();\n              }\n        }\n        accessibilityTraits={disabled ? ['button', 'disabled'] : 'button'}\n        accessibilityComponentType={\n          checked ? 'radiobutton_checked' : 'radiobutton_unchecked'\n        }\n        accessibilityRole=\"button\"\n        accessibilityStates={disabled ? ['disabled'] : []}\n        accessibilityLiveRegion=\"polite\"\n        style={styles.container}\n      >\n        <View style={{ opacity: checked ? 1 : 0 }}>\n          <Icon\n            allowFontScaling={false}\n            source=\"check\"\n            size={24}\n            color={checkedColor}\n          />\n        </View>\n      </TouchableRipple>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    borderRadius: 18,\n    padding: 6,\n  },\n});\n\nexport default withTheme(RadioButtonIOS);\n\n// @component-docs ignore-next-line\nexport { RadioButtonIOS };\n"]},"metadata":{},"sourceType":"module"}