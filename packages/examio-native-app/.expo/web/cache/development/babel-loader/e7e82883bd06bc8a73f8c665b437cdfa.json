{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectSpread from \"@babel/runtime/helpers/objectSpread\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nvar _jsxFileName = \"/Users/trensik/dev/react-native-paper/src/components/TextInput/TextInputOutlined.tsx\";\nimport * as React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport NativeTextInput from \"react-native-web/dist/exports/TextInput\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport I18nManager from \"react-native-web/dist/exports/I18nManager\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport color from 'color';\nimport InputLabel from \"./Label/InputLabel\";\nimport LabelBackground from \"./Label/LabelBackground\";\nimport { MAXIMIZED_LABEL_FONT_SIZE, MINIMIZED_LABEL_FONT_SIZE, LABEL_WIGGLE_X_OFFSET } from \"./constants\";\nimport { calculateLabelTopPosition, calculateInputHeight, calculatePadding, adjustPaddingOut, interpolatePlaceholder } from \"./helpers\";\nvar OUTLINE_MINIMIZED_LABEL_Y_OFFSET = -6;\nvar LABEL_PADDING_TOP = 8;\nvar MIN_HEIGHT = 64;\nvar MIN_DENSE_HEIGHT = 48;\nvar INPUT_PADDING_HORIZONTAL = 14;\n\nvar TextInputOutlined = function (_React$Component) {\n  _inherits(TextInputOutlined, _React$Component);\n\n  function TextInputOutlined() {\n    _classCallCheck(this, TextInputOutlined);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(TextInputOutlined).apply(this, arguments));\n  }\n\n  _createClass(TextInputOutlined, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          disabled = _this$props.disabled,\n          editable = _this$props.editable,\n          label = _this$props.label,\n          error = _this$props.error,\n          selectionColor = _this$props.selectionColor,\n          underlineColor = _this$props.underlineColor,\n          dense = _this$props.dense,\n          style = _this$props.style,\n          theme = _this$props.theme,\n          render = _this$props.render,\n          multiline = _this$props.multiline,\n          parentState = _this$props.parentState,\n          innerRef = _this$props.innerRef,\n          onFocus = _this$props.onFocus,\n          onBlur = _this$props.onBlur,\n          onChangeText = _this$props.onChangeText,\n          onLayoutAnimatedText = _this$props.onLayoutAnimatedText,\n          rest = _objectWithoutProperties(_this$props, [\"disabled\", \"editable\", \"label\", \"error\", \"selectionColor\", \"underlineColor\", \"dense\", \"style\", \"theme\", \"render\", \"multiline\", \"parentState\", \"innerRef\", \"onFocus\", \"onBlur\", \"onChangeText\", \"onLayoutAnimatedText\"]);\n\n      var colors = theme.colors,\n          fonts = theme.fonts;\n      var font = fonts.regular;\n      var hasActiveOutline = parentState.focused || error;\n\n      var _ref = StyleSheet.flatten(style) || {},\n          fontSizeStyle = _ref.fontSize,\n          fontWeight = _ref.fontWeight,\n          height = _ref.height,\n          _ref$backgroundColor = _ref.backgroundColor,\n          backgroundColor = _ref$backgroundColor === void 0 ? colors.background : _ref$backgroundColor,\n          viewStyle = _objectWithoutProperties(_ref, [\"fontSize\", \"fontWeight\", \"height\", \"backgroundColor\"]);\n\n      var fontSize = fontSizeStyle || MAXIMIZED_LABEL_FONT_SIZE;\n      var inputTextColor, activeColor, outlineColor, placeholderColor, containerStyle;\n\n      if (disabled) {\n        inputTextColor = activeColor = color(colors.text).alpha(0.54).rgb().string();\n        placeholderColor = outlineColor = colors.disabled;\n      } else {\n        inputTextColor = colors.text;\n        activeColor = error ? colors.error : colors.primary;\n        placeholderColor = outlineColor = colors.placeholder;\n      }\n\n      var labelScale = MINIMIZED_LABEL_FONT_SIZE / fontSize;\n      var fontScale = MAXIMIZED_LABEL_FONT_SIZE / fontSize;\n      var labelWidth = parentState.labelLayout.width;\n      var labelHeight = parentState.labelLayout.height;\n      var labelHalfWidth = labelWidth / 2;\n      var labelHalfHeight = labelHeight / 2;\n      var baseLabelTranslateX = (I18nManager.isRTL ? 1 : -1) * (labelHalfWidth - labelScale * labelWidth / 2 - (fontSize - MINIMIZED_LABEL_FONT_SIZE) * labelScale);\n      var minInputHeight = (dense ? MIN_DENSE_HEIGHT : MIN_HEIGHT) - LABEL_PADDING_TOP;\n      var inputHeight = calculateInputHeight(labelHeight, height, minInputHeight);\n      var topPosition = calculateLabelTopPosition(labelHeight, inputHeight, LABEL_PADDING_TOP);\n      if (height && typeof height !== 'number') console.warn('Currently we support only numbers in height prop');\n      var paddingSettings = {\n        height: height ? +height : null,\n        labelHalfHeight: labelHalfHeight,\n        offset: LABEL_PADDING_TOP,\n        multiline: multiline ? multiline : null,\n        dense: dense ? dense : null,\n        topPosition: topPosition,\n        fontSize: fontSize,\n        label: label,\n        scale: fontScale,\n        isAndroid: Platform.OS === 'android',\n        styles: StyleSheet.flatten(dense ? styles.inputOutlinedDense : styles.inputOutlined)\n      };\n      var pad = calculatePadding(paddingSettings);\n      var paddingOut = adjustPaddingOut(_objectSpread({}, paddingSettings, {\n        pad: pad\n      }));\n      var baseLabelTranslateY = -labelHalfHeight - (topPosition + OUTLINE_MINIMIZED_LABEL_Y_OFFSET);\n      var placeholderOpacity = interpolatePlaceholder(parentState.labeled, hasActiveOutline);\n      var labelProps = {\n        label: label,\n        onLayoutAnimatedText: onLayoutAnimatedText,\n        placeholderOpacity: placeholderOpacity,\n        error: error,\n        placeholderStyle: styles.placeholder,\n        baseLabelTranslateY: baseLabelTranslateY,\n        baseLabelTranslateX: baseLabelTranslateX,\n        font: font,\n        fontSize: fontSize,\n        fontWeight: fontWeight,\n        labelScale: labelScale,\n        wiggleOffsetX: LABEL_WIGGLE_X_OFFSET,\n        topPosition: topPosition,\n        hasActiveOutline: hasActiveOutline,\n        activeColor: activeColor,\n        placeholderColor: placeholderColor,\n        backgroundColor: backgroundColor\n      };\n      var minHeight = height || (dense ? MIN_DENSE_HEIGHT : MIN_HEIGHT);\n      return React.createElement(View, {\n        style: [containerStyle, viewStyle],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 185\n        }\n      }, React.createElement(View, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 191\n        }\n      }, React.createElement(Outline, {\n        theme: theme,\n        hasActiveOutline: hasActiveOutline,\n        activeColor: activeColor,\n        outlineColor: outlineColor,\n        backgroundColor: backgroundColor,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 192\n        }\n      }), React.createElement(View, {\n        style: {\n          paddingTop: LABEL_PADDING_TOP,\n          paddingBottom: 0,\n          minHeight: minHeight\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 199\n        }\n      }, React.createElement(InputLabel, {\n        parentState: parentState,\n        labelProps: labelProps,\n        labelBackground: LabelBackground,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 206\n        }\n      }), render && render(_objectSpread({}, rest, {\n        ref: innerRef,\n        onChangeText: onChangeText,\n        placeholder: label ? parentState.placeholder : this.props.placeholder,\n        placeholderTextColor: placeholderColor,\n        editable: !disabled && editable,\n        selectionColor: typeof selectionColor === 'undefined' ? activeColor : selectionColor,\n        onFocus: onFocus,\n        onBlur: onBlur,\n        underlineColorAndroid: 'transparent',\n        multiline: multiline,\n        style: [styles.input, !multiline || multiline && height ? {\n          height: inputHeight\n        } : {}, paddingOut, _objectSpread({}, font, {\n          fontSize: fontSize,\n          fontWeight: fontWeight,\n          color: inputTextColor,\n          textAlignVertical: multiline && height ? 'top' : 'center'\n        })]\n      })))));\n    }\n  }]);\n\n  return TextInputOutlined;\n}(React.Component);\n\nTextInputOutlined.defaultProps = {\n  disabled: false,\n  error: false,\n  multiline: false,\n  editable: true,\n  render: function render(props) {\n    return React.createElement(NativeTextInput, _extends({}, props, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44\n      }\n    }));\n  }\n};\nexport default TextInputOutlined;\n\nvar Outline = function Outline(_ref2) {\n  var theme = _ref2.theme,\n      hasActiveOutline = _ref2.hasActiveOutline,\n      activeColor = _ref2.activeColor,\n      outlineColor = _ref2.outlineColor,\n      backgroundColor = _ref2.backgroundColor;\n  return React.createElement(View, {\n    pointerEvents: \"none\",\n    style: [styles.outline, {\n      backgroundColor: backgroundColor,\n      borderRadius: theme.roundness,\n      borderWidth: hasActiveOutline ? 2 : 1,\n      borderColor: hasActiveOutline ? activeColor : outlineColor\n    }],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 269\n    }\n  });\n};\n\nvar styles = StyleSheet.create({\n  placeholder: {\n    position: 'absolute',\n    left: 0,\n    paddingHorizontal: INPUT_PADDING_HORIZONTAL\n  },\n  outline: {\n    position: 'absolute',\n    left: 0,\n    right: 0,\n    top: 6,\n    bottom: 0\n  },\n  input: {\n    flexGrow: 1,\n    paddingHorizontal: INPUT_PADDING_HORIZONTAL,\n    margin: 0,\n    textAlign: I18nManager.isRTL ? 'right' : 'left',\n    zIndex: 1\n  },\n  inputOutlined: {\n    paddingTop: 8,\n    paddingBottom: 8\n  },\n  inputOutlinedDense: {\n    paddingTop: 4,\n    paddingBottom: 4\n  }\n});","map":{"version":3,"sources":["TextInputOutlined.tsx"],"names":["OUTLINE_MINIMIZED_LABEL_Y_OFFSET","LABEL_PADDING_TOP","MIN_HEIGHT","MIN_DENSE_HEIGHT","INPUT_PADDING_HORIZONTAL","TextInputOutlined","React","Component","defaultProps","disabled","error","multiline","editable","render","label","selectionColor","underlineColor","dense","style","theme","parentState","innerRef","onFocus","onBlur","onChangeText","onLayoutAnimatedText","rest","colors","fonts","font","hasActiveOutline","fontSizeStyle","fontWeight","height","backgroundColor","viewStyle","StyleSheet","fontSize","inputTextColor","activeColor","color","placeholderColor","outlineColor","labelScale","MINIMIZED_LABEL_FONT_SIZE","fontScale","MAXIMIZED_LABEL_FONT_SIZE","labelWidth","labelHeight","labelHalfWidth","labelHalfHeight","baseLabelTranslateX","I18nManager","minInputHeight","inputHeight","calculateInputHeight","topPosition","calculateLabelTopPosition","console","paddingSettings","offset","scale","isAndroid","Platform","styles","pad","calculatePadding","paddingOut","adjustPaddingOut","baseLabelTranslateY","placeholderOpacity","interpolatePlaceholder","labelProps","placeholderStyle","wiggleOffsetX","minHeight","paddingTop","paddingBottom","ref","placeholder","placeholderTextColor","underlineColorAndroid","textAlignVertical","Outline","borderRadius","borderWidth","borderColor","position","left","paddingHorizontal","outline","right","top","bottom","input","flexGrow","margin","textAlign","zIndex","inputOutlined","inputOutlinedDense"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  View,\n  TextInput as NativeTextInput,\n  StyleSheet,\n  I18nManager,\n  Platform,\n  TextStyle,\n} from 'react-native';\nimport color from 'color';\n\nimport InputLabel from './Label/InputLabel';\nimport LabelBackground from './Label/LabelBackground';\nimport { RenderProps, ChildTextInputProps } from './types';\nimport { Theme } from '../../types';\n\nimport {\n  MAXIMIZED_LABEL_FONT_SIZE,\n  MINIMIZED_LABEL_FONT_SIZE,\n  LABEL_WIGGLE_X_OFFSET,\n} from './constants';\n\nimport {\n  calculateLabelTopPosition,\n  calculateInputHeight,\n  calculatePadding,\n  adjustPaddingOut,\n  Padding,\n  interpolatePlaceholder,\n} from './helpers';\n\nconst OUTLINE_MINIMIZED_LABEL_Y_OFFSET = -6;\nconst LABEL_PADDING_TOP = 8;\nconst MIN_HEIGHT = 64;\nconst MIN_DENSE_HEIGHT = 48;\nconst INPUT_PADDING_HORIZONTAL = 14;\n\nclass TextInputOutlined extends React.Component<ChildTextInputProps, {}> {\n  static defaultProps = {\n    disabled: false,\n    error: false,\n    multiline: false,\n    editable: true,\n    render: (props: RenderProps) => <NativeTextInput {...props} />,\n  };\n\n  render() {\n    const {\n      disabled,\n      editable,\n      label,\n      error,\n      selectionColor,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      underlineColor,\n      dense,\n      style,\n      theme,\n      render,\n      multiline,\n      parentState,\n      innerRef,\n      onFocus,\n      onBlur,\n      onChangeText,\n      onLayoutAnimatedText,\n      ...rest\n    } = this.props;\n\n    const { colors, fonts } = theme;\n    const font = fonts.regular;\n    const hasActiveOutline = parentState.focused || error;\n\n    const {\n      fontSize: fontSizeStyle,\n      fontWeight,\n      height,\n      backgroundColor = colors.background,\n      ...viewStyle\n    } = (StyleSheet.flatten(style) || {}) as TextStyle;\n    const fontSize = fontSizeStyle || MAXIMIZED_LABEL_FONT_SIZE;\n\n    let inputTextColor,\n      activeColor,\n      outlineColor,\n      placeholderColor,\n      containerStyle;\n\n    if (disabled) {\n      inputTextColor = activeColor = color(colors.text)\n        .alpha(0.54)\n        .rgb()\n        .string();\n      placeholderColor = outlineColor = colors.disabled;\n    } else {\n      inputTextColor = colors.text;\n      activeColor = error ? colors.error : colors.primary;\n      placeholderColor = outlineColor = colors.placeholder;\n    }\n\n    const labelScale = MINIMIZED_LABEL_FONT_SIZE / fontSize;\n    const fontScale = MAXIMIZED_LABEL_FONT_SIZE / fontSize;\n\n    const labelWidth = parentState.labelLayout.width;\n    const labelHeight = parentState.labelLayout.height;\n    const labelHalfWidth = labelWidth / 2;\n    const labelHalfHeight = labelHeight / 2;\n\n    const baseLabelTranslateX =\n      (I18nManager.isRTL ? 1 : -1) *\n      (labelHalfWidth -\n        (labelScale * labelWidth) / 2 -\n        (fontSize - MINIMIZED_LABEL_FONT_SIZE) * labelScale);\n\n    const minInputHeight =\n      (dense ? MIN_DENSE_HEIGHT : MIN_HEIGHT) - LABEL_PADDING_TOP;\n\n    const inputHeight = calculateInputHeight(\n      labelHeight,\n      height,\n      minInputHeight\n    );\n\n    const topPosition = calculateLabelTopPosition(\n      labelHeight,\n      inputHeight,\n      LABEL_PADDING_TOP\n    );\n\n    if (height && typeof height !== 'number')\n      // eslint-disable-next-line\n      console.warn('Currently we support only numbers in height prop');\n\n    const paddingSettings = {\n      height: height ? +height : null,\n      labelHalfHeight,\n      offset: LABEL_PADDING_TOP,\n      multiline: multiline ? multiline : null,\n      dense: dense ? dense : null,\n      topPosition,\n      fontSize,\n      label,\n      scale: fontScale,\n      isAndroid: Platform.OS === 'android',\n      styles: StyleSheet.flatten(\n        dense ? styles.inputOutlinedDense : styles.inputOutlined\n      ) as Padding,\n    };\n\n    const pad = calculatePadding(paddingSettings);\n\n    const paddingOut = adjustPaddingOut({ ...paddingSettings, pad });\n\n    const baseLabelTranslateY =\n      -labelHalfHeight - (topPosition + OUTLINE_MINIMIZED_LABEL_Y_OFFSET);\n\n    const placeholderOpacity = interpolatePlaceholder(\n      parentState.labeled,\n      hasActiveOutline\n    );\n\n    const labelProps = {\n      label,\n      onLayoutAnimatedText,\n      placeholderOpacity,\n      error,\n      placeholderStyle: styles.placeholder,\n      baseLabelTranslateY,\n      baseLabelTranslateX,\n      font,\n      fontSize,\n      fontWeight,\n      labelScale,\n      wiggleOffsetX: LABEL_WIGGLE_X_OFFSET,\n      topPosition,\n      hasActiveOutline,\n      activeColor,\n      placeholderColor,\n      backgroundColor,\n    };\n\n    const minHeight = height || (dense ? MIN_DENSE_HEIGHT : MIN_HEIGHT);\n\n    return (\n      <View style={[containerStyle, viewStyle]}>\n        {/* \n          Render the outline separately from the container\n          This is so that the label can overlap the outline\n          Otherwise the border will cut off the label on Android \n          */}\n        <View>\n          <Outline\n            theme={theme}\n            hasActiveOutline={hasActiveOutline}\n            activeColor={activeColor}\n            outlineColor={outlineColor}\n            backgroundColor={backgroundColor}\n          />\n          <View\n            style={{\n              paddingTop: LABEL_PADDING_TOP,\n              paddingBottom: 0,\n              minHeight,\n            }}\n          >\n            <InputLabel\n              parentState={parentState}\n              labelProps={labelProps}\n              labelBackground={LabelBackground}\n            />\n\n            {render &&\n              render({\n                ...rest,\n                ref: innerRef,\n                onChangeText,\n                placeholder: label\n                  ? parentState.placeholder\n                  : this.props.placeholder,\n                placeholderTextColor: placeholderColor,\n                editable: !disabled && editable,\n                selectionColor:\n                  typeof selectionColor === 'undefined'\n                    ? activeColor\n                    : selectionColor,\n                onFocus,\n                onBlur,\n                underlineColorAndroid: 'transparent',\n                multiline,\n                style: [\n                  styles.input,\n                  !multiline || (multiline && height)\n                    ? { height: inputHeight }\n                    : {},\n                  paddingOut,\n                  {\n                    ...font,\n                    fontSize,\n                    fontWeight,\n                    color: inputTextColor,\n                    textAlignVertical: multiline && height ? 'top' : 'center',\n                  },\n                ],\n              } as RenderProps)}\n          </View>\n        </View>\n      </View>\n    );\n  }\n}\n\nexport default TextInputOutlined;\n\ntype OutlineType = {\n  activeColor: string;\n  hasActiveOutline: boolean | undefined;\n  outlineColor: string | undefined;\n  backgroundColor: string | undefined;\n  theme: Theme;\n};\n\nconst Outline = ({\n  theme,\n  hasActiveOutline,\n  activeColor,\n  outlineColor,\n  backgroundColor,\n}: OutlineType) => (\n  <View\n    pointerEvents=\"none\"\n    style={[\n      styles.outline,\n      // eslint-disable-next-line react-native/no-inline-styles\n      {\n        backgroundColor,\n        borderRadius: theme.roundness,\n        borderWidth: hasActiveOutline ? 2 : 1,\n        borderColor: hasActiveOutline ? activeColor : outlineColor,\n      },\n    ]}\n  />\n);\n\nconst styles = StyleSheet.create({\n  placeholder: {\n    position: 'absolute',\n    left: 0,\n    paddingHorizontal: INPUT_PADDING_HORIZONTAL,\n  },\n  outline: {\n    position: 'absolute',\n    left: 0,\n    right: 0,\n    top: 6,\n    bottom: 0,\n  },\n  input: {\n    flexGrow: 1,\n    paddingHorizontal: INPUT_PADDING_HORIZONTAL,\n    margin: 0,\n    textAlign: I18nManager.isRTL ? 'right' : 'left',\n    zIndex: 1,\n  },\n  inputOutlined: {\n    paddingTop: 8,\n    paddingBottom: 8,\n  },\n  inputOutlinedDense: {\n    paddingTop: 4,\n    paddingBottom: 4,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}