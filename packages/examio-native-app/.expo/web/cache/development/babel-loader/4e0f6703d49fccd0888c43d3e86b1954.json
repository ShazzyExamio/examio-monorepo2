{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectSpread from \"@babel/runtime/helpers/objectSpread\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nvar _jsxFileName = \"/Users/trensik/dev/react-native-paper/src/components/Appbar/AppbarContent.tsx\";\nimport * as React from 'react';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TouchableWithoutFeedback from \"react-native-web/dist/exports/TouchableWithoutFeedback\";\nimport View from \"react-native-web/dist/exports/View\";\nimport color from 'color';\nimport Text from \"../Typography/Text\";\nimport { withTheme } from \"../../core/theming\";\nimport { white } from \"../../styles/colors\";\n\nvar AppbarContent = function (_React$Component) {\n  _inherits(AppbarContent, _React$Component);\n\n  function AppbarContent() {\n    _classCallCheck(this, AppbarContent);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(AppbarContent).apply(this, arguments));\n  }\n\n  _createClass(AppbarContent, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          _this$props$color = _this$props.color,\n          titleColor = _this$props$color === void 0 ? white : _this$props$color,\n          subtitle = _this$props.subtitle,\n          subtitleStyle = _this$props.subtitleStyle,\n          onPress = _this$props.onPress,\n          style = _this$props.style,\n          titleStyle = _this$props.titleStyle,\n          theme = _this$props.theme,\n          title = _this$props.title,\n          rest = _objectWithoutProperties(_this$props, [\"color\", \"subtitle\", \"subtitleStyle\", \"onPress\", \"style\", \"titleStyle\", \"theme\", \"title\"]);\n\n      var fonts = theme.fonts;\n      var subtitleColor = color(titleColor).alpha(0.7).rgb().string();\n      return React.createElement(TouchableWithoutFeedback, {\n        onPress: onPress,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78\n        }\n      }, React.createElement(View, _extends({\n        style: [styles.container, style]\n      }, rest, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79\n        }\n      }), React.createElement(Text, {\n        style: [_objectSpread({\n          color: titleColor\n        }, Platform.OS === 'ios' ? fonts.regular : fonts.medium), styles.title, titleStyle],\n        numberOfLines: 1,\n        accessibilityTraits: \"header\",\n        accessibilityRole: Platform.OS === 'web' ? 'heading' : 'header',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80\n        }\n      }, title), subtitle ? React.createElement(Text, {\n        style: [styles.subtitle, {\n          color: subtitleColor\n        }, subtitleStyle],\n        numberOfLines: 1,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97\n        }\n      }, subtitle) : null));\n    }\n  }]);\n\n  return AppbarContent;\n}(React.Component);\n\nAppbarContent.displayName = 'Appbar.Content';\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    paddingHorizontal: 12\n  },\n  title: {\n    fontSize: Platform.OS === 'ios' ? 17 : 20\n  },\n  subtitle: {\n    fontSize: Platform.OS === 'ios' ? 11 : 14\n  }\n});\nexport default withTheme(AppbarContent);\nexport { AppbarContent };","map":{"version":3,"sources":["AppbarContent.tsx"],"names":["AppbarContent","React","Component","displayName","titleColor","subtitle","subtitleStyle","onPress","style","titleStyle","theme","title","rest","fonts","subtitleColor","color","styles","Platform","StyleSheet","container","flex","paddingHorizontal","fontSize","withTheme"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  Platform,\n  StyleProp,\n  StyleSheet,\n  TextStyle,\n  TouchableWithoutFeedback,\n  View,\n  ViewStyle,\n} from 'react-native';\nimport color from 'color';\n\nimport Text from '../Typography/Text';\n\nimport { withTheme } from '../../core/theming';\nimport { white } from '../../styles/colors';\n\nimport { Theme, $RemoveChildren } from '../../types';\n\ntype Props = $RemoveChildren<typeof View> & {\n  /**\n   * Custom color for the text.\n   */\n  color?: string;\n  /**\n   * Text for the title.\n   */\n  title: React.ReactNode;\n  /**\n   * Style for the title.\n   */\n  titleStyle?: StyleProp<TextStyle>;\n  /**\n   * Text for the subtitle.\n   */\n  subtitle?: React.ReactNode;\n  /**\n   * Style for the subtitle.\n   */\n  subtitleStyle?: StyleProp<TextStyle>;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme: Theme;\n};\n\n/**\n * A component used to display a title and optional subtitle in a appbar.\n */\nclass AppbarContent extends React.Component<Props> {\n  static displayName = 'Appbar.Content';\n\n  render() {\n    const {\n      color: titleColor = white,\n      subtitle,\n      subtitleStyle,\n      onPress,\n      style,\n      titleStyle,\n      theme,\n      title,\n      ...rest\n    } = this.props;\n    const { fonts } = theme;\n\n    const subtitleColor = color(titleColor)\n      .alpha(0.7)\n      .rgb()\n      .string();\n\n    return (\n      <TouchableWithoutFeedback onPress={onPress}>\n        <View style={[styles.container, style]} {...rest}>\n          <Text\n            style={[\n              {\n                color: titleColor,\n                ...(Platform.OS === 'ios' ? fonts.regular : fonts.medium),\n              },\n              styles.title,\n              titleStyle,\n            ]}\n            numberOfLines={1}\n            accessibilityTraits=\"header\"\n            // @ts-ignore\n            accessibilityRole={Platform.OS === 'web' ? 'heading' : 'header'}\n          >\n            {title}\n          </Text>\n          {subtitle ? (\n            <Text\n              style={[styles.subtitle, { color: subtitleColor }, subtitleStyle]}\n              numberOfLines={1}\n            >\n              {subtitle}\n            </Text>\n          ) : null}\n        </View>\n      </TouchableWithoutFeedback>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    paddingHorizontal: 12,\n  },\n  title: {\n    fontSize: Platform.OS === 'ios' ? 17 : 20,\n  },\n  subtitle: {\n    fontSize: Platform.OS === 'ios' ? 11 : 14,\n  },\n});\n\nexport default withTheme(AppbarContent);\n\n// @component-docs ignore-next-line\nexport { AppbarContent };\n"]},"metadata":{},"sourceType":"module"}