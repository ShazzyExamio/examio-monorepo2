{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nvar _jsxFileName = \"/Users/trensik/dev/react-native-paper/src/components/Surface.tsx\";\nimport * as React from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport shadow from \"../styles/shadow\";\nimport { withTheme } from \"../core/theming\";\nimport overlay from \"../styles/overlay\";\n\nvar Surface = function (_React$Component) {\n  _inherits(Surface, _React$Component);\n\n  function Surface() {\n    _classCallCheck(this, Surface);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Surface).apply(this, arguments));\n  }\n\n  _createClass(Surface, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          style = _this$props.style,\n          theme = _this$props.theme,\n          rest = _objectWithoutProperties(_this$props, [\"style\", \"theme\"]);\n\n      var flattenedStyles = StyleSheet.flatten(style) || {};\n      var _flattenedStyles$elev = flattenedStyles.elevation,\n          elevation = _flattenedStyles$elev === void 0 ? 4 : _flattenedStyles$elev;\n      var isDarkTheme = theme.dark,\n          mode = theme.mode,\n          colors = theme.colors;\n      return React.createElement(Animated.View, _extends({}, rest, {\n        style: [{\n          backgroundColor: isDarkTheme && mode === 'adaptive' ? overlay(elevation, colors.surface) : colors.surface\n        }, elevation && shadow(elevation), style],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70\n        }\n      }));\n    }\n  }]);\n\n  return Surface;\n}(React.Component);\n\nexport default withTheme(Surface);","map":{"version":3,"sources":["Surface.tsx"],"names":["Surface","React","Component","style","theme","rest","flattenedStyles","StyleSheet","elevation","isDarkTheme","mode","colors","backgroundColor","overlay","shadow","withTheme"],"mappings":";;;;;;;;AAAA,OAAO,KAAP,KAAA,MAAA,OAAA;;;AAEA,OAAA,MAAA;AACA,SAAA,SAAA;AAEA,OAAA,OAAA;;AAyDMA,IAAAA,O;;;;;;;;;;;6BACK;MAAA,IAAA,WAAA,GAC2B,KAD3B,KAAA;MAAA,IACCG,KADD,GAAA,WAAA,CAAA,KAAA;MAAA,IACQC,KADR,GAAA,WAAA,CAAA,KAAA;MAAA,IACkBC,IADlB,GAAA,wBAAA,CAAA,WAAA,EAAA,CAAA,OAAA,EAAA,OAAA,CAAA,CAAA;;MAEP,IAAMC,eAAe,GAAGC,UAAU,CAAVA,OAAAA,CAAAA,KAAAA,KAAxB,EAAA;MAFO,IAAA,qBAAA,GAG8BD,eAH9B,CAAA,SAAA;MAAA,IAGCE,SAHD,GAAA,qBAAA,KAAA,KAAA,CAAA,GAAA,CAAA,GAAA,qBAAA;MAAA,IAIOC,WAJP,GAIqCL,KAJrC,CAAA,IAAA;MAAA,IAIoBM,IAJpB,GAIqCN,KAJrC,CAAA,IAAA;MAAA,IAI0BO,MAJ1B,GAIqCP,KAJrC,CAAA,MAAA;MAKP,OACE,KAAA,CAAA,aAAA,CAAC,QAAD,CAAA,IAAA,EAAA,QAAA,CAAA,EAAA,EAAA,IAAA,EAAA;QAEE,KAAK,EAAE,CACL;UACEQ,eAAe,EACbH,WAAW,IAAIC,IAAI,KAAnBD,UAAAA,GACII,OAAO,CAAA,SAAA,EAAYF,MAAM,CAD7BF,OACW,CADXA,GAEIE,MAAM,CALT;QACL,CADK,EAOLH,SAAS,IAAIM,MAAM,CAPd,SAOc,CAPd,EAFT,KAES,CAFT;QAAA,QAAA,EAAA;UAAA,QAAA,EAAA,YAAA;UAAA,UAAA,EADF;QACE;MAAA,CAAA,CAAA,CADF;;;;;EANkBb,KAAK,CAACC,S,CAAtBF;;AAuBN,eAAee,SAAS,CAAxB,OAAwB,CAAxB","sourcesContent":["import * as React from 'react';\nimport { Animated, StyleSheet, View, StyleProp, ViewStyle } from 'react-native';\nimport shadow from '../styles/shadow';\nimport { withTheme } from '../core/theming';\nimport { Theme } from '../types';\nimport overlay from '../styles/overlay';\n\ntype Props = React.ComponentProps<typeof View> & {\n  /**\n   * Content of the `Surface`.\n   */\n  children: React.ReactNode;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme: Theme;\n};\n\n/**\n * Surface is a basic container that can give depth to an element with elevation shadow.\n * On dark theme with `adaptive` mode, surface is constructed by also placing a semi-transparent white overlay over a component surface.\n * See [Dark Theme](https://callstack.github.io/react-native-paper/theming.html#dark-theme) for more informations.\n * Overlay and/or shadow can be applied by specifying the `elevation` property both on Android and iOS.\n *\n * <div class=\"screenshots\">\n *   <img src=\"screenshots/surface-1.png\" />\n *   <img src=\"screenshots/surface-2.png\" />\n *   <img src=\"screenshots/surface-3.png\" />\n * </div>\n *\n * <div class=\"screenshots\">\n *   <img src=\"screenshots/surface-dark-1.png\" />\n *   <img src=\"screenshots/surface-dark-2.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Surface, Text } from 'react-native-paper';\n * import { StyleSheet } from 'react-native';\n *\n * const MyComponent = () => (\n *   <Surface style={styles.surface}>\n *      <Text>Surface</Text>\n *   </Surface>\n * );\n *\n * export default MyComponent;\n *\n * const styles = StyleSheet.create({\n *   surface: {\n *     padding: 8,\n *     height: 80,\n *     width: 80,\n *     alignItems: 'center',\n *     justifyContent: 'center',\n *     elevation: 4,\n *   },\n * });\n * ```\n */\nclass Surface extends React.Component<Props> {\n  render() {\n    const { style, theme, ...rest } = this.props;\n    const flattenedStyles = StyleSheet.flatten(style) || {};\n    const { elevation = 4 }: ViewStyle = flattenedStyles;\n    const { dark: isDarkTheme, mode, colors } = theme;\n    return (\n      <Animated.View\n        {...rest}\n        style={[\n          {\n            backgroundColor:\n              isDarkTheme && mode === 'adaptive'\n                ? overlay(elevation, colors.surface)\n                : colors.surface,\n          },\n          elevation && shadow(elevation),\n          style,\n        ]}\n      />\n    );\n  }\n}\nexport default withTheme(Surface);\n"]},"metadata":{},"sourceType":"module"}